/// <reference types="react" />
import { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors';
import { ScaleBandSpec, ScaleLinearSpec } from '@nivo/scales';
import { ComputedBoxPlotSummary } from './types';
export declare const defaultProps: {
    value: string;
    groupBy: string;
    groups: null;
    subGroupBy: null;
    subGroups: null;
    quantiles: number[];
    layout: "vertical";
    minValue: "auto";
    maxValue: "auto";
    valueScale: ScaleLinearSpec;
    indexScale: ScaleBandSpec;
    padding: number;
    innerPadding: number;
    opacity: number;
    activeOpacity: number;
    inactiveOpacity: number;
    axisBottom: {};
    axisLeft: {};
    enableGridX: boolean;
    enableGridY: boolean;
    valueFormat: (value: number) => string;
    colorBy: "subGroup";
    colors: OrdinalColorScaleConfig<any>;
    borderRadius: number;
    borderWidth: number;
    borderColor: InheritedColorConfig<ComputedBoxPlotSummary>;
    medianWidth: number;
    medianColor: InheritedColorConfig<ComputedBoxPlotSummary>;
    whiskerWidth: number;
    whiskerColor: InheritedColorConfig<ComputedBoxPlotSummary>;
    whiskerEndSize: number;
    isInteractive: boolean;
    tooltip: ({ color, label, formatted }: import("./types").BoxPlotTooltipProps) => JSX.Element;
    tooltipLabel: (datum: import("./types").BoxPlotSummary) => string;
    legends: never[];
    annotations: never[];
    markers: never[];
};
export declare const svgDefaultProps: {
    layers: string[];
    boxPlotComponent: <RawDatum extends import("./types").BoxPlotDatum>({ boxPlot, layout, animatedProps: { borderColor, medianColor, whiskerColor, color, opacity, transform, valueInterval, valueDistance0, valueDistance1, valueDistance3, valueDistance4, }, borderRadius, borderWidth, medianWidth, whiskerWidth, whiskerEndSize, isInteractive, onClick, onMouseEnter, onMouseLeave, setActiveItem, tooltip, isFocusable, ariaLabel, ariaLabelledBy, ariaDescribedBy, }: import("./types").BoxPlotItemProps<RawDatum>) => JSX.Element;
    defs: never[];
    fill: never[];
    animate: boolean;
    motionConfig: string;
    role: string;
    isFocusable: boolean;
    value: string;
    groupBy: string;
    groups: null;
    subGroupBy: null;
    subGroups: null;
    quantiles: number[];
    layout: "vertical";
    minValue: "auto";
    maxValue: "auto";
    valueScale: ScaleLinearSpec;
    indexScale: ScaleBandSpec;
    padding: number;
    innerPadding: number;
    opacity: number;
    activeOpacity: number;
    inactiveOpacity: number;
    axisBottom: {};
    axisLeft: {};
    enableGridX: boolean;
    enableGridY: boolean;
    valueFormat: (value: number) => string;
    colorBy: "subGroup";
    colors: OrdinalColorScaleConfig<any>;
    borderRadius: number;
    borderWidth: number;
    borderColor: InheritedColorConfig<ComputedBoxPlotSummary>;
    medianWidth: number;
    medianColor: InheritedColorConfig<ComputedBoxPlotSummary>;
    whiskerWidth: number;
    whiskerColor: InheritedColorConfig<ComputedBoxPlotSummary>;
    whiskerEndSize: number;
    isInteractive: boolean;
    tooltip: ({ color, label, formatted }: import("./types").BoxPlotTooltipProps) => JSX.Element;
    tooltipLabel: (datum: import("./types").BoxPlotSummary) => string;
    legends: never[];
    annotations: never[];
    markers: never[];
};
//# sourceMappingURL=props.d.ts.map