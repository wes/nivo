{"version":3,"file":"nivo-boxplot.cjs.js","sources":["../src/BoxPlotAnnotations.tsx","../src/BoxPlotLegends.tsx","../src/BoxPlotItem.tsx","../src/BoxPlotTooltip.tsx","../src/props.ts","../src/compute/generation.ts","../src/compute/common.ts","../src/compute/stratification.ts","../src/hooks.ts","../src/compute/legends.ts","../src/BoxPlot.tsx","../src/ResponsiveBoxPlot.tsx"],"sourcesContent":["import { Annotation, useAnnotations } from '@nivo/annotations'\nimport { BoxPlotAnnotationsProps, ComputedBoxPlotSummary } from './types'\n\nconst getPosition = (boxPlot: ComputedBoxPlotSummary) => ({\n    x: boxPlot.x + boxPlot.width / 2,\n    y: boxPlot.y + boxPlot.height / 2,\n})\n\nconst getDimensions = ({ width, height }: { width: number; height: number }) => ({\n    width,\n    height,\n    size: Math.max(width, height),\n})\n\nexport const BoxPlotAnnotations = ({ boxPlots, annotations }: BoxPlotAnnotationsProps) => {\n    const boundAnnotations = useAnnotations({\n        data: boxPlots,\n        annotations,\n        getPosition,\n        getDimensions,\n    })\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { BoxLegendSvg, LegendProps } from '@nivo/legends'\nimport { LegendData } from './types'\n\ninterface BoxPlotLegendsProps {\n    width: number\n    height: number\n    legends: [LegendProps, LegendData[]][]\n}\n\nexport const BoxPlotLegends = ({ width, height, legends }: BoxPlotLegendsProps) => (\n    <>\n        {legends.map(([legend, data], i) => {\n            // Advanced feature:\n            // Allow a legend spec to carry its own custom content via 'legend.data'\n            // Or fallback on content provided via 'data'\n            return (\n                <BoxLegendSvg\n                    key={i}\n                    {...legend}\n                    containerWidth={width}\n                    containerHeight={height}\n                    data={legend.data ?? data}\n                />\n            )\n        })}\n    </>\n)\n","import { createElement, MouseEvent, useCallback, useMemo } from 'react'\nimport { animated, SpringValue } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BoxPlotDatum, BoxPlotItemProps } from './types'\n\nconst BoxPlotItemWhisker = ({\n    distStart,\n    distEnd,\n    whiskerEndSize,\n    whiskerColor,\n    whiskerWidth,\n}: {\n    distStart: SpringValue<number>\n    distEnd: SpringValue<number>\n    whiskerEndSize: number\n    whiskerColor: SpringValue<string>\n    whiskerWidth: number\n}) => {\n    return (\n        <>\n            <animated.line\n                x1={0}\n                x2={0}\n                y1={distStart}\n                y2={distEnd}\n                strokeWidth={whiskerWidth}\n                stroke={whiskerColor}\n            />\n            {whiskerEndSize > 0 ? (\n                <animated.line\n                    x1={-whiskerEndSize}\n                    x2={whiskerEndSize}\n                    y1={distEnd}\n                    y2={distEnd}\n                    strokeWidth={whiskerWidth}\n                    stroke={whiskerColor}\n                />\n            ) : null}\n        </>\n    )\n}\n\nexport const BoxPlotItem = <RawDatum extends BoxPlotDatum>({\n    boxPlot,\n    layout,\n    animatedProps: {\n        borderColor,\n        medianColor,\n        whiskerColor,\n        color,\n        opacity,\n        transform,\n        valueInterval,\n        valueDistance0,\n        valueDistance1,\n        valueDistance3,\n        valueDistance4,\n    },\n    borderRadius,\n    borderWidth,\n    medianWidth,\n    whiskerWidth,\n    whiskerEndSize,\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    setActiveItem,\n    tooltip,\n    isFocusable,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: BoxPlotItemProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const vertical = layout === 'vertical'\n    const bandwidth = vertical ? boxPlot.width : boxPlot.height\n\n    const renderTooltip = useMemo(() => () => createElement(tooltip, boxPlot), [tooltip, boxPlot])\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.(boxPlot, event)\n        },\n        [boxPlot, onClick]\n    )\n    const handleTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) => showTooltipFromEvent(renderTooltip(), event),\n        [showTooltipFromEvent, renderTooltip]\n    )\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(boxPlot, event)\n            showTooltipFromEvent(renderTooltip(), event)\n            setActiveItem(boxPlot)\n        },\n        [boxPlot, onMouseEnter, showTooltipFromEvent, renderTooltip, setActiveItem]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(boxPlot, event)\n            hideTooltip()\n            setActiveItem(null)\n        },\n        [boxPlot, hideTooltip, onMouseLeave, setActiveItem]\n    )\n    const handleBlur = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    return (\n        <animated.g\n            data-key={`boxplot.${boxPlot.key}`}\n            transform={transform}\n            opacity={opacity}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleTooltip : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            onBlur={isInteractive && isFocusable ? handleBlur : undefined}\n            focusable={isFocusable}\n            tabIndex={isFocusable ? 0 : undefined}\n            aria-label={ariaLabel ? ariaLabel(boxPlot) : undefined}\n            aria-labelledby={ariaLabelledBy ? ariaLabelledBy(boxPlot) : undefined}\n            aria-describedby={ariaDescribedBy ? ariaDescribedBy(boxPlot) : undefined}\n        >\n            <animated.rect\n                x={-bandwidth / 2}\n                y={vertical ? valueDistance3 : valueDistance1}\n                width={bandwidth}\n                height={valueInterval}\n                rx={borderRadius}\n                ry={borderRadius}\n                fill={boxPlot.fill ?? color}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n            />\n            <animated.line\n                x1={-bandwidth / 2}\n                x2={bandwidth / 2}\n                y1={0}\n                y2={0}\n                strokeWidth={medianWidth}\n                stroke={medianColor}\n            />\n            <BoxPlotItemWhisker\n                distStart={valueDistance1}\n                distEnd={valueDistance0}\n                whiskerEndSize={(whiskerEndSize * bandwidth) / 2}\n                whiskerColor={whiskerColor}\n                whiskerWidth={whiskerWidth}\n            />\n            <BoxPlotItemWhisker\n                distStart={valueDistance3}\n                distEnd={valueDistance4}\n                whiskerEndSize={(whiskerEndSize * bandwidth) / 2}\n                whiskerColor={whiskerColor}\n                whiskerWidth={whiskerWidth}\n            />\n        </animated.g>\n    )\n}\n","import { BoxPlotSummaryFormatted, BoxPlotTooltipProps, BoxPlotSummary } from './types'\nimport { Chip } from '@nivo/tooltip'\nimport { memo } from 'react'\nimport { useTheme, CompleteTheme } from '@nivo/core'\n\ninterface BoxPlotSummaryTooltipProps {\n    label: string\n    formatted: BoxPlotSummaryFormatted\n    color?: string\n    enableChip?: boolean\n}\n\ninterface Translation {\n    [key: string]: number | string\n}\n\nexport const defaultTranslation = {\n    n: 'n',\n    mean: 'mean',\n    min: 'min',\n    max: 'max',\n    Summary: 'Summary',\n    Quantiles: 'Quantiles',\n}\n\ntype ExtendedTheme = CompleteTheme & {\n    translation: Translation\n}\n\nconst hasTranslation = (theme: CompleteTheme | ExtendedTheme): theme is ExtendedTheme => {\n    return 'translation' in theme\n}\n\nexport const BoxPlotSummaryTooltip = memo<BoxPlotSummaryTooltipProps>(\n    ({ label, formatted, enableChip = false, color }) => {\n        const theme = useTheme()\n        let translation = defaultTranslation\n        if (hasTranslation(theme)) {\n            translation = {\n                ...defaultTranslation,\n                ...theme.translation,\n            }\n        }\n\n        const quantiles = formatted.quantiles.map((q, i) => (\n            <div key={'quantile.' + i}>\n                {q}%: <strong>{formatted.values[i]}</strong>\n            </div>\n        ))\n        return (\n            <div style={theme.tooltip.container}>\n                <div style={theme.tooltip.basic}>\n                    {enableChip && <Chip color={color ?? ''} style={theme.tooltip.chip} />}\n                    {label}\n                </div>\n                <div style={{ display: 'flex', marginTop: '1rem' }}>\n                    <div style={{ marginRight: '2rem' }}>\n                        <div>\n                            {translation.n}: <strong>{formatted.n}</strong>\n                        </div>\n                        <div style={{ marginTop: '1rem' }}>{translation.Summary}</div>\n                        <div>\n                            {translation.mean}: <strong>{formatted.mean}</strong>\n                        </div>\n                        <div>\n                            {translation.min}: <strong>{formatted.extrema[0]}</strong>\n                        </div>\n                        <div>\n                            {translation.max}: <strong>{formatted.extrema[1]}</strong>\n                        </div>\n                    </div>\n                    <div>\n                        <div>{translation.Quantiles}</div>\n                        {quantiles}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n)\n\nexport const BoxPlotTooltip = ({ color, label, formatted }: BoxPlotTooltipProps) => {\n    return (\n        <BoxPlotSummaryTooltip\n            label={label}\n            formatted={formatted}\n            enableChip={true}\n            color={color}\n        />\n    )\n}\n\nexport const BoxPlotTooltipLabel = (datum: BoxPlotSummary) => {\n    if (datum.subGroup) {\n        return datum.group + ' - ' + datum.subGroup\n    }\n    return datum.group\n}\n","import { BoxPlotItem } from './BoxPlotItem'\nimport { BoxPlotTooltip, BoxPlotTooltipLabel } from './BoxPlotTooltip'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { ScaleBandSpec, ScaleLinearSpec } from '@nivo/scales'\nimport { ComputedBoxPlotSummary } from './types'\n\nexport const defaultProps = {\n    value: 'value',\n    groupBy: 'group',\n    groups: null,\n    subGroupBy: null,\n    subGroups: null,\n\n    quantiles: [0.1, 0.25, 0.5, 0.75, 0.9],\n\n    layout: 'vertical' as const,\n\n    minValue: 'auto' as const,\n    maxValue: 'auto' as const,\n\n    valueScale: { type: 'linear' } as ScaleLinearSpec,\n    indexScale: { type: 'band', round: true } as ScaleBandSpec,\n\n    padding: 0.1,\n    innerPadding: 6,\n\n    opacity: 1,\n    activeOpacity: 1,\n    inactiveOpacity: 0.25,\n\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    valueFormat: (value: number) => value.toPrecision(4),\n\n    colorBy: 'subGroup' as const,\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color' } as InheritedColorConfig<ComputedBoxPlotSummary>,\n\n    medianWidth: 3,\n    medianColor: {\n        from: 'color',\n        modifiers: [['darker', 2.0]],\n    } as InheritedColorConfig<ComputedBoxPlotSummary>,\n\n    whiskerWidth: 2,\n    whiskerColor: {\n        from: 'color',\n    } as InheritedColorConfig<ComputedBoxPlotSummary>,\n    whiskerEndSize: 0,\n\n    isInteractive: true,\n    tooltip: BoxPlotTooltip,\n    tooltipLabel: BoxPlotTooltipLabel,\n\n    legends: [],\n    annotations: [],\n    markers: [],\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'boxPlots', 'markers', 'legends', 'annotations'],\n    boxPlotComponent: BoxPlotItem,\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n","import {\n    Scale,\n    ScaleBand,\n    computeScale,\n    ScaleBandSpec,\n    ScaleLinearSpec,\n    ScaleLogSpec,\n    ScaleSymlogSpec,\n    ScaleTimeSpec,\n} from '@nivo/scales'\nimport { BoxPlotSummary, ComputedBoxPlotSummary } from '../types'\nimport { getIndexScale } from './common'\n\ntype Params = {\n    data: BoxPlotSummary[]\n    formatValue: (value: number) => string\n    getTooltipLabel: (datum: BoxPlotSummary) => string\n    innerPadding: number\n    groups: string[]\n    subGroups: string[]\n    indexScale: ScaleBand<string>\n    valueScale: Scale<number, number>\n    bandwidth: number\n    layout: 'vertical' | 'horizontal'\n}\n\nconst generateComputedBoxPlotSummaries = ({\n    data,\n    getTooltipLabel,\n    innerPadding = 0,\n    groups,\n    indexScale,\n    valueScale,\n    formatValue,\n    bandwidth,\n    layout,\n}: Params): ComputedBoxPlotSummary[] => {\n    if (bandwidth === 0) {\n        return Array<ComputedBoxPlotSummary>()\n    }\n    const vertical = layout === 'vertical'\n    return data.map(datum => {\n        const { group, subGroup, groupIndex, subGroupIndex, values } = datum\n        const indexCoordinate =\n            (indexScale(groups[groupIndex]) ?? 0) +\n            bandwidth * subGroupIndex +\n            innerPadding * subGroupIndex\n        const key = `${groupIndex}.${subGroupIndex}`\n        const coords = values.map(valueScale).map(v => v ?? 0)\n        const intervals = [0, 1, 2, 3].map(i => Math.abs(coords[i + 1] - coords[i]) ?? 0)\n        // top-left of rectangle and width/height depend on the layout\n        // (this conditional inside the loop is not ideal, but typical loops will be short)\n        const position = vertical\n            ? {\n                  x: indexCoordinate,\n                  y: valueScale(datum.values[3]) ?? 0,\n                  width: bandwidth,\n                  height: intervals[1] + intervals[2],\n              }\n            : {\n                  x: valueScale(datum.values[1]) ?? 0,\n                  y: indexCoordinate,\n                  width: intervals[1] + intervals[2],\n                  height: bandwidth,\n              }\n        return {\n            key,\n            group,\n            subGroup,\n            data: datum,\n            formatted: {\n                n: String(datum.n),\n                mean: formatValue(datum.mean),\n                extrema: datum.extrema.map(formatValue),\n                values: datum.values.map(formatValue),\n                quantiles: datum.quantiles.map(v => String(100 * v)),\n            },\n            ...position,\n            coordinates: {\n                index: indexCoordinate,\n                values: values.map(v => valueScale(v) ?? 0),\n            },\n            bandwidth,\n            label: getTooltipLabel(datum),\n            layout,\n        } as ComputedBoxPlotSummary\n    })\n}\n\nexport const generateBoxPlots = ({\n    data,\n    layout,\n    groups,\n    subGroups,\n    formatValue,\n    minValue,\n    maxValue,\n    width,\n    height,\n    padding,\n    innerPadding,\n    valueScale: valueScaleConfig,\n    indexScale: indexScaleConfig,\n    getTooltipLabel,\n}: {\n    data: BoxPlotSummary[]\n    layout: string\n    groups: string[] | null\n    subGroups: string[] | null\n    formatValue: (value: number) => string\n    minValue: 'auto' | number\n    maxValue: 'auto' | number\n    width: number\n    height: number\n    padding: number\n    innerPadding: number\n    valueScale: ScaleLinearSpec | ScaleLogSpec | ScaleSymlogSpec | ScaleTimeSpec\n    indexScale: ScaleBandSpec\n    getTooltipLabel: (datum: BoxPlotSummary) => string\n}) => {\n    const [axis, otherAxis, size] =\n        layout === 'vertical' ? (['y', 'x', width] as const) : (['x', 'y', height] as const)\n    const indexScale = getIndexScale(groups ?? [], padding, indexScaleConfig, size, otherAxis)\n\n    const valueScaleSpec = {\n        max: maxValue,\n        min: minValue,\n        ...valueScaleConfig,\n    }\n\n    const values = data.map((datum: BoxPlotSummary) => datum.values).flat()\n    const min = values.reduce((acc: number, value: number) => Math.min(acc, value), Infinity)\n    const max = values.reduce((acc: number, value: number) => Math.max(acc, value), -Infinity)\n\n    const valueScale = computeScale(\n        valueScaleSpec as ScaleLinearSpec | ScaleLogSpec | ScaleSymlogSpec | ScaleTimeSpec,\n        { all: [min, max], min, max },\n        axis === 'x' ? width : height,\n        axis\n    )\n\n    const [xScale, yScale] =\n        layout === 'vertical' ? [indexScale, valueScale] : [valueScale, indexScale]\n\n    const nSubGroups = Math.max(1, subGroups ? subGroups.length : 1)\n    const bandwidth = (indexScale.bandwidth() - innerPadding * (nSubGroups - 1)) / nSubGroups\n\n    const params = {\n        data,\n        groups,\n        subGroups,\n        getTooltipLabel,\n        innerPadding,\n        indexScale,\n        valueScale,\n        formatValue,\n        bandwidth,\n        layout,\n    } as Params\n    const boxPlots = generateComputedBoxPlotSummaries(params)\n\n    return { xScale, yScale, boxPlots }\n}\n","import { ScaleBandSpec, ScaleBand, computeScale } from '@nivo/scales'\n\n/**\n * Generates indexed scale.\n */\nexport const getIndexScale = (\n    groups: string[],\n    padding: number,\n    indexScale: ScaleBandSpec,\n    size: number,\n    axis: 'x' | 'y'\n) => {\n    return (\n        computeScale(indexScale, { all: groups, min: 0, max: 0 }, size, axis) as ScaleBand<string>\n    ).padding(padding)\n}\n","import { BoxPlotDatum, BoxPlotCommonProps, BoxPlotSummary } from '../types'\nimport { defaultProps } from '../props'\n\n/** stratify an array of raw data objects into an array of arrays;\n * each array will create one box plot */\nexport const stratifyData = <RawDatum extends BoxPlotDatum>({\n    data,\n    groups = defaultProps.groups,\n    getGroup,\n    subGroups = defaultProps.subGroups,\n    getSubGroup,\n}: {\n    data: RawDatum[]\n    groups?: BoxPlotCommonProps<RawDatum>['groups']\n    getGroup: ((datum: RawDatum) => string) | null\n    subGroups?: BoxPlotCommonProps<RawDatum>['subGroups']\n    getSubGroup: ((datum: RawDatum) => string) | null\n}) => {\n    const groupsMap = {} as BoxPlotDatum\n    if (groups) {\n        groups.map((g, i) => (groupsMap[g] = i))\n    }\n    const subGroupsMap = {} as BoxPlotDatum\n    if (subGroups) {\n        subGroups.map((sg, i) => (subGroupsMap[sg] = i))\n    }\n\n    const nGroups = Math.max(1, groups ? groups.length : 1)\n    const nSubGroups = Math.max(1, subGroups ? subGroups.length : 1)\n    const n = nGroups * nSubGroups\n    const result = Array(n)\n        .fill([])\n        .map(() => Array<RawDatum>())\n    data.forEach((d: RawDatum) => {\n        const groupIndex = getGroup ? Number(groupsMap[getGroup(d)]) : 0\n        const subGroupIndex = getSubGroup ? Number(subGroupsMap[getSubGroup(d)] ?? 0) : 0\n        const index = groupIndex * nSubGroups + subGroupIndex\n        if (index >= 0) {\n            result[index].push(d)\n        }\n    })\n    return result\n}\n\nconst getQuantile = (values: number[], quantile = 0.5) => {\n    const realIndex = (values.length - 1) * Math.max(0, Math.min(1, quantile))\n    const intIndex = Math.floor(realIndex)\n    if (realIndex === intIndex) return values[intIndex]\n    const v1 = values[intIndex],\n        v2 = values[intIndex + 1]\n    return v1 + (v2 - v1) * (realIndex - intIndex)\n}\n\nconst getMean = (values: number[]) => {\n    const sum = values.reduce((acc, x) => acc + x, 0)\n    return sum / values.length\n}\n\nconst isPrecomputedDistribution = <RawDatum>(\n    datum: RawDatum | Omit<BoxPlotSummary, 'groupIndex' | 'subGroupIndex'>\n): datum is Omit<BoxPlotSummary, 'groupIndex' | 'subGroupIndex'> => {\n    const preComputedKeys = ['values', 'extrema', 'mean', 'quantiles', 'group', 'subGroup', 'n']\n    return preComputedKeys.every(k => k in (datum as object))\n}\n\nexport const summarizeDistribution = <RawDatum extends BoxPlotDatum>({\n    data,\n    getValue,\n    groups,\n    subGroups,\n    groupIndex,\n    subGroupIndex,\n    quantiles,\n}: {\n    data: RawDatum[]\n    getValue: (datum: RawDatum) => unknown\n    groups: string[] | null\n    subGroups: string[] | null\n    groupIndex: number\n    subGroupIndex: number\n    quantiles: number[]\n}) => {\n    // accept a precomputed summary representation if it has all the required keys\n    if (data.length === 1 && isPrecomputedDistribution(data[0])) {\n        return {\n            groupIndex: groupIndex,\n            subGroupIndex: subGroupIndex,\n            ...data[0],\n        } as BoxPlotSummary\n    }\n    // compute the summary representation from raw data using quantiles\n    const values = data.map(v => Number(getValue(v))) as number[]\n    values.sort((a, b) => a - b)\n    return {\n        group: groups ? groups[groupIndex] : '',\n        groupIndex: groupIndex,\n        subGroup: subGroups ? subGroups[subGroupIndex] : '',\n        subGroupIndex: subGroupIndex,\n        n: values.length,\n        extrema: [values[0], values[values.length - 1]],\n        quantiles: quantiles,\n        values: quantiles.map(q => getQuantile(values, q)),\n        mean: getMean(values),\n    } as BoxPlotSummary\n}\n","import { useMemo, useState } from 'react'\nimport { SpringConfig, useTransition } from '@react-spring/web'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { PropertyAccessor, usePropertyAccessor, useTheme, useValueFormatter } from '@nivo/core'\nimport {\n    BoxPlotCommonProps,\n    BoxPlotDatum,\n    BoxPlotItemProps,\n    BoxPlotSummary,\n    ComputedBoxPlotSummary,\n    DataProps,\n    LegendData,\n} from './types'\nimport { defaultProps } from './props'\nimport { generateBoxPlots, getLegendData, stratifyData, summarizeDistribution } from './compute'\nimport { LegendProps } from '@nivo/legends'\n\nexport const useLevels = <RawDatum extends BoxPlotDatum>(\n    levels: string[] | null,\n    data: RawDatum[],\n    by: PropertyAccessor<RawDatum, string> | null\n) => {\n    const getLevel = usePropertyAccessor(by ?? 'id')\n    if (levels) return levels\n    if (!by) return null\n    const result = new Set(data.map((d: RawDatum) => getLevel(d)))\n    return Array.from(result)\n}\n\nexport const useBoxPlot = <RawDatum extends BoxPlotDatum>({\n    data,\n    value,\n    groupBy,\n    groups = defaultProps.groups,\n    subGroupBy = defaultProps.subGroupBy,\n    subGroups = defaultProps.subGroups,\n    quantiles = defaultProps.quantiles,\n    width,\n    height,\n    layout,\n    minValue,\n    maxValue,\n    valueScale = defaultProps.valueScale,\n    indexScale = defaultProps.indexScale,\n    padding = defaultProps.padding,\n    innerPadding = defaultProps.innerPadding,\n    colorBy = defaultProps.colorBy,\n    colors = defaultProps.colors,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    borderColor,\n    medianColor,\n    whiskerColor,\n    legendLabel,\n    tooltipLabel,\n    valueFormat = defaultProps.valueFormat,\n    legends = defaultProps.legends,\n}: {\n    data: DataProps<RawDatum>['data']\n    width: number\n    height: number\n} & Pick<\n    BoxPlotCommonProps<RawDatum>,\n    | 'value'\n    | 'groupBy'\n    | 'groups'\n    | 'subGroupBy'\n    | 'subGroups'\n    | 'quantiles'\n    | 'layout'\n    | 'minValue'\n    | 'maxValue'\n    | 'valueScale'\n    | 'indexScale'\n    | 'padding'\n    | 'innerPadding'\n    | 'colorBy'\n    | 'colors'\n    | 'opacity'\n    | 'activeOpacity'\n    | 'inactiveOpacity'\n    | 'borderColor'\n    | 'medianColor'\n    | 'whiskerColor'\n    | 'legendLabel'\n    | 'tooltipLabel'\n    | 'valueFormat'\n    | 'legends'\n>) => {\n    // ensure that groups and subGroups are defined\n    groups = useLevels(groups, data, groupBy)\n    subGroups = useLevels(subGroups, data, subGroupBy)\n    const getGroup = usePropertyAccessor(groupBy ?? 'group')\n    const getSubGroup = usePropertyAccessor(subGroupBy ?? 'subGroup')\n    const getTooltipLabel = usePropertyAccessor(tooltipLabel)\n    const getValue = usePropertyAccessor(value)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale(colors, colorBy)\n    // trigger color fetch for all groups and subgroups\n    if (groups && colorBy === 'group') {\n        groups.map(group => getColor({ group } as BoxPlotSummary))\n    }\n    if (subGroups && colorBy === 'subGroup') {\n        subGroups.map(subGroup => getColor({ subGroup } as BoxPlotSummary))\n    }\n\n    const getBorderColor = useInheritedColor<ComputedBoxPlotSummary>(borderColor, theme)\n    const getMedianColor = useInheritedColor<ComputedBoxPlotSummary>(medianColor, theme)\n    const getWhiskerColor = useInheritedColor<ComputedBoxPlotSummary>(whiskerColor, theme)\n\n    // stratify long array with individual data points into arrays that will\n    // feed boxplot representations\n    const dataStratified = stratifyData({\n        data,\n        groups,\n        getGroup,\n        subGroups,\n        getSubGroup,\n    })\n\n    const nSubGroups = Math.max(1, subGroups ? subGroups.length : 1)\n    const dataSummary = useMemo(\n        () =>\n            dataStratified.map((stratum: RawDatum[], index) =>\n                summarizeDistribution({\n                    data: stratum,\n                    getValue,\n                    groups,\n                    subGroups,\n                    groupIndex: Math.floor(index / nSubGroups),\n                    subGroupIndex: index % nSubGroups,\n                    quantiles,\n                })\n            ),\n        [dataStratified, getValue, groups, subGroups, nSubGroups, quantiles]\n    )\n\n    const {\n        boxPlots: unStyledBoxPlots,\n        xScale,\n        yScale,\n    } = useMemo(\n        () =>\n            generateBoxPlots({\n                layout,\n                data: dataSummary.filter(stratum => stratum.n > 0),\n                groups,\n                subGroups,\n                formatValue,\n                minValue,\n                maxValue,\n                width,\n                height,\n                padding,\n                innerPadding,\n                valueScale,\n                indexScale,\n                getTooltipLabel,\n            }),\n        [\n            layout,\n            dataSummary,\n            groups,\n            subGroups,\n            formatValue,\n            minValue,\n            maxValue,\n            width,\n            height,\n            padding,\n            innerPadding,\n            valueScale,\n            indexScale,\n            getTooltipLabel,\n        ]\n    )\n\n    const [activeItem, setActiveItem] = useState<ComputedBoxPlotSummary | null>(null)\n    const activeKeys = useMemo(() => {\n        if (!activeItem) return []\n        const activeGroup = activeItem.group\n        const activeSubGroup = activeItem.subGroup\n        return unStyledBoxPlots\n            .filter(boxPlot => activeGroup === boxPlot.group || activeSubGroup === boxPlot.subGroup)\n            .map(boxPlot => boxPlot.key)\n    }, [unStyledBoxPlots, activeItem])\n\n    const boxPlots: ComputedBoxPlotSummary[] = useMemo(\n        () =>\n            unStyledBoxPlots.map(boxPlot => {\n                let computedOpacity = activeKeys.includes(boxPlot.key)\n                    ? activeOpacity\n                    : inactiveOpacity\n                if (!activeItem) {\n                    computedOpacity = opacity\n                }\n                return {\n                    ...boxPlot,\n                    color: getColor(boxPlot.data),\n                    opacity: computedOpacity,\n                }\n            }),\n        [\n            unStyledBoxPlots,\n            activeItem,\n            activeKeys,\n            opacity,\n            activeOpacity,\n            inactiveOpacity,\n            getColor,\n        ]\n    )\n\n    const legendsData: [LegendProps, LegendData[]][] = useMemo(\n        () =>\n            legends.map(legend => {\n                const data = getLegendData({\n                    boxPlots,\n                    dataFrom: colorBy,\n                    legendLabel,\n                })\n                return [legend, data]\n            }),\n        [legends, boxPlots, colorBy, legendLabel]\n    )\n\n    return {\n        boxPlots,\n        xScale,\n        yScale,\n        getTooltipLabel,\n        formatValue,\n        getColor,\n        getBorderColor,\n        getMedianColor,\n        getWhiskerColor,\n        legendsData,\n        activeItem,\n        setActiveItem,\n    }\n}\n\nexport const useBoxPlotTransition = ({\n    boxPlots,\n    getBorderColor,\n    getMedianColor,\n    getWhiskerColor,\n    animate,\n    springConfig,\n}: {\n    boxPlots: ComputedBoxPlotSummary[]\n    getBorderColor: (d: ComputedBoxPlotSummary) => string\n    getMedianColor: (d: ComputedBoxPlotSummary) => string\n    getWhiskerColor: (d: ComputedBoxPlotSummary) => string\n    animate: boolean\n    springConfig: SpringConfig\n}) => {\n    const getTransitionProps = (boxPlot: ComputedBoxPlotSummary) => ({\n        borderColor: getBorderColor(boxPlot) as string,\n        medianColor: getMedianColor(boxPlot) as string,\n        whiskerColor: getWhiskerColor(boxPlot) as string,\n        color: boxPlot.color,\n        opacity: boxPlot.opacity,\n        valueInterval: Math.abs(boxPlot.coordinates.values[3] - boxPlot.coordinates.values[1]),\n        valueDistance0: boxPlot.coordinates.values[0] - boxPlot.coordinates.values[2],\n        valueDistance1: boxPlot.coordinates.values[1] - boxPlot.coordinates.values[2],\n        valueDistance3: boxPlot.coordinates.values[3] - boxPlot.coordinates.values[2],\n        valueDistance4: boxPlot.coordinates.values[4] - boxPlot.coordinates.values[2],\n        // translate to the midpoint of the median line\n        transform:\n            boxPlot.layout === 'vertical'\n                ? `translate(${boxPlot.x + boxPlot.width / 2}, ${boxPlot.coordinates.values[2]})`\n                : `translate(${boxPlot.coordinates.values[2]}, ${\n                      boxPlot.y + boxPlot.height / 2\n                  }) rotate(-90)`,\n    })\n\n    return useTransition<ComputedBoxPlotSummary, BoxPlotItemProps<BoxPlotDatum>['animatedProps']>(\n        boxPlots,\n        {\n            keys: boxPlot => boxPlot.key,\n            initial: animate ? undefined : null, // required for ssr\n            from: boxPlot => ({\n                ...getTransitionProps(boxPlot),\n                valueInterval: 0,\n                valueDistance0: 0,\n                valueDistance1: 0,\n                valueDistance3: 0,\n                valueDistance4: 0,\n            }),\n            enter: boxPlot => ({ ...getTransitionProps(boxPlot) }),\n            update: boxPlot => ({ ...getTransitionProps(boxPlot) }),\n            leave: boxPlot => ({\n                ...getTransitionProps(boxPlot),\n                valueInterval: 0,\n                valueDistance0: 0,\n                valueDistance1: 0,\n                valueDistance3: 0,\n                valueDistance4: 0,\n            }),\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n}\n","import { BoxPlotDatum, BoxPlotCommonProps, ComputedBoxPlotSummary, LegendData } from '../types'\nimport { getPropertyAccessor } from '@nivo/core'\nimport uniqBy from 'lodash/uniqBy'\nimport sortBy from 'lodash/sortBy'\n\nexport const getLegendData = <RawDatum extends BoxPlotDatum>({\n    boxPlots,\n    dataFrom,\n    legendLabel,\n}: {\n    boxPlots: ComputedBoxPlotSummary[]\n    dataFrom: BoxPlotCommonProps<RawDatum>['colorBy']\n    legendLabel: BoxPlotCommonProps<RawDatum>['legendLabel']\n}) => {\n    const getLegendLabel = getPropertyAccessor(legendLabel ?? dataFrom)\n    const byGroup = dataFrom === 'group'\n    const legendData = boxPlots.map(\n        boxPlot =>\n            // id & label are redundant below, but needed for ts in @nivo/legends\n            ({\n                id: byGroup ? boxPlot.data.groupIndex : boxPlot.data.subGroupIndex,\n                label: getLegendLabel(boxPlot?.data),\n                color: boxPlot?.color,\n            } as LegendData)\n    )\n    // reduce to unique labels, then sort by id/index\n    // ensures correct ordering of legends even when certain group-subGroup combos are missing\n    return sortBy(\n        uniqBy(legendData, ({ label }) => label),\n        ({ id }) => id\n    )\n}\n","import { Fragment, ReactNode, createElement, useMemo } from 'react'\nimport { Axes, Grid } from '@nivo/axes'\nimport {\n    CartesianMarkers,\n    Container,\n    SvgWrapper,\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    useMotionConfig,\n} from '@nivo/core'\nimport { BoxPlotAnnotations } from './BoxPlotAnnotations'\nimport { BoxPlotLegends } from './BoxPlotLegends'\nimport {\n    BoxPlotCustomLayerProps,\n    BoxPlotDatum,\n    BoxPlotLayer,\n    BoxPlotLayerId,\n    BoxPlotSvgProps,\n} from './types'\nimport { svgDefaultProps } from './props'\nimport { useBoxPlot, useBoxPlotTransition } from './hooks'\n\ntype InnerBoxPlotProps<RawDatum extends BoxPlotDatum> = Omit<\n    BoxPlotSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBoxPlot = <RawDatum extends BoxPlotDatum>({\n    data,\n    value = svgDefaultProps.value,\n    groupBy = svgDefaultProps.groupBy,\n    groups = svgDefaultProps.groups,\n    subGroupBy = svgDefaultProps.subGroupBy,\n    subGroups = svgDefaultProps.subGroups,\n    quantiles = svgDefaultProps.quantiles,\n\n    margin: partialMargin,\n    width,\n    height,\n\n    layout = svgDefaultProps.layout,\n    minValue = svgDefaultProps.minValue,\n    maxValue = svgDefaultProps.maxValue,\n\n    valueScale = svgDefaultProps.valueScale,\n    indexScale = svgDefaultProps.indexScale,\n\n    padding = svgDefaultProps.padding,\n    innerPadding = svgDefaultProps.innerPadding,\n\n    opacity = svgDefaultProps.opacity,\n    activeOpacity = svgDefaultProps.activeOpacity,\n    inactiveOpacity = svgDefaultProps.inactiveOpacity,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n\n    layers = svgDefaultProps.layers as BoxPlotLayer<RawDatum>[],\n    boxPlotComponent = svgDefaultProps.boxPlotComponent,\n\n    colorBy = svgDefaultProps.colorBy,\n    colors = svgDefaultProps.colors,\n    defs = svgDefaultProps.defs,\n    fill,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor,\n    medianWidth = svgDefaultProps.medianWidth,\n    medianColor = svgDefaultProps.medianColor,\n    whiskerWidth = svgDefaultProps.whiskerWidth,\n    whiskerColor = svgDefaultProps.whiskerColor,\n    whiskerEndSize = svgDefaultProps.whiskerEndSize,\n\n    markers = svgDefaultProps.markers,\n\n    legendLabel,\n    tooltipLabel = svgDefaultProps.tooltipLabel,\n\n    valueFormat,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n\n    annotations = svgDefaultProps.annotations,\n    legends = svgDefaultProps.legends,\n\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    isFocusable = svgDefaultProps.isFocusable,\n    boxPlotAriaLabel,\n    boxPlotAriaLabelledBy,\n    boxPlotAriaDescribedBy,\n}: InnerBoxPlotProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        boxPlots,\n        xScale,\n        yScale,\n        getTooltipLabel,\n        getBorderColor,\n        getMedianColor,\n        getWhiskerColor,\n        legendsData,\n        activeItem,\n        setActiveItem,\n    } = useBoxPlot<RawDatum>({\n        data,\n        value,\n        groupBy,\n        groups,\n        subGroupBy,\n        subGroups,\n        quantiles,\n        width: innerWidth,\n        height: innerHeight,\n        layout,\n        minValue,\n        maxValue,\n        valueScale,\n        indexScale,\n        padding,\n        innerPadding,\n        colorBy,\n        colors,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        borderColor,\n        medianColor,\n        whiskerColor,\n        legendLabel,\n        tooltipLabel,\n        valueFormat,\n        legends,\n    })\n\n    const transition = useBoxPlotTransition({\n        boxPlots,\n        getBorderColor,\n        getMedianColor,\n        getWhiskerColor,\n        animate,\n        springConfig,\n    })\n\n    const commonProps = useMemo(\n        () => ({\n            borderRadius,\n            borderWidth,\n            medianWidth,\n            whiskerWidth,\n            whiskerEndSize,\n            padding,\n            innerPadding,\n            isInteractive,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            getTooltipLabel,\n            tooltip,\n            isFocusable,\n            ariaLabel: boxPlotAriaLabel,\n            ariaLabelledBy: boxPlotAriaLabelledBy,\n            ariaDescribedBy: boxPlotAriaDescribedBy,\n            activeItem,\n            setActiveItem,\n        }),\n        [\n            borderRadius,\n            borderWidth,\n            medianWidth,\n            whiskerWidth,\n            whiskerEndSize,\n            padding,\n            innerPadding,\n            isInteractive,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            getTooltipLabel,\n            isFocusable,\n            boxPlotAriaLabel,\n            boxPlotAriaLabelledBy,\n            boxPlotAriaDescribedBy,\n            activeItem,\n            setActiveItem,\n        ]\n    )\n\n    const boundDefs = bindDefs(defs, boxPlots, fill, {\n        dataKey: 'data',\n        targetKey: 'fill',\n    })\n\n    const layerById: Record<BoxPlotLayerId, ReactNode> = {\n        annotations: null,\n        axes: null,\n        boxPlots: null,\n        grid: null,\n        legends: null,\n        markers: null,\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <BoxPlotAnnotations key=\"annotations\" boxPlots={boxPlots} annotations={annotations} />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('boxPlots')) {\n        layerById.boxPlots = (\n            <Fragment key=\"boxPlots\">\n                {transition((animatedProps, boxPlot) =>\n                    createElement(boxPlotComponent, {\n                        ...commonProps,\n                        boxPlot,\n                        layout,\n                        animatedProps,\n                    })\n                )}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <BoxPlotLegends\n                key=\"legends\"\n                width={innerWidth}\n                height={innerHeight}\n                legends={legendsData}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<number | string, number>\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (v: number | string) => number}\n                yScale={yScale as (v: number) => number}\n            />\n        )\n    }\n\n    const layerContext: BoxPlotCustomLayerProps<RawDatum> = useMemo(\n        () => ({\n            ...commonProps,\n            layout,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            padding,\n            innerPadding,\n            boxPlots,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            getTooltipLabel,\n            xScale,\n            yScale,\n        }),\n        [\n            commonProps,\n            layout,\n            margin,\n            width,\n            height,\n            innerWidth,\n            innerHeight,\n            padding,\n            innerPadding,\n            boxPlots,\n            onClick,\n            onMouseEnter,\n            onMouseLeave,\n            tooltip,\n            getTooltipLabel,\n            xScale,\n            yScale,\n        ]\n    )\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n            isFocusable={isFocusable}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const BoxPlot = <RawDatum extends BoxPlotDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BoxPlotSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBoxPlot<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { BoxPlot } from './BoxPlot'\nimport { BoxPlotDatum, BoxPlotSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveBoxPlot = <RawDatum extends BoxPlotDatum>(\n    props: Omit<BoxPlotSvgProps<RawDatum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <BoxPlot<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["getPosition","boxPlot","x","width","y","height","getDimensions","_ref","size","Math","max","BoxPlotAnnotations","_ref2","boxPlots","annotations","boundAnnotations","useAnnotations","data","_jsx","_Fragment","children","map","annotation","i","Annotation","_extends","BoxPlotLegends","legends","_legend$data","legend","jsx","BoxLegendSvg","containerWidth","containerHeight","BoxPlotItemWhisker","distStart","distEnd","whiskerEndSize","whiskerColor","whiskerWidth","_jsxs","animated","line","x1","x2","y1","y2","strokeWidth","stroke","BoxPlotItem","_boxPlot$fill","layout","_ref2$animatedProps","animatedProps","borderColor","medianColor","color","opacity","transform","valueInterval","valueDistance0","valueDistance1","valueDistance3","valueDistance4","borderRadius","borderWidth","medianWidth","isInteractive","onClick","onMouseEnter","onMouseLeave","setActiveItem","tooltip","isFocusable","ariaLabel","ariaLabelledBy","ariaDescribedBy","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","vertical","bandwidth","renderTooltip","useMemo","createElement","handleClick","useCallback","event","handleTooltip","handleMouseEnter","handleMouseLeave","handleBlur","jsxs","g","key","undefined","onMouseMove","onBlur","focusable","tabIndex","rect","rx","ry","fill","defaultTranslation","n","mean","min","Summary","Quantiles","BoxPlotSummaryTooltip","memo","label","formatted","_ref$enableChip","enableChip","theme","useTheme","translation","hasTranslation","quantiles","q","values","style","container","basic","Chip","chip","display","marginTop","marginRight","extrema","defaultProps","value","groupBy","groups","subGroupBy","subGroups","minValue","maxValue","valueScale","type","indexScale","round","padding","innerPadding","activeOpacity","inactiveOpacity","axisBottom","axisLeft","enableGridX","enableGridY","valueFormat","toPrecision","colorBy","colors","scheme","from","modifiers","tooltipLabel","datum","subGroup","group","markers","svgDefaultProps","layers","boxPlotComponent","defs","animate","motionConfig","role","generateBoxPlots","formatValue","valueScaleConfig","indexScaleConfig","getTooltipLabel","_ref3","axis","computeScale","all","getIndexScale","valueScaleSpec","flat","reduce","acc","Infinity","_ref4","xScale","yScale","nSubGroups","length","_ref$innerPadding","Array","_indexScale","_valueScale","_valueScale2","groupIndex","subGroupIndex","indexCoordinate","coords","v","intervals","_Math$abs","abs","position","String","coordinates","index","_valueScale3","generateComputedBoxPlotSummaries","getMean","summarizeDistribution","getValue","every","k","Number","sort","a","b","quantile","realIndex","intIndex","floor","v1","getQuantile","useLevels","levels","by","getLevel","usePropertyAccessor","result","Set","d","useBoxPlot","_ref$groups","_ref$subGroupBy","_ref$subGroups","_ref$quantiles","_ref$valueScale","_ref$indexScale","_ref$padding","_ref$colorBy","_ref$colors","legendLabel","_ref$valueFormat","_ref$legends","getGroup","getSubGroup","useValueFormatter","getColor","useOrdinalColorScale","getBorderColor","useInheritedColor","getMedianColor","getWhiskerColor","dataStratified","groupsMap","subGroupsMap","sg","nGroups","forEach","_subGroupsMap$getSubG","push","stratifyData","dataSummary","stratum","_useMemo","filter","unStyledBoxPlots","_useState","useState","activeItem","activeKeys","activeGroup","activeSubGroup","computedOpacity","includes","legendsData","dataFrom","getLegendLabel","getPropertyAccessor","byGroup","legendData","id","sortBy","uniqBy","getLegendData","InnerBoxPlot","_ref$value","_ref$groupBy","partialMargin","margin","_ref$layout","_ref$minValue","_ref$maxValue","_ref$opacity","_ref$activeOpacity","_ref$inactiveOpacity","axisTop","axisRight","_ref$axisBottom","_ref$axisLeft","_ref$enableGridX","_ref$enableGridY","gridXValues","gridYValues","_ref$layers","_ref$boxPlotComponent","_ref$defs","_ref$borderRadius","_ref$borderWidth","_ref$borderColor","_ref$medianWidth","_ref$medianColor","_ref$whiskerWidth","_ref$whiskerColor","_ref$whiskerEndSize","_ref$markers","_ref$tooltipLabel","_ref$isInteractive","_ref$tooltip","_ref$annotations","_ref$role","_ref$isFocusable","boxPlotAriaLabel","boxPlotAriaLabelledBy","boxPlotAriaDescribedBy","_useMotionConfig","useMotionConfig","springConfig","config","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","_useBoxPlot","transition","getTransitionProps","useTransition","keys","initial","enter","update","leave","immediate","useBoxPlotTransition","commonProps","boundDefs","bindDefs","dataKey","targetKey","layerById","axes","grid","Axes","top","right","bottom","left","Fragment","Grid","xValues","yValues","CartesianMarkers","layerContext","SvgWrapper","layer","_layerById$layer","BoxPlot","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","props","ResponsiveWrapper"],"mappings":"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"}