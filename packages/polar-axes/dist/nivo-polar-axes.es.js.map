{"version":3,"file":"nivo-polar-axes.es.js","sources":["../src/CircularAxisTick.tsx","../src/CircularAxis.tsx","../src/RadialGrid.tsx","../src/CircularGrid.tsx","../src/PolarGrid.tsx","../src/RadialAxisTick.tsx","../src/RadialAxis.tsx"],"sourcesContent":["import { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { CircularAxisTickProps } from './types'\n\nexport const CircularAxisTick = ({ label, animated: animatedProps }: CircularAxisTickProps) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g opacity={animatedProps.opacity}>\n            <animated.line\n                x1={animatedProps.x1}\n                y1={animatedProps.y1}\n                x2={animatedProps.x2}\n                y2={animatedProps.y2}\n                style={theme.axis.ticks.line}\n            />\n            <animated.text\n                dx={animatedProps.textX}\n                dy={animatedProps.textY}\n                dominantBaseline=\"central\"\n                style={theme.axis.ticks.text}\n                textAnchor=\"middle\"\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { createElement, SVGProps, useMemo } from 'react'\nimport { useSpring, useTransition } from '@react-spring/web'\nimport { useMotionConfig, useTheme, positionFromAngle, degreesToRadians } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\nimport { ArcLine } from '@nivo/arcs'\nimport { CircularAxisConfig, CircularAxisTickAnimatedProps } from './types'\nimport { CircularAxisTick } from './CircularAxisTick'\n\ntype CircularAxisProps = {\n    type: 'inner' | 'outer'\n    center?: [number, number]\n    radius: number\n    startAngle: number\n    endAngle: number\n    scale: AnyScale\n} & CircularAxisConfig\n\nconst getLinePositions = (angle: number, innerRadius: number, outerRadius: number) => {\n    const start = positionFromAngle(degreesToRadians(angle), innerRadius)\n    const end = positionFromAngle(degreesToRadians(angle), outerRadius)\n\n    return {\n        x1: start.x,\n        y1: start.y,\n        x2: end.x,\n        y2: end.y,\n    }\n}\n\nconst getTextPosition = (angle: number, radius: number) => {\n    const position = positionFromAngle(degreesToRadians(angle), radius)\n\n    return {\n        textX: position.x,\n        textY: position.y,\n    }\n}\n\nexport const CircularAxis = ({\n    type,\n    center = [0, 0],\n    radius,\n    startAngle: originalStartAngle,\n    endAngle: originalEndAngle,\n    scale,\n    tickSize = 5,\n    tickPadding = 12,\n    tickComponent = CircularAxisTick,\n}: CircularAxisProps) => {\n    const startAngle = originalStartAngle - 90\n    const endAngle = originalEndAngle - 90\n\n    const theme = useTheme()\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const spring = useSpring<{\n        radius: number\n        startAngle: number\n        endAngle: number\n        opacity: number\n    }>({\n        radius,\n        startAngle,\n        endAngle,\n        opacity: 1,\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    const ticks = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((value, index) => ({\n            key: index,\n            label: value,\n            angle: scale(value) - 90,\n        }))\n    }, [scale])\n\n    const outerRadius = type === 'inner' ? radius - tickSize : radius + tickSize\n    const textRadius = type === 'inner' ? outerRadius - tickPadding : outerRadius + tickPadding\n\n    const transition = useTransition<(typeof ticks)[0], CircularAxisTickAnimatedProps>(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        from: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 0,\n        }),\n        enter: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        update: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        leave: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 0,\n        }),\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    return (\n        <g transform={`translate(${center[0]}, ${center[1]})`}>\n            <ArcLine\n                animated={spring}\n                {...(theme.axis.domain.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n                fill=\"none\"\n            />\n            {transition((animatedProps, tick) =>\n                createElement(tickComponent, {\n                    key: tick.key,\n                    label: tick.label,\n                    animated: animatedProps,\n                })\n            )}\n        </g>\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { useTransition, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\n\ninterface PolarGridProps {\n    scale: AnyScale\n    ticks?: number | number[]\n    innerRadius: number\n    outerRadius: number\n}\n\nexport const RadialGrid = ({ scale, innerRadius, outerRadius }: PolarGridProps) => {\n    const theme = useTheme()\n\n    const angles = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((angleValue, index) => ({\n            id: index,\n            angle: scale(angleValue) - 90,\n        }))\n    }, [scale])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        { id: number; angle: number },\n        { angle: number; opacity: number }\n    >(angles, {\n        keys: item => item.id,\n        initial: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        from: item => ({\n            angle: item.angle,\n            opacity: 0,\n        }),\n        enter: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        update: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        leave: item => ({\n            angle: item.angle,\n            opacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, angle) => (\n                <animated.g\n                    key={angle.id}\n                    transform={style.angle.to(v => `rotate(${v})`)}\n                    opacity={style.opacity}\n                >\n                    <line\n                        x1={innerRadius}\n                        x2={outerRadius}\n                        {...(theme.grid.line as SVGProps<SVGLineElement>)}\n                    />\n                </animated.g>\n            ))}\n        </>\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\nimport { ArcLine } from '@nivo/arcs'\n\ninterface CircularGridProps {\n    scale: AnyScale\n    startAngle: number\n    endAngle: number\n}\n\nexport const CircularGrid = ({\n    scale,\n    startAngle: originalStartAngle,\n    endAngle: originalEndAngle,\n}: CircularGridProps) => {\n    const theme = useTheme()\n\n    const startAngle = originalStartAngle - 90\n    const endAngle = originalEndAngle - 90\n\n    const radii = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((value, index) => {\n            let radius = scale(value) as number\n            if ('bandwidth' in scale) {\n                radius += scale.bandwidth() / 2\n            }\n\n            return {\n                id: index,\n                radius,\n            }\n        })\n    }, [scale])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        { id: number; radius: number },\n        { radius: number; startAngle: number; endAngle: number; opacity: number }\n    >(radii, {\n        keys: item => item.id,\n        initial: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        from: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 0,\n        }),\n        enter: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        update: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        leave: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, item) => (\n                <ArcLine\n                    key={item.id}\n                    animated={style}\n                    {...(theme.grid.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n                    strokeOpacity={style.opacity}\n                    fill=\"none\"\n                />\n            ))}\n        </>\n    )\n}\n","import { AnyScale } from '@nivo/scales'\nimport { RadialGrid } from './RadialGrid'\nimport { CircularGrid } from './CircularGrid'\n\ninterface PolarGridProps {\n    center: [number, number]\n    enableRadialGrid: boolean\n    enableCircularGrid: boolean\n    angleScale: AnyScale\n    radiusScale: AnyScale\n    startAngle: number\n    endAngle: number\n}\n\nexport const PolarGrid = ({\n    center,\n    enableRadialGrid,\n    enableCircularGrid,\n    angleScale,\n    radiusScale,\n    startAngle,\n    endAngle,\n}: PolarGridProps) => {\n    const innerRadius = Math.min(...radiusScale.range())\n    const outerRadius = Math.max(...radiusScale.range())\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {enableRadialGrid && (\n                <RadialGrid\n                    scale={angleScale}\n                    innerRadius={innerRadius}\n                    outerRadius={outerRadius}\n                />\n            )}\n            {enableCircularGrid && (\n                <CircularGrid scale={radiusScale} startAngle={startAngle} endAngle={endAngle} />\n            )}\n        </g>\n    )\n}\n","import { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { RadialAxisTickProps } from './types'\n\nexport const RadialAxisTick = ({\n    label,\n    textAnchor,\n    animated: animatedProps,\n}: RadialAxisTickProps) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g\n            opacity={animatedProps.opacity}\n            transform={to(\n                [animatedProps.y, animatedProps.rotation],\n                (y, rotation) => `translate(${y}, 0) rotate(${rotation})`\n            )}\n        >\n            <animated.line x2={animatedProps.length} style={theme.axis.ticks.line} />\n            <animated.text\n                dx={animatedProps.textX}\n                textAnchor={textAnchor}\n                dominantBaseline=\"central\"\n                style={theme.axis.ticks.text}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { createElement, useMemo } from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useMotionConfig, normalizeAngle } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\nimport { RadialAxisConfig, RadialAxisTickAnimatedProps } from './types'\nimport { RadialAxisTick } from './RadialAxisTick'\n\ntype RadialAxisProps = {\n    type: 'start' | 'end'\n    center: [number, number]\n    angle: number\n    scale: AnyScale\n} & RadialAxisConfig\n\nexport const RadialAxis = ({\n    type,\n    center,\n    angle: rawAngle,\n    scale,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation: extraRotation = 0,\n    tickComponent = RadialAxisTick,\n}: RadialAxisProps) => {\n    const angle = normalizeAngle(rawAngle)\n\n    let textAnchor: 'start' | 'end'\n    let lineX: number\n    let textX: number\n    let tickRotation: number\n\n    if (type === 'start') {\n        tickRotation = 90 + extraRotation\n        if (angle <= 90) {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n        } else if (angle < 270) {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n            tickRotation -= 180\n        } else {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n        }\n    } else {\n        tickRotation = 90 + extraRotation\n        if (angle < 90) {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n        } else if (angle < 270) {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n            tickRotation -= 180\n        } else {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n        }\n    }\n\n    const ticks = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((value, index) => {\n            let position = scale(value) as number\n            if ('bandwidth' in scale) {\n                position += scale.bandwidth() / 2\n            }\n\n            return {\n                key: index,\n                label: value,\n                position,\n            }\n        })\n    }, [scale])\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const spring = useSpring<{ rotation: string }>({\n        rotation: rawAngle - 90,\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    const transition = useTransition<(typeof ticks)[0], RadialAxisTickAnimatedProps>(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        from: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 0,\n        }),\n        enter: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        update: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        leave: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 0,\n        }),\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    return (\n        <g transform={`translate(${center[0]}, ${center[1]})`}>\n            <animated.g transform={spring.rotation.to(value => `rotate(${value})`)}>\n                {transition((animatedProps, tick) =>\n                    createElement(tickComponent, {\n                        key: tick.key,\n                        label: tick.label,\n                        y: tick.position,\n                        textX,\n                        rotation: tickRotation,\n                        length: lineX,\n                        textAnchor,\n                        animated: animatedProps,\n                    })\n                )}\n            </animated.g>\n        </g>\n    )\n}\n"],"names":["CircularAxisTick","_ref","label","animatedProps","animated","theme","useTheme","_jsxs","g","opacity","children","_jsx","line","x1","y1","x2","y2","style","axis","ticks","text","dx","textX","dy","textY","dominantBaseline","textAnchor","getLinePositions","angle","innerRadius","outerRadius","start","positionFromAngle","degreesToRadians","end","x","y","getTextPosition","radius","position","CircularAxis","type","_ref$center","center","originalStartAngle","startAngle","originalEndAngle","endAngle","scale","_ref$tickSize","tickSize","_ref$tickPadding","tickPadding","_ref$tickComponent","tickComponent","_useMotionConfig","useMotionConfig","animate","springConfig","config","spring","useSpring","immediate","useMemo","getScaleTicks","map","value","index","key","textRadius","transition","useTransition","keys","tick","initial","_extends","from","enter","update","leave","transform","ArcLine","domain","fill","createElement","RadialGrid","angles","angleValue","id","item","_Fragment","to","v","grid","CircularGrid","radii","bandwidth","strokeOpacity","PolarGrid","enableRadialGrid","enableCircularGrid","angleScale","radiusScale","Math","min","apply","range","max","RadialAxisTick","rotation","length","RadialAxis","lineX","tickRotation","rawAngle","_ref$tickRotation","extraRotation","normalizeAngle"],"mappings":"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"}