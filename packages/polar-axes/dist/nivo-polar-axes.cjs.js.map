{"version":3,"file":"nivo-polar-axes.cjs.js","sources":["../src/CircularAxisTick.tsx","../src/CircularAxis.tsx","../src/RadialGrid.tsx","../src/CircularGrid.tsx","../src/RadialAxisTick.tsx","../src/PolarGrid.tsx","../src/RadialAxis.tsx"],"sourcesContent":["import { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { CircularAxisTickProps } from './types'\n\nexport const CircularAxisTick = ({ label, animated: animatedProps }: CircularAxisTickProps) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g opacity={animatedProps.opacity}>\n            <animated.line\n                x1={animatedProps.x1}\n                y1={animatedProps.y1}\n                x2={animatedProps.x2}\n                y2={animatedProps.y2}\n                style={theme.axis.ticks.line}\n            />\n            <animated.text\n                dx={animatedProps.textX}\n                dy={animatedProps.textY}\n                dominantBaseline=\"central\"\n                style={theme.axis.ticks.text}\n                textAnchor=\"middle\"\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { createElement, SVGProps, useMemo } from 'react'\nimport { useSpring, useTransition } from '@react-spring/web'\nimport { useMotionConfig, useTheme, positionFromAngle, degreesToRadians } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\nimport { ArcLine } from '@nivo/arcs'\nimport { CircularAxisConfig, CircularAxisTickAnimatedProps } from './types'\nimport { CircularAxisTick } from './CircularAxisTick'\n\ntype CircularAxisProps = {\n    type: 'inner' | 'outer'\n    center?: [number, number]\n    radius: number\n    startAngle: number\n    endAngle: number\n    scale: AnyScale\n} & CircularAxisConfig\n\nconst getLinePositions = (angle: number, innerRadius: number, outerRadius: number) => {\n    const start = positionFromAngle(degreesToRadians(angle), innerRadius)\n    const end = positionFromAngle(degreesToRadians(angle), outerRadius)\n\n    return {\n        x1: start.x,\n        y1: start.y,\n        x2: end.x,\n        y2: end.y,\n    }\n}\n\nconst getTextPosition = (angle: number, radius: number) => {\n    const position = positionFromAngle(degreesToRadians(angle), radius)\n\n    return {\n        textX: position.x,\n        textY: position.y,\n    }\n}\n\nexport const CircularAxis = ({\n    type,\n    center = [0, 0],\n    radius,\n    startAngle: originalStartAngle,\n    endAngle: originalEndAngle,\n    scale,\n    tickSize = 5,\n    tickPadding = 12,\n    tickComponent = CircularAxisTick,\n}: CircularAxisProps) => {\n    const startAngle = originalStartAngle - 90\n    const endAngle = originalEndAngle - 90\n\n    const theme = useTheme()\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const spring = useSpring<{\n        radius: number\n        startAngle: number\n        endAngle: number\n        opacity: number\n    }>({\n        radius,\n        startAngle,\n        endAngle,\n        opacity: 1,\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    const ticks = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((value, index) => ({\n            key: index,\n            label: value,\n            angle: scale(value) - 90,\n        }))\n    }, [scale])\n\n    const outerRadius = type === 'inner' ? radius - tickSize : radius + tickSize\n    const textRadius = type === 'inner' ? outerRadius - tickPadding : outerRadius + tickPadding\n\n    const transition = useTransition<(typeof ticks)[0], CircularAxisTickAnimatedProps>(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        from: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 0,\n        }),\n        enter: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        update: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 1,\n        }),\n        leave: tick => ({\n            ...getLinePositions(tick.angle, radius, outerRadius),\n            ...getTextPosition(tick.angle, textRadius),\n            opacity: 0,\n        }),\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    return (\n        <g transform={`translate(${center[0]}, ${center[1]})`}>\n            <ArcLine\n                animated={spring}\n                {...(theme.axis.domain.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n                fill=\"none\"\n            />\n            {transition((animatedProps, tick) =>\n                createElement(tickComponent, {\n                    key: tick.key,\n                    label: tick.label,\n                    animated: animatedProps,\n                })\n            )}\n        </g>\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { useTransition, animated } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\n\ninterface PolarGridProps {\n    scale: AnyScale\n    ticks?: number | number[]\n    innerRadius: number\n    outerRadius: number\n}\n\nexport const RadialGrid = ({ scale, innerRadius, outerRadius }: PolarGridProps) => {\n    const theme = useTheme()\n\n    const angles = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((angleValue, index) => ({\n            id: index,\n            angle: scale(angleValue) - 90,\n        }))\n    }, [scale])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        { id: number; angle: number },\n        { angle: number; opacity: number }\n    >(angles, {\n        keys: item => item.id,\n        initial: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        from: item => ({\n            angle: item.angle,\n            opacity: 0,\n        }),\n        enter: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        update: item => ({\n            angle: item.angle,\n            opacity: 1,\n        }),\n        leave: item => ({\n            angle: item.angle,\n            opacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, angle) => (\n                <animated.g\n                    key={angle.id}\n                    transform={style.angle.to(v => `rotate(${v})`)}\n                    opacity={style.opacity}\n                >\n                    <line\n                        x1={innerRadius}\n                        x2={outerRadius}\n                        {...(theme.grid.line as SVGProps<SVGLineElement>)}\n                    />\n                </animated.g>\n            ))}\n        </>\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\nimport { ArcLine } from '@nivo/arcs'\n\ninterface CircularGridProps {\n    scale: AnyScale\n    startAngle: number\n    endAngle: number\n}\n\nexport const CircularGrid = ({\n    scale,\n    startAngle: originalStartAngle,\n    endAngle: originalEndAngle,\n}: CircularGridProps) => {\n    const theme = useTheme()\n\n    const startAngle = originalStartAngle - 90\n    const endAngle = originalEndAngle - 90\n\n    const radii = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((value, index) => {\n            let radius = scale(value) as number\n            if ('bandwidth' in scale) {\n                radius += scale.bandwidth() / 2\n            }\n\n            return {\n                id: index,\n                radius,\n            }\n        })\n    }, [scale])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        { id: number; radius: number },\n        { radius: number; startAngle: number; endAngle: number; opacity: number }\n    >(radii, {\n        keys: item => item.id,\n        initial: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        from: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 0,\n        }),\n        enter: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        update: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 1,\n        }),\n        leave: item => ({\n            radius: item.radius,\n            startAngle,\n            endAngle,\n            opacity: 0,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, item) => (\n                <ArcLine\n                    key={item.id}\n                    animated={style}\n                    {...(theme.grid.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n                    strokeOpacity={style.opacity}\n                    fill=\"none\"\n                />\n            ))}\n        </>\n    )\n}\n","import { animated, to } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { RadialAxisTickProps } from './types'\n\nexport const RadialAxisTick = ({\n    label,\n    textAnchor,\n    animated: animatedProps,\n}: RadialAxisTickProps) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g\n            opacity={animatedProps.opacity}\n            transform={to(\n                [animatedProps.y, animatedProps.rotation],\n                (y, rotation) => `translate(${y}, 0) rotate(${rotation})`\n            )}\n        >\n            <animated.line x2={animatedProps.length} style={theme.axis.ticks.line} />\n            <animated.text\n                dx={animatedProps.textX}\n                textAnchor={textAnchor}\n                dominantBaseline=\"central\"\n                style={theme.axis.ticks.text}\n            >\n                {label}\n            </animated.text>\n        </animated.g>\n    )\n}\n","import { AnyScale } from '@nivo/scales'\nimport { RadialGrid } from './RadialGrid'\nimport { CircularGrid } from './CircularGrid'\n\ninterface PolarGridProps {\n    center: [number, number]\n    enableRadialGrid: boolean\n    enableCircularGrid: boolean\n    angleScale: AnyScale\n    radiusScale: AnyScale\n    startAngle: number\n    endAngle: number\n}\n\nexport const PolarGrid = ({\n    center,\n    enableRadialGrid,\n    enableCircularGrid,\n    angleScale,\n    radiusScale,\n    startAngle,\n    endAngle,\n}: PolarGridProps) => {\n    const innerRadius = Math.min(...radiusScale.range())\n    const outerRadius = Math.max(...radiusScale.range())\n\n    return (\n        <g transform={`translate(${center[0]},${center[1]})`}>\n            {enableRadialGrid && (\n                <RadialGrid\n                    scale={angleScale}\n                    innerRadius={innerRadius}\n                    outerRadius={outerRadius}\n                />\n            )}\n            {enableCircularGrid && (\n                <CircularGrid scale={radiusScale} startAngle={startAngle} endAngle={endAngle} />\n            )}\n        </g>\n    )\n}\n","import { createElement, useMemo } from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useMotionConfig, normalizeAngle } from '@nivo/core'\nimport { AnyScale, getScaleTicks } from '@nivo/scales'\nimport { RadialAxisConfig, RadialAxisTickAnimatedProps } from './types'\nimport { RadialAxisTick } from './RadialAxisTick'\n\ntype RadialAxisProps = {\n    type: 'start' | 'end'\n    center: [number, number]\n    angle: number\n    scale: AnyScale\n} & RadialAxisConfig\n\nexport const RadialAxis = ({\n    type,\n    center,\n    angle: rawAngle,\n    scale,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation: extraRotation = 0,\n    tickComponent = RadialAxisTick,\n}: RadialAxisProps) => {\n    const angle = normalizeAngle(rawAngle)\n\n    let textAnchor: 'start' | 'end'\n    let lineX: number\n    let textX: number\n    let tickRotation: number\n\n    if (type === 'start') {\n        tickRotation = 90 + extraRotation\n        if (angle <= 90) {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n        } else if (angle < 270) {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n            tickRotation -= 180\n        } else {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n        }\n    } else {\n        tickRotation = 90 + extraRotation\n        if (angle < 90) {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n        } else if (angle < 270) {\n            lineX = -tickSize\n            textX = lineX - tickPadding\n            textAnchor = 'end'\n            tickRotation -= 180\n        } else {\n            lineX = tickSize\n            textX = lineX + tickPadding\n            textAnchor = 'start'\n        }\n    }\n\n    const ticks = useMemo(() => {\n        const values = getScaleTicks(scale)\n\n        return values.map((value, index) => {\n            let position = scale(value) as number\n            if ('bandwidth' in scale) {\n                position += scale.bandwidth() / 2\n            }\n\n            return {\n                key: index,\n                label: value,\n                position,\n            }\n        })\n    }, [scale])\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const spring = useSpring<{ rotation: string }>({\n        rotation: rawAngle - 90,\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    const transition = useTransition<(typeof ticks)[0], RadialAxisTickAnimatedProps>(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        from: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 0,\n        }),\n        enter: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        update: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 1,\n        }),\n        leave: tick => ({\n            y: tick.position,\n            textX,\n            rotation: tickRotation,\n            length: lineX,\n            opacity: 0,\n        }),\n        immediate: !animate,\n        config: springConfig,\n    })\n\n    return (\n        <g transform={`translate(${center[0]}, ${center[1]})`}>\n            <animated.g transform={spring.rotation.to(value => `rotate(${value})`)}>\n                {transition((animatedProps, tick) =>\n                    createElement(tickComponent, {\n                        key: tick.key,\n                        label: tick.label,\n                        y: tick.position,\n                        textX,\n                        rotation: tickRotation,\n                        length: lineX,\n                        textAnchor,\n                        animated: animatedProps,\n                    })\n                )}\n            </animated.g>\n        </g>\n    )\n}\n"],"names":["CircularAxisTick","_ref","label","animatedProps","animated","theme","useTheme","_jsxs","jsxs","g","opacity","children","_jsx","line","x1","y1","x2","y2","style","axis","ticks","text","dx","textX","dy","textY","dominantBaseline","textAnchor","getLinePositions","angle","innerRadius","outerRadius","start","positionFromAngle","degreesToRadians","end","x","y","getTextPosition","radius","position","RadialGrid","scale","angles","useMemo","getScaleTicks","map","angleValue","index","id","_useMotionConfig","useMotionConfig","animate","springConfig","config","transition","useTransition","keys","item","initial","from","enter","update","leave","immediate","_Fragment","jsx","transform","to","v","_extends","grid","CircularGrid","originalStartAngle","startAngle","originalEndAngle","endAngle","radii","value","bandwidth","ArcLine","strokeOpacity","fill","RadialAxisTick","rotation","length","type","_ref$center","center","_ref$tickSize","tickSize","_ref$tickPadding","tickPadding","_ref$tickComponent","tickComponent","spring","useSpring","key","textRadius","tick","domain","createElement","enableRadialGrid","enableCircularGrid","angleScale","radiusScale","Math","min","apply","range","max","lineX","tickRotation","rawAngle","_ref$tickRotation","extraRotation","normalizeAngle"],"mappings":"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"}