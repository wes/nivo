{"version":3,"file":"nivo-calendar.cjs.js","sources":["../src/CalendarYearLegends.tsx","../src/CalendarMonthPath.tsx","../src/CalendarMonthLegends.tsx","../src/CalendarDay.tsx","../src/CalendarTooltip.tsx","../src/props.ts","../src/compute/calendar.ts","../src/hooks.ts","../src/Calendar.tsx","../src/compute/timeRange.ts","../src/TimeRangeDay.tsx","../src/TimeRange.tsx","../src/CalendarCanvas.tsx","../src/ResponsiveCalendar.tsx","../src/ResponsiveCalendarCanvas.tsx","../src/ResponsiveTimeRange.tsx"],"sourcesContent":["import { CalendarYearLegendsProps } from './types'\nimport { memo } from 'react'\n\nexport const CalendarYearLegends = memo(({ years, legend, theme }: CalendarYearLegendsProps) => {\n    return (\n        <>\n            {years.map(year => {\n                return (\n                    <text\n                        key={year.year}\n                        transform={`translate(${year.x},${year.y}) rotate(${year.rotation})`}\n                        textAnchor=\"middle\"\n                        style={theme.labels.text}\n                    >\n                        {legend(year.year)}\n                    </text>\n                )\n            })}\n        </>\n    )\n})\n","import { CalendarMonthPathProps } from './types'\nimport { memo } from 'react'\n\nexport const CalendarMonthPath = memo(\n    ({ path, borderWidth, borderColor }: CalendarMonthPathProps) => {\n        return (\n            <path\n                d={path}\n                style={{\n                    fill: 'none',\n                    strokeWidth: borderWidth,\n                    stroke: borderColor,\n                    pointerEvents: 'none',\n                }}\n            />\n        )\n    }\n)\n","import { CalendarMonthLegendsProps } from './types'\nimport { memo } from 'react'\n\nexport const CalendarMonthLegends = memo(({ months, legend, theme }: CalendarMonthLegendsProps) => {\n    return (\n        <>\n            {months.map(month => {\n                return (\n                    <text\n                        key={`${month.date.toString()}.legend`}\n                        transform={`translate(${month.x},${month.y}) rotate(${month.rotation})`}\n                        textAnchor=\"middle\"\n                        style={theme.labels.text}\n                    >\n                        {legend(month.year, month.month, month.date)}\n                    </text>\n                )\n            })}\n        </>\n    )\n})\n","import { CalendarDayProps } from './types'\nimport { useTooltip } from '@nivo/tooltip'\nimport { memo, useCallback } from 'react'\nimport * as React from 'react'\n\nexport const CalendarDay = memo(\n    ({\n        data,\n        x,\n        y,\n        size,\n        color,\n        borderWidth,\n        borderColor,\n        isInteractive,\n        tooltip,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        formatValue,\n    }: CalendarDayProps) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useCallback(\n            (event: React.MouseEvent<SVGRectElement>) => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                const formatedData = {\n                    ...data,\n                    value: formatValue(data.value),\n                    data: { ...data.data },\n                }\n                showTooltipFromEvent(React.createElement(tooltip, { ...formatedData }), event)\n                onMouseEnter?.(data, event)\n            },\n            [showTooltipFromEvent, tooltip, data, onMouseEnter, formatValue]\n        )\n        const handleMouseMove = useCallback(\n            (event: React.MouseEvent<SVGRectElement>) => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                const formatedData = {\n                    ...data,\n                    value: formatValue(data.value),\n                    data: { ...data.data },\n                }\n                showTooltipFromEvent(React.createElement(tooltip, { ...formatedData }), event)\n                onMouseMove && onMouseMove(data, event)\n            },\n            [showTooltipFromEvent, tooltip, data, onMouseMove, formatValue]\n        )\n        const handleMouseLeave = useCallback(\n            (event: React.MouseEvent<SVGRectElement>) => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                hideTooltip()\n                onMouseLeave?.(data, event)\n            },\n            [hideTooltip, data, onMouseLeave]\n        )\n        const handleClick = useCallback(\n            (event: React.MouseEvent<SVGRectElement>) => onClick?.(data, event),\n            [data, onClick]\n        )\n\n        return (\n            <rect\n                x={x}\n                y={y}\n                width={size}\n                height={size}\n                style={{\n                    fill: color,\n                    strokeWidth: borderWidth,\n                    stroke: borderColor,\n                }}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleMouseMove : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n            />\n        )\n    }\n)\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { CalendarTooltipProps } from './types'\nimport { memo } from 'react'\n\nexport const CalendarTooltip = memo(({ value, day, color }: CalendarTooltipProps) => {\n    if (value === undefined || isNaN(Number(value))) return null\n    return <BasicTooltip id={day} value={value} color={color} enableChip={true} />\n})\n","import { timeFormat } from 'd3-time-format'\nimport { CalendarLegendProps } from './types'\nimport { CalendarTooltip } from './CalendarTooltip'\n\nconst monthLabelFormat = timeFormat('%b')\n\nconst commonDefaultProps = {\n    colors: ['#61cdbb', '#97e3d5', '#e8c1a0', '#f47560'] as string[],\n\n    align: 'center',\n    direction: 'horizontal',\n    emptyColor: '#fff',\n\n    minValue: 0,\n    maxValue: 'auto',\n\n    yearSpacing: 30,\n    yearLegend: (year: number) => year,\n    yearLegendPosition: 'before',\n    yearLegendOffset: 10,\n\n    monthBorderWidth: 2,\n    monthBorderColor: '#000',\n    monthSpacing: 0,\n    monthLegend: (_year: number, _month: number, date: Date) => monthLabelFormat(date),\n    monthLegendPosition: 'before',\n    monthLegendOffset: 10,\n\n    daySpacing: 0,\n    dayBorderWidth: 1,\n    dayBorderColor: '#000',\n\n    isInteractive: true,\n\n    legends: [] as CalendarLegendProps[],\n    tooltip: CalendarTooltip,\n} as const\n\nexport const calendarDefaultProps = {\n    ...commonDefaultProps,\n    role: 'img',\n} as const\n\nexport const calendarCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n} as const\n\nexport const timeRangeDefaultProps = {\n    ...calendarDefaultProps,\n    dayBorderColor: '#fff',\n    dayRadius: 0,\n    square: true,\n    weekdayLegendOffset: 75,\n    firstWeekday: 'sunday',\n} as const\n","import isDate from 'lodash/isDate'\nimport memoize from 'lodash/memoize'\nimport range from 'lodash/range'\nimport { alignBox } from '@nivo/core'\nimport { timeFormat } from 'd3-time-format'\nimport { timeDays, timeWeek, timeWeeks, timeMonths, timeYear } from 'd3-time'\nimport { ScaleQuantize } from 'd3-scale'\nimport { BBox, CalendarSvgProps, ColorScale, Datum, Year } from '../types'\n\n/**\n * Compute min/max values.\n */\nexport const computeDomain = (\n    data: CalendarSvgProps['data'],\n    minSpec: NonNullable<CalendarSvgProps['minValue']>,\n    maxSpec: NonNullable<CalendarSvgProps['maxValue']>\n) => {\n    const allValues = data.map(d => d.value)\n    const minValue = minSpec === 'auto' ? Math.min(...allValues) : minSpec\n    const maxValue = maxSpec === 'auto' ? Math.max(...allValues) : maxSpec\n\n    return [minValue, maxValue] as const\n}\n\n/**\n * Compute day cell size according to current context.\n */\nconst computeCellSize = ({\n    width,\n    height,\n    direction,\n    yearRange,\n    yearSpacing,\n    monthSpacing,\n    daySpacing,\n    maxWeeks,\n}: Pick<\n    Required<CalendarSvgProps>,\n    'direction' | 'width' | 'height' | 'yearSpacing' | 'monthSpacing' | 'daySpacing'\n> & {\n    maxWeeks: number\n    yearRange: number[]\n}) => {\n    let hCellSize\n    let vCellSize\n\n    if (direction === 'horizontal') {\n        hCellSize = (width - monthSpacing * 12 - daySpacing * maxWeeks) / maxWeeks\n        vCellSize =\n            (height - (yearRange.length - 1) * yearSpacing - yearRange.length * (8 * daySpacing)) /\n            (yearRange.length * 7)\n    } else {\n        hCellSize =\n            (width - (yearRange.length - 1) * yearSpacing - yearRange.length * (8 * daySpacing)) /\n            (yearRange.length * 7)\n        vCellSize = (height - monthSpacing * 12 - daySpacing * maxWeeks) / maxWeeks\n    }\n\n    return Math.min(hCellSize, vCellSize)\n}\n\n/**\n * Computes month path and bounding box.\n */\nconst monthPathAndBBox = ({\n    date,\n    cellSize,\n    yearIndex,\n    yearSpacing,\n    monthSpacing,\n    daySpacing,\n    direction,\n    originX,\n    originY,\n}: Record<'cellSize' | 'originX' | 'originY' | 'yearIndex', number> &\n    Pick<\n        Required<CalendarSvgProps>,\n        'direction' | 'yearSpacing' | 'monthSpacing' | 'daySpacing'\n    > & {\n        date: Date\n    }) => {\n    // first day of next month\n    const t1 = new Date(date.getFullYear(), date.getMonth() + 1, 0)\n\n    // ranges\n    const firstWeek = timeWeek.count(timeYear(date), date)\n    const lastWeek = timeWeek.count(timeYear(t1), t1)\n    const firstDay = date.getDay()\n    const lastDay = t1.getDay()\n\n    // offset according to year index and month\n    let xO = originX\n    let yO = originY\n    const yearOffset = yearIndex * (7 * (cellSize + daySpacing) + yearSpacing)\n    const monthOffset = date.getMonth() * monthSpacing\n    if (direction === 'horizontal') {\n        yO += yearOffset\n        xO += monthOffset\n    } else {\n        yO += monthOffset\n        xO += yearOffset\n    }\n\n    let path\n    const bbox = { x: xO, y: yO, width: 0, height: 0 }\n    if (direction === 'horizontal') {\n        path = [\n            `M${xO + (firstWeek + 1) * (cellSize + daySpacing)},${\n                yO + firstDay * (cellSize + daySpacing)\n            }`,\n            `H${xO + firstWeek * (cellSize + daySpacing)}V${yO + 7 * (cellSize + daySpacing)}`,\n            `H${xO + lastWeek * (cellSize + daySpacing)}V${\n                yO + (lastDay + 1) * (cellSize + daySpacing)\n            }`,\n            `H${xO + (lastWeek + 1) * (cellSize + daySpacing)}V${yO}`,\n            `H${xO + (firstWeek + 1) * (cellSize + daySpacing)}Z`,\n        ].join('')\n\n        bbox.x = xO + firstWeek * (cellSize + daySpacing)\n        bbox.width = xO + (lastWeek + 1) * (cellSize + daySpacing) - bbox.x\n        bbox.height = 7 * (cellSize + daySpacing)\n    } else {\n        path = [\n            `M${xO + firstDay * (cellSize + daySpacing)},${\n                yO + (firstWeek + 1) * (cellSize + daySpacing)\n            }`,\n            `H${xO}V${yO + (lastWeek + 1) * (cellSize + daySpacing)}`,\n            `H${xO + (lastDay + 1) * (cellSize + daySpacing)}V${\n                yO + lastWeek * (cellSize + daySpacing)\n            }`,\n            `H${xO + 7 * (cellSize + daySpacing)}V${yO + firstWeek * (cellSize + daySpacing)}`,\n            `H${xO + firstDay * (cellSize + daySpacing)}Z`,\n        ].join('')\n\n        bbox.y = yO + firstWeek * (cellSize + daySpacing)\n        bbox.width = 7 * (cellSize + daySpacing)\n        bbox.height = yO + (lastWeek + 1) * (cellSize + daySpacing) - bbox.y\n    }\n\n    return { path, bbox }\n}\n\n/**\n * Creates a memoized version of monthPathAndBBox function.\n */\nconst memoMonthPathAndBBox = memoize(\n    monthPathAndBBox,\n    ({\n        date,\n        cellSize,\n        yearIndex,\n        yearSpacing,\n        monthSpacing,\n        daySpacing,\n        direction,\n        originX,\n        originY,\n    }) => {\n        return `${date.toString()}.${cellSize}.${yearIndex}.${yearSpacing}.${monthSpacing}.${daySpacing}.${direction}.${originX}.${originY}`\n    }\n)\n\n/**\n * Returns a function to Compute day cell position for horizontal layout.\n */\nconst cellPositionHorizontal = (\n    cellSize: number,\n    yearSpacing: number,\n    monthSpacing: number,\n    daySpacing: number\n) => {\n    return (originX: number, originY: number, d: Date, yearIndex: number) => {\n        const weekOfYear = timeWeek.count(timeYear(d), d)\n\n        return {\n            x:\n                originX +\n                weekOfYear * (cellSize + daySpacing) +\n                daySpacing / 2 +\n                d.getMonth() * monthSpacing,\n            y:\n                originY +\n                d.getDay() * (cellSize + daySpacing) +\n                daySpacing / 2 +\n                yearIndex * (yearSpacing + 7 * (cellSize + daySpacing)),\n        }\n    }\n}\n\n/**\n * Returns a function to Compute day cell position for vertical layout.\n */\nconst cellPositionVertical = (\n    cellSize: number,\n    yearSpacing: number,\n    monthSpacing: number,\n    daySpacing: number\n) => {\n    return (originX: number, originY: number, d: Date, yearIndex: number) => {\n        const weekOfYear = timeWeek.count(timeYear(d), d)\n\n        return {\n            x:\n                originX +\n                d.getDay() * (cellSize + daySpacing) +\n                daySpacing / 2 +\n                yearIndex * (yearSpacing + 7 * (cellSize + daySpacing)),\n            y:\n                originY +\n                weekOfYear * (cellSize + daySpacing) +\n                daySpacing / 2 +\n                d.getMonth() * monthSpacing,\n        }\n    }\n}\n\n// used for days range and data matching\nconst dayFormat = timeFormat('%Y-%m-%d')\n\n/**\n * Compute base layout, without caring about the current data.\n */\nexport const computeLayout = ({\n    width,\n    height,\n    from,\n    to,\n    direction,\n    yearSpacing,\n    monthSpacing,\n    daySpacing,\n    align,\n}: Pick<\n    Required<CalendarSvgProps>,\n    | 'align'\n    | 'direction'\n    | 'from'\n    | 'to'\n    | 'width'\n    | 'height'\n    | 'yearSpacing'\n    | 'monthSpacing'\n    | 'daySpacing'\n>) => {\n    const fromDate = isDate(from) ? from : new Date(from)\n    const toDate = isDate(to) ? to : new Date(to)\n\n    const yearRange = range(fromDate.getFullYear(), toDate.getFullYear() + 1)\n    const maxWeeks =\n        Math.max(\n            ...yearRange.map(\n                year => timeWeeks(new Date(year, 0, 1), new Date(year + 1, 0, 1)).length\n            )\n        ) + 1\n\n    const cellSize = computeCellSize({\n        width,\n        height,\n        direction,\n        yearRange,\n        yearSpacing,\n        monthSpacing,\n        daySpacing,\n        maxWeeks,\n    })\n\n    const monthsSize = cellSize * maxWeeks + daySpacing * maxWeeks + monthSpacing * 12\n    const yearsSize =\n        (cellSize + daySpacing) * 7 * yearRange.length + yearSpacing * (yearRange.length - 1)\n\n    const calendarWidth = direction === 'horizontal' ? monthsSize : yearsSize\n    const calendarHeight = direction === 'horizontal' ? yearsSize : monthsSize\n    const [originX, originY] = alignBox(\n        {\n            x: 0,\n            y: 0,\n            width: calendarWidth,\n            height: calendarHeight,\n        },\n        {\n            x: 0,\n            y: 0,\n            width,\n            height,\n        },\n        align\n    )\n\n    let cellPosition: ReturnType<typeof cellPositionHorizontal>\n    if (direction === 'horizontal') {\n        cellPosition = cellPositionHorizontal(cellSize, yearSpacing, monthSpacing, daySpacing)\n    } else {\n        cellPosition = cellPositionVertical(cellSize, yearSpacing, monthSpacing, daySpacing)\n    }\n\n    const years: Array<{\n        year: number\n        bbox: BBox\n    }> = []\n\n    let months: Array<{\n        path: string\n        bbox: {\n            x: number\n            y: number\n            width: number\n            height: number\n        }\n        date: Date\n        year: number\n        month: number\n    }> = []\n\n    let days: Array<Omit<Datum, 'color' | 'data' | 'value'>> = []\n\n    yearRange.forEach((year, i) => {\n        const yearStart = new Date(year, 0, 1)\n        const yearEnd = new Date(year + 1, 0, 1)\n\n        days = days.concat(\n            timeDays(yearStart, yearEnd).map(dayDate => {\n                return {\n                    date: dayDate,\n                    day: dayFormat(dayDate),\n                    size: cellSize,\n                    ...cellPosition(originX, originY, dayDate, i),\n                }\n            })\n        )\n\n        const yearMonths = timeMonths(yearStart, yearEnd).map(monthDate => ({\n            date: monthDate,\n            year: monthDate.getFullYear(),\n            month: monthDate.getMonth(),\n            ...memoMonthPathAndBBox({\n                originX,\n                originY,\n                date: monthDate,\n                direction,\n                yearIndex: i,\n                yearSpacing,\n                monthSpacing,\n                daySpacing,\n                cellSize,\n            }),\n        }))\n\n        months = months.concat(yearMonths)\n\n        years.push({\n            year,\n            bbox: {\n                x: yearMonths[0].bbox.x,\n                y: yearMonths[0].bbox.y,\n                width: yearMonths[11].bbox.x - yearMonths[0].bbox.x + yearMonths[11].bbox.width,\n                height: yearMonths[11].bbox.y - yearMonths[0].bbox.y + yearMonths[11].bbox.height,\n            },\n        })\n    })\n\n    return { years, months, days, cellSize, calendarWidth, calendarHeight, originX, originY }\n}\n\n/**\n * Bind current data to computed day cells.\n */\nexport const bindDaysData = ({\n    days,\n    data,\n    colorScale,\n    emptyColor,\n}: Pick<Required<CalendarSvgProps>, 'data' | 'emptyColor'> & {\n    colorScale: ScaleQuantize<string> | ColorScale\n    days: Array<Omit<Datum, 'color' | 'data' | 'value'>>\n}) => {\n    return days.map(day => {\n        const dayData = data.find(item => item.day === day.day)\n\n        if (!dayData) {\n            return { ...day, color: emptyColor }\n        }\n\n        return {\n            ...day,\n            color: colorScale(dayData.value),\n            data: dayData,\n            value: dayData.value,\n        }\n    })\n}\n\nexport const computeYearLegendPositions = ({\n    years,\n    direction,\n    position,\n    offset,\n}: Pick<Required<CalendarSvgProps>, 'direction'> & {\n    offset: number\n    position: 'before' | 'after'\n    years: Year[]\n}) => {\n    return years.map(year => {\n        let x = 0\n        let y = 0\n        let rotation = 0\n        if (direction === 'horizontal' && position === 'before') {\n            x = year.bbox.x - offset\n            y = year.bbox.y + year.bbox.height / 2\n            rotation = -90\n        } else if (direction === 'horizontal' && position === 'after') {\n            x = year.bbox.x + year.bbox.width + offset\n            y = year.bbox.y + year.bbox.height / 2\n            rotation = -90\n        } else if (direction === 'vertical' && position === 'before') {\n            x = year.bbox.x + year.bbox.width / 2\n            y = year.bbox.y - offset\n        } else {\n            x = year.bbox.x + year.bbox.width / 2\n            y = year.bbox.y + year.bbox.height + offset\n        }\n\n        return {\n            ...year,\n            x,\n            y,\n            rotation,\n        }\n    })\n}\n\nexport const computeMonthLegendPositions = <Month extends { bbox: BBox }>({\n    months,\n    direction,\n    position,\n    offset,\n}: Pick<Required<CalendarSvgProps>, 'direction'> & {\n    offset: number\n    position: 'before' | 'after'\n    months: Month[]\n}) => {\n    return months.map(month => {\n        let x = 0\n        let y = 0\n        let rotation = 0\n        if (direction === 'horizontal' && position === 'before') {\n            x = month.bbox.x + month.bbox.width / 2\n            y = month.bbox.y - offset\n        } else if (direction === 'horizontal' && position === 'after') {\n            x = month.bbox.x + month.bbox.width / 2\n            y = month.bbox.y + month.bbox.height + offset\n        } else if (direction === 'vertical' && position === 'before') {\n            x = month.bbox.x - offset\n            y = month.bbox.y + month.bbox.height / 2\n            rotation = -90\n        } else {\n            x = month.bbox.x + month.bbox.width + offset\n            y = month.bbox.y + month.bbox.height / 2\n            rotation = -90\n        }\n\n        return {\n            ...month,\n            x,\n            y,\n            rotation,\n        }\n    })\n}\n","import { useMemo } from 'react'\nimport { ScaleQuantize, scaleQuantize } from 'd3-scale'\nimport {\n    computeDomain,\n    computeYearLegendPositions,\n    computeMonthLegendPositions,\n    bindDaysData,\n    computeLayout,\n} from './compute/calendar'\nimport { BBox, CalendarSvgProps, ColorScale, Year } from './types'\n\nexport const useCalendarLayout = ({\n    width,\n    height,\n    from,\n    to,\n    direction,\n    yearSpacing,\n    monthSpacing,\n    daySpacing,\n    align,\n}: Pick<\n    Required<CalendarSvgProps>,\n    | 'width'\n    | 'height'\n    | 'from'\n    | 'to'\n    | 'direction'\n    | 'yearSpacing'\n    | 'monthSpacing'\n    | 'daySpacing'\n    | 'align'\n>) =>\n    useMemo(\n        () =>\n            computeLayout({\n                width,\n                height,\n                from,\n                to,\n                direction,\n                yearSpacing,\n                monthSpacing,\n                daySpacing,\n                align,\n            }),\n        [width, height, from, to, direction, yearSpacing, monthSpacing, daySpacing, align]\n    )\n\nexport const useColorScale = ({\n    data,\n    minValue,\n    maxValue,\n    colors,\n    colorScale,\n}: Pick<Required<CalendarSvgProps>, 'data' | 'minValue' | 'maxValue' | 'colors'> &\n    Pick<CalendarSvgProps, 'colorScale'>) =>\n    useMemo(() => {\n        if (colorScale) return colorScale\n        const domain = computeDomain(data, minValue, maxValue)\n        const defaultColorScale = scaleQuantize<string>().domain(domain).range(colors)\n        return defaultColorScale\n    }, [data, minValue, maxValue, colors, colorScale])\n\nexport const useYearLegends = ({\n    years,\n    direction,\n    yearLegendPosition,\n    yearLegendOffset,\n}: {\n    years: Year[]\n    direction: 'horizontal' | 'vertical'\n    yearLegendPosition: 'before' | 'after'\n    yearLegendOffset: number\n}) =>\n    useMemo(\n        () =>\n            computeYearLegendPositions({\n                years,\n                direction,\n                position: yearLegendPosition,\n                offset: yearLegendOffset,\n            }),\n        [years, direction, yearLegendPosition, yearLegendOffset]\n    )\n\nexport const useMonthLegends = <Month extends { bbox: BBox }>({\n    months,\n    direction,\n    monthLegendPosition,\n    monthLegendOffset,\n}: {\n    months: Month[]\n    direction: 'horizontal' | 'vertical'\n    monthLegendPosition: 'before' | 'after'\n    monthLegendOffset: number\n}) =>\n    useMemo(\n        () =>\n            computeMonthLegendPositions({\n                months,\n                direction,\n                position: monthLegendPosition,\n                offset: monthLegendOffset,\n            }),\n        [months, direction, monthLegendPosition, monthLegendOffset]\n    )\n\nexport const useDays = ({\n    days,\n    data,\n    colorScale,\n    emptyColor,\n}: Pick<Required<CalendarSvgProps>, 'data' | 'emptyColor'> &\n    Pick<Parameters<typeof bindDaysData>[0], 'days'> & {\n        colorScale: ScaleQuantize<string> | ColorScale\n    }) =>\n    useMemo(\n        () =>\n            bindDaysData({\n                days,\n                data,\n                colorScale,\n                emptyColor,\n            }),\n        [days, data, colorScale, emptyColor]\n    )\n","import { CalendarSvgProps } from './types'\nimport { Container, SvgWrapper, useTheme, useDimensions, useValueFormatter } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { CalendarYearLegends } from './CalendarYearLegends'\nimport { CalendarMonthPath } from './CalendarMonthPath'\nimport { CalendarMonthLegends } from './CalendarMonthLegends'\nimport { CalendarDay } from './CalendarDay'\nimport { calendarDefaultProps } from './props'\nimport { useMonthLegends, useYearLegends, useCalendarLayout, useDays, useColorScale } from './hooks'\n\nconst InnerCalendar = ({\n    margin: partialMargin,\n    width,\n    height,\n\n    align = calendarDefaultProps.align,\n    colors = calendarDefaultProps.colors,\n    colorScale,\n    data,\n    direction = calendarDefaultProps.direction,\n    emptyColor = calendarDefaultProps.emptyColor,\n    from,\n    to,\n    minValue = calendarDefaultProps.minValue,\n    maxValue = calendarDefaultProps.maxValue,\n    valueFormat,\n    legendFormat,\n\n    yearLegend = calendarDefaultProps.yearLegend,\n    yearLegendOffset = calendarDefaultProps.yearLegendOffset,\n    yearLegendPosition = calendarDefaultProps.yearLegendPosition,\n    yearSpacing = calendarDefaultProps.yearSpacing,\n\n    monthBorderColor = calendarDefaultProps.monthBorderColor,\n    monthBorderWidth = calendarDefaultProps.monthBorderWidth,\n    monthLegend = calendarDefaultProps.monthLegend,\n    monthLegendOffset = calendarDefaultProps.monthLegendOffset,\n    monthLegendPosition = calendarDefaultProps.monthLegendPosition,\n    monthSpacing = calendarDefaultProps.monthSpacing,\n\n    dayBorderColor = calendarDefaultProps.dayBorderColor,\n    dayBorderWidth = calendarDefaultProps.dayBorderWidth,\n    daySpacing = calendarDefaultProps.daySpacing,\n\n    isInteractive = calendarDefaultProps.isInteractive,\n    tooltip = calendarDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n\n    legends = calendarDefaultProps.legends,\n    role = calendarDefaultProps.role,\n}: CalendarSvgProps) => {\n    const theme = useTheme()\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const { months, years, ...rest } = useCalendarLayout({\n        width: innerWidth,\n        height: innerHeight,\n        from,\n        to,\n        direction,\n        yearSpacing,\n        monthSpacing,\n        daySpacing,\n        align,\n    })\n    const colorScaleFn = useColorScale({ data, minValue, maxValue, colors, colorScale })\n    const monthLegends = useMonthLegends({\n        months,\n        direction,\n        monthLegendPosition,\n        monthLegendOffset,\n    })\n    const yearLegends = useYearLegends({ years, direction, yearLegendPosition, yearLegendOffset })\n    const days = useDays({ days: rest.days, data, colorScale: colorScaleFn, emptyColor })\n    const formatLegend = useValueFormatter(legendFormat)\n    const formatValue = useValueFormatter(valueFormat)\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {days.map(d => (\n                <CalendarDay\n                    key={d.date.toString()}\n                    data={d}\n                    x={d.x}\n                    y={d.y}\n                    size={d.size}\n                    color={d.color}\n                    borderWidth={dayBorderWidth}\n                    borderColor={dayBorderColor}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    onMouseMove={onMouseMove}\n                    isInteractive={isInteractive}\n                    tooltip={tooltip}\n                    onClick={onClick}\n                    formatValue={formatValue}\n                />\n            ))}\n            {months.map(m => (\n                <CalendarMonthPath\n                    key={m.date.toString()}\n                    path={m.path}\n                    borderWidth={monthBorderWidth}\n                    borderColor={monthBorderColor}\n                />\n            ))}\n            <CalendarMonthLegends months={monthLegends} legend={monthLegend} theme={theme} />\n            <CalendarYearLegends years={yearLegends} legend={yearLegend} theme={theme} />\n            {legends.map((legend, i) => {\n                const legendData = colorScaleFn.ticks(legend.itemCount).map(value => ({\n                    id: value,\n                    label: formatLegend(value),\n                    color: colorScaleFn(value),\n                }))\n\n                return (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={width}\n                        containerHeight={height}\n                        data={legendData}\n                    />\n                )\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Calendar = ({\n    isInteractive = calendarDefaultProps.isInteractive,\n    renderWrapper,\n    theme,\n    ...props\n}: CalendarSvgProps) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerCalendar isInteractive={isInteractive} {...props} />\n    </Container>\n)\n","import {\n    timeDays,\n    timeDay,\n    timeMonday,\n    timeTuesday,\n    timeWednesday,\n    timeThursday,\n    timeFriday,\n    timeSaturday,\n    timeSunday,\n} from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport { DateOrString, Weekday } from '../types'\nimport isDate from 'lodash/isDate'\n\n// Interfaces\ninterface ComputeBaseProps {\n    direction: 'horizontal' | 'vertical'\n}\n\ninterface ComputeBaseSpaceProps {\n    daySpacing: number\n    offset: number\n}\n\ninterface ComputeBaseDimensionProps {\n    cellWidth: number\n    cellHeight: number\n}\n\ninterface ComputeCellSize extends ComputeBaseProps, ComputeBaseSpaceProps {\n    totalDays: number\n    width: number\n    height: number\n    square: boolean\n}\n\ninterface ComputeCellPositions\n    extends ComputeBaseProps,\n        ComputeBaseSpaceProps,\n        ComputeBaseDimensionProps {\n    from?: DateOrString\n    to?: DateOrString\n    data: {\n        date: Date\n        day: string\n        value: number\n    }[]\n    colorScale: (value: number) => string\n    emptyColor: string\n    firstWeekday: Weekday\n}\n\ninterface ComputeWeekdays\n    extends Omit<ComputeBaseProps, 'daysInRange'>,\n        Omit<ComputeBaseSpaceProps, 'offset'>,\n        ComputeBaseDimensionProps {\n    ticks?: number[]\n    arrayOfWeekdays?: string[]\n    firstWeekday: Weekday\n}\n\ninterface Day {\n    coordinates: {\n        x: number\n        y: number\n    }\n    firstWeek: number\n    month: number\n    year: number\n    date: Date\n    color: string\n    day: string\n    value?: number\n}\n\ninterface Month {\n    date: Date\n    bbox: {\n        x: number\n        y: number\n        width: number\n        height: number\n    }\n    firstWeek: number\n    month: number\n    year: number\n}\n\ninterface ComputeMonths\n    extends ComputeBaseProps,\n        Omit<ComputeBaseSpaceProps, 'offset'>,\n        ComputeBaseDimensionProps {\n    days: Day[]\n}\n\ninterface ComputeTotalDays {\n    from?: DateOrString\n    to?: DateOrString\n    data: {\n        date: Date\n        day: string\n        value: number\n    }[]\n}\n\n// used for days range and data matching\nconst dayFormat = timeFormat('%Y-%m-%d')\n\n/**\n * Compute day cell size according to\n * current context.\n */\nexport const computeCellSize = ({\n    direction,\n    daySpacing,\n    offset,\n    square,\n    totalDays,\n    width,\n    height,\n}: ComputeCellSize) => {\n    const daysInRange = 7\n    let rows\n    let columns\n    let widthRest = width\n    let heightRest = height\n    if (direction === 'horizontal') {\n        widthRest -= offset\n        rows = daysInRange\n        columns = Math.ceil(totalDays / daysInRange)\n    } else {\n        heightRest -= offset\n        columns = daysInRange\n        rows = Math.ceil(totalDays / daysInRange)\n    }\n    // + 1 since we have to apply spacing to the rigth and left\n    const cellHeight = (heightRest - daySpacing * (rows + 1)) / rows\n    const cellWidth = (widthRest - daySpacing * (columns + 1)) / columns\n    // do we want square?\n    const size = Math.min(cellHeight, cellWidth)\n    return {\n        columns,\n        rows,\n        cellHeight: square ? size : cellHeight,\n        cellWidth: square ? size : cellWidth,\n    }\n}\n\nexport const ARRAY_OF_WEEKDAYS = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n]\n\nexport function getFirstWeekdayIndex(weekday: Weekday) {\n    return ARRAY_OF_WEEKDAYS.findIndex(item => item.toLowerCase() === weekday)\n}\n\nexport const getDayIndex = (date: Date, firstWeekday: Weekday) => {\n    const days = [0, 1, 2, 3, 4, 5, 6]\n    const day = date.getDay()\n    const offsetDay = day - getFirstWeekdayIndex(firstWeekday)\n    const [dayIndex] = days.slice(offsetDay)\n    return dayIndex\n}\n\nconst getTimeInterval = (firstWeekday: Weekday) => {\n    return [\n        timeSunday,\n        timeMonday,\n        timeTuesday,\n        timeWednesday,\n        timeThursday,\n        timeFriday,\n        timeSaturday,\n    ][getFirstWeekdayIndex(firstWeekday)]\n}\n\nfunction shiftArray<T>(arr: T[], x: number): T[] {\n    if (!arr.length || !x) return arr\n\n    for (let i = 0; i < x; i++) {\n        const shifted = arr.shift() as T\n        arr.push(shifted)\n    }\n\n    return arr\n}\n\nfunction computeGrid({\n    startDate,\n    date,\n    direction,\n    firstWeekday,\n}: {\n    startDate: Date\n    date: Date\n    direction: 'horizontal' | 'vertical'\n    firstWeekday: Weekday\n}) {\n    const timeInterval = getTimeInterval(firstWeekday)\n    const firstWeek = timeInterval.count(startDate, date)\n    const month = date.getMonth()\n    const year = date.getFullYear()\n\n    let currentColumn = 0\n    let currentRow = 0\n    if (direction === 'horizontal') {\n        currentColumn = firstWeek\n        currentRow = getDayIndex(date, firstWeekday)\n    } else {\n        currentColumn = getDayIndex(date, firstWeekday)\n        currentRow = firstWeek\n    }\n\n    return { currentColumn, year, currentRow, firstWeek, month, date }\n}\n\nexport const computeCellPositions = ({\n    direction,\n    colorScale,\n    emptyColor,\n    from,\n    to,\n    data,\n    cellWidth,\n    cellHeight,\n    daySpacing,\n    offset,\n    firstWeekday,\n}: ComputeCellPositions) => {\n    let x = daySpacing\n    let y = daySpacing\n\n    if (direction === 'horizontal') {\n        x += offset\n    } else {\n        y += offset\n    }\n\n    // we need to determine whether we need to add days to move to correct position\n    const start = from ? from : data[0].date\n    const end = to ? to : data[data.length - 1].date\n    const startDate = isDate(start) ? start : new Date(start)\n    const endDate = isDate(end) ? end : new Date(end)\n    const dateRange = timeDays(startDate, endDate).map(dayDate => {\n        return {\n            date: dayDate,\n            day: dayFormat(dayDate),\n        }\n    })\n\n    const dataWithCellPosition = dateRange.map(day => {\n        const dayData = data.find(item => item.day === day.day)\n\n        const { currentColumn, currentRow, firstWeek, year, month, date } = computeGrid({\n            startDate,\n            date: day.date,\n            direction,\n            firstWeekday,\n        })\n\n        const coordinates = {\n            x: x + daySpacing * currentColumn + cellWidth * currentColumn,\n            y: y + daySpacing * currentRow + cellHeight * currentRow,\n        }\n\n        if (!dayData) {\n            return {\n                ...day,\n                coordinates,\n                firstWeek,\n                month,\n                year,\n                date,\n                color: emptyColor,\n                width: cellWidth,\n                height: cellHeight,\n            }\n        }\n\n        return {\n            ...dayData,\n            coordinates,\n            firstWeek,\n            month,\n            year,\n            date,\n            color: colorScale(dayData.value),\n            width: cellWidth,\n            height: cellHeight,\n        }\n    })\n\n    return dataWithCellPosition\n}\n\nexport const computeWeekdays = ({\n    cellHeight,\n    cellWidth,\n    direction,\n    daySpacing,\n    ticks = [1, 3, 5],\n    firstWeekday,\n    arrayOfWeekdays = shiftArray(ARRAY_OF_WEEKDAYS, getFirstWeekdayIndex(firstWeekday)),\n}: ComputeWeekdays) => {\n    const sizes = {\n        width: cellWidth + daySpacing,\n        height: cellHeight + daySpacing,\n    }\n    return ticks.map(day => ({\n        value: arrayOfWeekdays[day],\n        rotation: direction === 'horizontal' ? 0 : -90,\n        y: direction === 'horizontal' ? sizes.height * (day + 1) - sizes.height / 3 : 0,\n        x: direction === 'horizontal' ? 0 : sizes.width * (day + 1) - sizes.width / 3,\n    }))\n}\n\nexport const computeMonthLegends = ({\n    direction,\n    daySpacing,\n    days,\n    cellHeight,\n    cellWidth,\n}: ComputeMonths) => {\n    const accumulator: {\n        months: { [key: string]: Month }\n        weeks: Day[]\n    } = {\n        months: {},\n        weeks: [],\n    }\n\n    return days.reduce((acc, day) => {\n        if (acc.weeks.length === day.firstWeek || (!acc.weeks.length && day.firstWeek === 1)) {\n            acc.weeks.push(day)\n\n            const key = `${day.year}-${day.month}`\n\n            if (!Object.keys(acc.months).includes(key)) {\n                const bbox = { x: 0, y: 0, width: 0, height: 0 }\n\n                if (direction === 'horizontal') {\n                    bbox.x = day.coordinates.x - daySpacing\n                    bbox.height = cellHeight + daySpacing\n                    bbox.width = cellWidth + daySpacing * 2\n                } else {\n                    bbox.y = day.coordinates.y - daySpacing\n                    bbox.height = cellHeight + daySpacing * 2\n                    bbox.width = cellWidth + daySpacing * 2\n                }\n\n                acc.months[key] = {\n                    date: day.date,\n                    bbox,\n                    firstWeek: day.firstWeek,\n                    month: 0,\n                    year: 0,\n                }\n            } else {\n                // enhance width/height\n                if (direction === 'horizontal') {\n                    acc.months[key].bbox.width =\n                        (day.firstWeek - acc.months[key].firstWeek) * (cellWidth + daySpacing)\n                } else {\n                    acc.months[key].bbox.height =\n                        (day.firstWeek - acc.months[key].firstWeek) * (cellHeight + daySpacing)\n                }\n            }\n        }\n        return acc\n    }, accumulator)\n}\n\nexport const computeTotalDays = ({ from, to, data }: ComputeTotalDays) => {\n    let startDate\n    let endDate\n    if (from) {\n        startDate = isDate(from) ? from : new Date(from)\n    } else {\n        startDate = data[0].date\n    }\n\n    if (from && to) {\n        endDate = isDate(to) ? to : new Date(to)\n    } else {\n        endDate = data[data.length - 1].date\n    }\n\n    return startDate.getDay() + timeDay.count(startDate, endDate)\n}\n","import { createElement, memo, useCallback, MouseEvent } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { TimeRangeDayProps } from './types'\n\nexport const TimeRangeDay = memo(\n    ({\n        data,\n        x,\n        ry = 5,\n        rx = 5,\n        y,\n        width,\n        height,\n        color,\n        borderWidth,\n        borderColor,\n        isInteractive,\n        tooltip,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        formatValue,\n    }: TimeRangeDayProps) => {\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        const handleMouseEnter = useCallback(\n            (event: MouseEvent<SVGRectElement>) => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                const formatedData = {\n                    ...data,\n                    value: formatValue(data.value),\n                }\n                showTooltipFromEvent(createElement(tooltip, { ...formatedData }), event)\n                onMouseEnter?.(data, event)\n            },\n            [showTooltipFromEvent, tooltip, data, onMouseEnter, formatValue]\n        )\n        const handleMouseMove = useCallback(\n            (event: MouseEvent<SVGRectElement>) => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                const formatedData = {\n                    ...data,\n                    value: formatValue(data.value),\n                }\n                showTooltipFromEvent(createElement(tooltip, { ...formatedData }), event)\n                onMouseMove?.(data, event)\n            },\n            [showTooltipFromEvent, tooltip, data, onMouseMove, formatValue]\n        )\n        const handleMouseLeave = useCallback(\n            (event: MouseEvent<SVGRectElement>) => {\n                if (!('value' in data)) {\n                    return\n                }\n\n                hideTooltip()\n                onMouseLeave?.(data, event)\n            },\n            [hideTooltip, data, onMouseLeave]\n        )\n        const handleClick = useCallback(\n            (event: MouseEvent<SVGRectElement>) => onClick?.(data, event),\n            [data, onClick]\n        )\n\n        return (\n            <rect\n                x={x}\n                y={y}\n                rx={rx}\n                ry={ry}\n                width={width}\n                height={height}\n                style={{\n                    fill: color,\n                    strokeWidth: borderWidth,\n                    stroke: borderColor,\n                }}\n                onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                onMouseMove={isInteractive ? handleMouseMove : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n            />\n        )\n    }\n)\n","import { useMemo } from 'react'\nimport { Container, SvgWrapper, useValueFormatter, useTheme, useDimensions } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport {\n    computeWeekdays,\n    computeCellSize,\n    computeCellPositions,\n    computeMonthLegends,\n    computeTotalDays,\n} from './compute/timeRange'\nimport { useMonthLegends, useColorScale } from './hooks'\nimport { TimeRangeDay } from './TimeRangeDay'\nimport { CalendarMonthLegends } from './CalendarMonthLegends'\nimport { TimeRangeSvgProps } from './types'\nimport { timeRangeDefaultProps } from './props'\n\nconst InnerTimeRange = ({\n    margin: partialMargin,\n    width,\n    height,\n\n    square = timeRangeDefaultProps.square,\n    colors = timeRangeDefaultProps.colors,\n    colorScale,\n    emptyColor = timeRangeDefaultProps.emptyColor,\n    from,\n    to,\n    data: _data,\n    direction = timeRangeDefaultProps.direction,\n    minValue = timeRangeDefaultProps.minValue,\n    maxValue = timeRangeDefaultProps.maxValue,\n    valueFormat,\n    legendFormat,\n\n    monthLegend = timeRangeDefaultProps.monthLegend,\n    monthLegendOffset = timeRangeDefaultProps.monthLegendOffset,\n    monthLegendPosition = timeRangeDefaultProps.monthLegendPosition,\n\n    weekdayLegendOffset = timeRangeDefaultProps.weekdayLegendOffset,\n    weekdayTicks,\n\n    dayBorderColor = timeRangeDefaultProps.dayBorderColor,\n    dayBorderWidth = timeRangeDefaultProps.dayBorderWidth,\n    daySpacing = timeRangeDefaultProps.daySpacing,\n    dayRadius = timeRangeDefaultProps.dayRadius,\n\n    isInteractive = timeRangeDefaultProps.isInteractive,\n    tooltip = timeRangeDefaultProps.tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n\n    legends = timeRangeDefaultProps.legends,\n    role = timeRangeDefaultProps.role,\n\n    firstWeekday = timeRangeDefaultProps.firstWeekday,\n}: TimeRangeSvgProps) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const data = useMemo(\n        () =>\n            _data\n                .map(data => ({ ...data, date: new Date(`${data.day}T00:00:00`) }))\n                .sort((left, right) => left.day.localeCompare(right.day)),\n        [_data]\n    )\n\n    const theme = useTheme()\n    const colorScaleFn = useColorScale({ data, minValue, maxValue, colors, colorScale })\n\n    const totalDays = computeTotalDays({\n        from,\n        to,\n        data,\n    })\n\n    const { cellHeight, cellWidth } = computeCellSize({\n        square,\n        offset: weekdayLegendOffset,\n        totalDays: totalDays,\n        width: innerWidth,\n        height: innerHeight,\n        daySpacing,\n        direction,\n    })\n\n    const days = computeCellPositions({\n        offset: weekdayLegendOffset,\n        colorScale: colorScaleFn,\n        emptyColor,\n        cellHeight,\n        cellWidth,\n        from,\n        to,\n        data,\n        direction,\n        daySpacing,\n        firstWeekday,\n    })\n\n    // map the days and reduce the month\n    const months = Object.values(\n        computeMonthLegends({\n            daySpacing,\n            direction,\n            cellHeight,\n            cellWidth,\n            days,\n        }).months\n    )\n\n    const weekdayLegends = computeWeekdays({\n        direction,\n        cellHeight,\n        cellWidth,\n        daySpacing,\n        ticks: weekdayTicks,\n        firstWeekday,\n    })\n\n    const monthLegends = useMonthLegends({\n        months,\n        direction,\n        monthLegendPosition,\n        monthLegendOffset,\n    })\n\n    const formatValue = useValueFormatter(valueFormat)\n    const formatLegend = useValueFormatter(legendFormat)\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {weekdayLegends.map(legend => (\n                <text\n                    key={legend.value}\n                    transform={`translate(${legend.x},${legend.y}) rotate(${legend.rotation})`}\n                    textAnchor=\"left\"\n                    style={theme.labels.text}\n                >\n                    {legend.value}\n                </text>\n            ))}\n            {days.map(d => {\n                return (\n                    <TimeRangeDay\n                        key={d.date.toString()}\n                        data={d}\n                        x={d.coordinates.x}\n                        rx={dayRadius}\n                        y={d.coordinates.y}\n                        ry={dayRadius}\n                        width={cellWidth}\n                        height={cellHeight}\n                        color={d.color}\n                        borderWidth={dayBorderWidth}\n                        borderColor={dayBorderColor}\n                        onMouseEnter={onMouseEnter}\n                        onMouseLeave={onMouseLeave}\n                        onMouseMove={onMouseMove}\n                        isInteractive={isInteractive}\n                        tooltip={tooltip}\n                        onClick={onClick}\n                        formatValue={formatValue}\n                    />\n                )\n            })}\n            <CalendarMonthLegends months={monthLegends} legend={monthLegend} theme={theme} />\n\n            {legends.map((legend, i) => {\n                const legendData = colorScaleFn.ticks(legend.itemCount).map(value => ({\n                    id: value,\n                    label: formatLegend(value),\n                    color: colorScaleFn(value),\n                }))\n\n                return (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={width}\n                        containerHeight={height}\n                        data={legendData}\n                    />\n                )\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const TimeRange = ({\n    isInteractive = timeRangeDefaultProps.isInteractive,\n    renderWrapper,\n    theme,\n    ...props\n}: TimeRangeSvgProps) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerTimeRange isInteractive={isInteractive} {...props} />\n    </Container>\n)\n","import { memo, useRef, useState, useEffect, useCallback, MouseEvent } from 'react'\nimport * as React from 'react'\nimport {\n    Box,\n    Container,\n    isCursorInRect,\n    getRelativeCursor,\n    degreesToRadians,\n    useDimensions,\n    useTheme,\n    useValueFormatter,\n} from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { calendarCanvasDefaultProps } from './props'\nimport { useCalendarLayout, useColorScale, useMonthLegends, useYearLegends, useDays } from './hooks'\nimport { useTooltip } from '@nivo/tooltip'\nimport { CalendarCanvasProps } from './types'\n\nconst findDayUnderCursor = (\n    event: React.MouseEvent,\n    canvasEl: HTMLCanvasElement,\n    days: ReturnType<typeof useDays>,\n    size: number,\n    dayBorderWidth: number,\n    margin: Required<Box>\n) => {\n    const [x, y] = getRelativeCursor(canvasEl, event)\n    return days.find(day => {\n        return (\n            'value' in day &&\n            isCursorInRect(\n                day.x + margin.left - dayBorderWidth / 2,\n                day.y + margin.top - dayBorderWidth / 2,\n                size + dayBorderWidth,\n                size + dayBorderWidth,\n                x,\n                y\n            )\n        )\n    })\n}\n\nconst InnerCalendarCanvas = memo(\n    ({\n        margin: partialMargin,\n        width,\n        height,\n        pixelRatio = calendarCanvasDefaultProps.pixelRatio,\n\n        align = calendarCanvasDefaultProps.align,\n        colors = calendarCanvasDefaultProps.colors,\n        colorScale,\n        data,\n        direction = calendarCanvasDefaultProps.direction,\n        emptyColor = calendarCanvasDefaultProps.emptyColor,\n        from,\n        to,\n        minValue = calendarCanvasDefaultProps.minValue,\n        maxValue = calendarCanvasDefaultProps.maxValue,\n        valueFormat,\n        legendFormat,\n\n        yearLegend = calendarCanvasDefaultProps.yearLegend,\n        yearLegendOffset = calendarCanvasDefaultProps.yearLegendOffset,\n        yearLegendPosition = calendarCanvasDefaultProps.yearLegendPosition,\n        yearSpacing = calendarCanvasDefaultProps.yearSpacing,\n\n        monthLegend = calendarCanvasDefaultProps.monthLegend,\n        monthLegendOffset = calendarCanvasDefaultProps.monthLegendOffset,\n        monthLegendPosition = calendarCanvasDefaultProps.monthLegendPosition,\n        monthSpacing = calendarCanvasDefaultProps.monthSpacing,\n\n        dayBorderColor = calendarCanvasDefaultProps.dayBorderColor,\n        dayBorderWidth = calendarCanvasDefaultProps.dayBorderWidth,\n        daySpacing = calendarCanvasDefaultProps.daySpacing,\n\n        isInteractive = calendarCanvasDefaultProps.isInteractive,\n        tooltip = calendarCanvasDefaultProps.tooltip,\n        onClick,\n        onMouseEnter,\n        onMouseLeave,\n        onMouseMove,\n\n        legends = calendarCanvasDefaultProps.legends,\n    }: CalendarCanvasProps) => {\n        const canvasEl = useRef<HTMLCanvasElement | null>(null)\n        const { innerWidth, innerHeight, outerWidth, outerHeight, margin } = useDimensions(\n            width,\n            height,\n            partialMargin\n        )\n        const { months, years, ...rest } = useCalendarLayout({\n            width: innerWidth,\n            height: innerHeight,\n            from,\n            to,\n            direction,\n            yearSpacing,\n            monthSpacing,\n            daySpacing,\n            align,\n        })\n        const colorScaleFn = useColorScale({ data, minValue, maxValue, colors, colorScale })\n        const monthLegends = useMonthLegends({\n            months,\n            direction,\n            monthLegendPosition,\n            monthLegendOffset,\n        })\n        const yearLegends = useYearLegends({\n            years,\n            direction,\n            yearLegendPosition,\n            yearLegendOffset,\n        })\n        const days = useDays({ days: rest.days, data, colorScale: colorScaleFn, emptyColor })\n        const [currentDay, setCurrentDay] = useState<ReturnType<typeof useDays>[number] | null>(\n            null\n        )\n        const theme = useTheme()\n        const formatValue = useValueFormatter(valueFormat)\n        const formatLegend = useValueFormatter(legendFormat)\n\n        const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n        useEffect(() => {\n            if (!canvasEl.current) return\n\n            canvasEl.current.width = outerWidth * pixelRatio\n            canvasEl.current.height = outerHeight * pixelRatio\n\n            const ctx = canvasEl.current.getContext('2d')\n\n            if (!ctx) return\n\n            ctx.scale(pixelRatio, pixelRatio)\n\n            ctx.fillStyle = theme.background\n            ctx.fillRect(0, 0, outerWidth, outerHeight)\n            ctx.translate(margin.left, margin.top)\n\n            days.forEach(day => {\n                ctx.fillStyle = day.color\n                if (dayBorderWidth > 0) {\n                    ctx.strokeStyle = dayBorderColor\n                    ctx.lineWidth = dayBorderWidth\n                }\n\n                ctx.beginPath()\n                ctx.rect(day.x, day.y, day.size, day.size)\n                ctx.fill()\n\n                if (dayBorderWidth > 0) {\n                    ctx.stroke()\n                }\n            })\n\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'middle'\n            ctx.fillStyle = theme.labels.text.fill ?? ''\n            ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n            monthLegends.forEach(month => {\n                ctx.save()\n                ctx.translate(month.x, month.y)\n                ctx.rotate(degreesToRadians(month.rotation))\n                ctx.fillText(String(monthLegend(month.year, month.month, month.date)), 0, 0)\n                ctx.restore()\n            })\n\n            yearLegends.forEach(year => {\n                ctx.save()\n                ctx.translate(year.x, year.y)\n                ctx.rotate(degreesToRadians(year.rotation))\n                ctx.fillText(String(yearLegend(year.year)), 0, 0)\n                ctx.restore()\n            })\n\n            legends.forEach(legend => {\n                const legendData = colorScaleFn.ticks(legend.itemCount).map(value => ({\n                    id: value,\n                    label: formatLegend(value),\n                    color: colorScaleFn(value),\n                }))\n\n                renderLegendToCanvas(ctx, {\n                    ...legend,\n                    data: legendData,\n                    containerWidth: innerWidth,\n                    containerHeight: innerHeight,\n                    theme,\n                })\n            })\n        }, [\n            canvasEl,\n            innerHeight,\n            innerWidth,\n            outerWidth,\n            outerHeight,\n            pixelRatio,\n            margin,\n            days,\n            dayBorderColor,\n            dayBorderWidth,\n            colorScale,\n            yearLegend,\n            yearLegends,\n            monthLegend,\n            monthLegends,\n            legends,\n            theme,\n            formatLegend,\n            colorScaleFn,\n        ])\n\n        const handleMouseHover = useCallback(\n            (event: MouseEvent<HTMLCanvasElement>) => {\n                if (!canvasEl.current) return\n\n                const data = findDayUnderCursor(\n                    event,\n                    canvasEl.current,\n                    days,\n                    days[0].size,\n                    dayBorderWidth,\n                    margin\n                )\n\n                if (data) {\n                    setCurrentDay(data)\n\n                    if (!('value' in data)) {\n                        return\n                    }\n\n                    const formatedData = {\n                        ...data,\n                        value: formatValue(data.value),\n                        data: { ...data.data },\n                    }\n                    showTooltipFromEvent(React.createElement(tooltip, { ...formatedData }), event)\n                    !currentDay && onMouseEnter?.(data, event)\n                    onMouseMove?.(data, event)\n                    currentDay && onMouseLeave?.(data, event)\n                } else {\n                    hideTooltip()\n                    data && onMouseLeave?.(data, event)\n                }\n            },\n            [\n                canvasEl,\n                currentDay,\n                margin,\n                days,\n                setCurrentDay,\n                formatValue,\n                dayBorderWidth,\n                showTooltipFromEvent,\n                hideTooltip,\n                onMouseEnter,\n                onMouseMove,\n                onMouseLeave,\n                tooltip,\n            ]\n        )\n\n        const handleMouseLeave = useCallback(() => {\n            setCurrentDay(null)\n            hideTooltip()\n        }, [setCurrentDay, hideTooltip])\n\n        const handleClick = useCallback(\n            (event: MouseEvent<HTMLCanvasElement>) => {\n                if (!onClick || !canvasEl.current) return\n\n                const data = findDayUnderCursor(\n                    event,\n                    canvasEl.current,\n                    days,\n                    days[0].size,\n                    daySpacing,\n                    margin\n                )\n\n                data && onClick(data, event)\n            },\n            [canvasEl, daySpacing, margin, days, onClick]\n        )\n\n        return (\n            <canvas\n                ref={canvasEl}\n                width={outerWidth * pixelRatio}\n                height={outerHeight * pixelRatio}\n                style={{\n                    width: outerWidth,\n                    height: outerHeight,\n                }}\n                onMouseEnter={isInteractive ? handleMouseHover : undefined}\n                onMouseMove={isInteractive ? handleMouseHover : undefined}\n                onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                onClick={isInteractive ? handleClick : undefined}\n            />\n        )\n    }\n)\n\nexport const CalendarCanvas = ({\n    isInteractive = calendarCanvasDefaultProps.isInteractive,\n    renderWrapper,\n    theme,\n    ...props\n}: CalendarCanvasProps) => (\n    <Container {...{ isInteractive, renderWrapper, theme }}>\n        <InnerCalendarCanvas isInteractive={isInteractive} {...props} />\n    </Container>\n)\n","import { Calendar } from './Calendar'\nimport { CalendarSvgProps } from './types'\nimport { ResponsiveWrapper } from '@nivo/core'\n\nexport const ResponsiveCalendar = (props: Omit<CalendarSvgProps, 'height' | 'width'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Calendar width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { CalendarCanvas } from './CalendarCanvas'\nimport { CalendarCanvasProps } from './types'\n\nexport const ResponsiveCalendarCanvas = (props: Omit<CalendarCanvasProps, 'width' | 'height'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <CalendarCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { TimeRange } from './TimeRange'\nimport { TimeRangeSvgProps } from './types'\n\nexport const ResponsiveTimeRange = (props: Omit<TimeRangeSvgProps, 'height' | 'width'>) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <TimeRange width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["CalendarYearLegends","memo","_ref","years","legend","theme","_jsx","_Fragment","children","map","year","transform","x","y","rotation","textAnchor","style","labels","text","CalendarMonthPath","path","borderWidth","borderColor","d","fill","strokeWidth","stroke","pointerEvents","CalendarMonthLegends","months","month","date","toString","CalendarDay","data","size","color","isInteractive","tooltip","onMouseEnter","onMouseMove","onMouseLeave","onClick","formatValue","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","useCallback","event","formatedData","_extends","value","React","createElement","handleMouseMove","handleMouseLeave","handleClick","width","height","undefined","CalendarTooltip","day","isNaN","Number","BasicTooltip","id","enableChip","monthLabelFormat","timeFormat","commonDefaultProps","colors","align","direction","emptyColor","minValue","maxValue","yearSpacing","yearLegend","yearLegendPosition","yearLegendOffset","monthBorderWidth","monthBorderColor","monthSpacing","monthLegend","_year","_month","monthLegendPosition","monthLegendOffset","daySpacing","dayBorderWidth","dayBorderColor","legends","calendarDefaultProps","role","calendarCanvasDefaultProps","pixelRatio","window","_window$devicePixelRa","devicePixelRatio","timeRangeDefaultProps","dayRadius","square","weekdayLegendOffset","firstWeekday","computeDomain","minSpec","maxSpec","allValues","Math","min","apply","max","memoMonthPathAndBBox","memoize","_ref2","cellSize","yearIndex","originX","originY","t1","Date","getFullYear","getMonth","firstWeek","timeWeek","count","timeYear","lastWeek","firstDay","getDay","lastDay","xO","yO","yearOffset","monthOffset","bbox","join","_ref3","dayFormat","computeLayout","_ref4","cellPosition","from","to","fromDate","isDate","toDate","yearRange","range","maxWeeks","timeWeeks","length","hCellSize","vCellSize","computeCellSize","monthsSize","yearsSize","calendarWidth","calendarHeight","_alignBox","alignBox","cellPositionHorizontal","weekOfYear","cellPositionVertical","days","forEach","i","yearStart","yearEnd","concat","timeDays","dayDate","yearMonths","timeMonths","monthDate","push","bindDaysData","_ref5","colorScale","dayData","find","item","computeYearLegendPositions","_ref6","position","offset","computeMonthLegendPositions","_ref7","useCalendarLayout","useMemo","useColorScale","domain","scaleQuantize","useYearLegends","useMonthLegends","useDays","InnerCalendar","partialMargin","margin","_ref$align","_ref$colors","_ref$direction","_ref$emptyColor","_ref$minValue","_ref$maxValue","valueFormat","legendFormat","_ref$yearLegend","_ref$yearLegendOffset","_ref$yearLegendPositi","_ref$yearSpacing","_ref$monthBorderColor","_ref$monthBorderWidth","_ref$monthLegend","_ref$monthLegendOffse","_ref$monthLegendPosit","_ref$monthSpacing","_ref$dayBorderColor","_ref$dayBorderWidth","_ref$daySpacing","_ref$isInteractive","_ref$tooltip","_ref$legends","_ref$role","useTheme","_useDimensions","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","_useCalendarLayout","rest","_objectWithoutPropertiesLoose","_excluded","colorScaleFn","monthLegends","yearLegends","formatLegend","useValueFormatter","_jsxs","SvgWrapper","m","jsx","legendData","ticks","itemCount","label","BoxLegendSvg","containerWidth","containerHeight","Calendar","_ref2$isInteractive","renderWrapper","props","_excluded2","Container","rows","columns","totalDays","widthRest","heightRest","ceil","cellHeight","cellWidth","ARRAY_OF_WEEKDAYS","getFirstWeekdayIndex","weekday","findIndex","toLowerCase","getDayIndex","offsetDay","slice","computeGrid","startDate","timeInterval","timeSunday","timeMonday","timeTuesday","timeWednesday","timeThursday","timeFriday","timeSaturday","getTimeInterval","currentColumn","currentRow","computeCellPositions","start","end","endDate","_computeGrid","coordinates","computeWeekdays","_ref4$ticks","_ref4$arrayOfWeekdays","arrayOfWeekdays","shiftArray","arr","shifted","shift","sizes","computeMonthLegends","reduce","acc","weeks","key","Object","keys","includes","computeTotalDays","timeDay","TimeRangeDay","_ref$ry","ry","_ref$rx","rx","InnerTimeRange","_ref$square","_data","_ref$weekdayLegendOff","weekdayTicks","_ref$dayRadius","_ref$firstWeekday","sort","left","right","localeCompare","_computeCellSize","values","weekdayLegends","TimeRange","findDayUnderCursor","canvasEl","_getRelativeCursor","getRelativeCursor","isCursorInRect","top","InnerCalendarCanvas","_ref$pixelRatio","useRef","_useState","useState","currentDay","setCurrentDay","useEffect","_theme$labels$text$fi","current","ctx","getContext","scale","fillStyle","background","fillRect","translate","strokeStyle","lineWidth","beginPath","rect","textAlign","textBaseline","font","fontSize","fontFamily","save","rotate","degreesToRadians","fillText","String","restore","renderLegendToCanvas","handleMouseHover","ref","CalendarCanvas","ResponsiveWrapper"],"mappings":"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"}