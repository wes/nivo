{"version":3,"file":"nivo-axes.cjs.js","sources":["../src/compute.ts","../src/components/AxisTick.tsx","../src/components/Axis.tsx","../src/props.ts","../src/components/Axes.tsx","../src/components/GridLine.tsx","../src/components/GridLines.tsx","../src/components/Grid.tsx","../src/canvas.ts"],"sourcesContent":["import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map((value: Value) => ({\n        key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n","import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n    const lineStyle = theme.axis.ticks.line\n    const textStyle = theme.axis.ticks.text\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={lineStyle} />\n            {textStyle.outlineWidth > 0 && (\n                <animated.text\n                    dominantBaseline={textBaseline}\n                    textAnchor={textAnchor}\n                    transform={animatedProps.textTransform}\n                    style={textStyle}\n                    strokeWidth={textStyle.outlineWidth * 2}\n                    stroke={textStyle.outlineColor}\n                    strokeLinejoin=\"round\"\n                >\n                    {`${value}`}\n                </animated.text>\n            )}\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={textStyle}\n            >\n                {`${value}`}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n","import { useMemo, memo, useCallback } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nexport const NonMemoizedAxis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n    const legendTextStyle = theme.axis.legend.text\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <>\n                {legendTextStyle.outlineWidth > 0 && (\n                    <text\n                        transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                        textAnchor={textAnchor}\n                        style={{\n                            dominantBaseline: 'central',\n                            ...legendTextStyle,\n                        }}\n                        strokeWidth={legendTextStyle.outlineWidth * 2}\n                        stroke={legendTextStyle.outlineColor}\n                        strokeLinejoin=\"round\"\n                    >\n                        {legend}\n                    </text>\n                )}\n                <text\n                    transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                    textAnchor={textAnchor}\n                    style={{\n                        dominantBaseline: 'central',\n                        ...legendTextStyle,\n                    }}\n                >\n                    {legend}\n                </text>\n            </>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const getAnimatedProps = useCallback(\n        (tick: (typeof ticks)[0]) => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        [tickRotation]\n    )\n    const getFromAnimatedProps = useCallback(\n        (tick: (typeof ticks)[0]) => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        [tickRotation]\n    )\n\n    const transition = useTransition<\n        (typeof ticks)[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: getAnimatedProps,\n        from: getFromAnimatedProps,\n        enter: getAnimatedProps,\n        update: getAnimatedProps,\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nexport const Axis = memo(NonMemoizedAxis) as typeof NonMemoizedAxis\n","import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n","import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n","import { memo, SVGAttributes } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return (\n            <animated.line\n                {...animatedProps}\n                {...(theme.grid.line as SVGAttributes<SVGLineElement>)}\n            />\n        )\n    }\n)\n","import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n","import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n","import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProps, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n\n    const textStyle = theme.axis.ticks.text\n    ctx.font = `${textStyle.fontWeight ? `${textStyle.fontWeight} ` : ''}${textStyle.fontSize}px ${\n        textStyle.fontFamily\n    }`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (textStyle.outlineWidth > 0) {\n            ctx.strokeStyle = textStyle.outlineColor\n            ctx.lineWidth = textStyle.outlineWidth * 2\n            ctx.lineJoin = 'round'\n            ctx.strokeText(`${value}`, 0, 0)\n        }\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = textStyle.fill\n        }\n\n        ctx.fillText(`${value}`, 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProps<X> | null\n        right?: CanvasAxisProps<Y> | null\n        bottom?: CanvasAxisProps<X> | null\n        left?: CanvasAxisProps<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProps<X> | undefined\n            : CanvasAxisProps<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n"],"names":["computeCartesianTicks","_ref","translate","axis","scale","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","_ref$engine","engine","values","getScaleTicks","textProps","textPropsByEngine","position","centerScale","line","lineX","lineY","text","textX","textY","isRTL","document","dir","textAlign","align","center","textBaseline","baseline","d","_position","x","y","top","bottom","_position2","left","right","ticks","map","value","_extends","key","Date","valueOf","getFormatter","format","type","formatter","timeFormat","d3Format","computeGridLines","_ref2","width","height","_values","Array","isArray","undefined","lines","_position3","_position4","x1","x2","y1","y2","_position5","_position6","memoizedAxisTick","memo","_format","_value","onClick","textAnchor","animatedProps","theme","useTheme","lineStyle","textStyle","props","useMemo","style","opacity","cursor","event","_jsxs","animated","g","transform","children","_jsx","jsx","outlineWidth","dominantBaseline","textTransform","strokeWidth","stroke","outlineColor","strokeLinejoin","NonMemoizedAxis","_ref$x","_ref$y","length","_ref$tickSize","_ref$tickPadding","_ref$tickRotation","_ref$renderTick","renderTick","AxisTick","legend","_ref$legendPosition","legendPosition","_ref$legendOffset","legendOffset","ariaHidden","legendTextStyle","formatValue","_computeCartesianTick","legendNode","legendX","legendY","legendRotation","jsxs","_Fragment","_useMotionConfig","useMotionConfig","animate","springConfig","config","useSpring","lineX2","lineY2","immediate","getAnimatedProps","useCallback","tick","getFromAnimatedProps","transition","useTransition","keys","initial","from","enter","update","leave","transitionProps","_state","tickIndex","React","createElement","rotate","domain","Axis","axisPropTypes","PropTypes","oneOf","oneOfType","number","arrayOf","string","instanceOf","func","node","bool","axisPropType","shape","positions","Axes","xScale","yScale","axes","isXAxis","GridLine","grid","GridLines","_createElement","Grid","xValues","yValues","xLines","yLines","renderAxisToCanvas","ctx","_theme$axis$domain$li","save","font","fontWeight","fontSize","fontFamily","lineWidth","Number","lineCap","strokeStyle","beginPath","moveTo","lineTo","forEach","_theme$axis$ticks$lin","degreesToRadians","lineJoin","strokeText","fill","fillStyle","fillText","restore","_ref3"],"mappings":"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"}