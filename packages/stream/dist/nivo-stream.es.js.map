{"version":3,"file":"nivo-stream.es.js","sources":["../src/StreamLayer.tsx","../src/StreamLayers.tsx","../src/StreamDots.tsx","../src/StreamSlicesItem.tsx","../src/StreamSlices.tsx","../src/props.ts","../src/StreamDotsItem.tsx","../src/LayerTooltip.tsx","../src/StackTooltip.tsx","../src/Stream.tsx","../src/hooks.ts","../src/ResponsiveStream.tsx"],"sourcesContent":["import { useCallback, createElement, MouseEvent } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { InheritedColorConfigCustomFunction } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { StreamCommonProps, StreamDatum, StreamLayerData } from './types'\n\ninterface StreamLayerProps<RawDatum extends StreamDatum> {\n    layer: StreamLayerData\n    fillOpacity: number\n    borderWidth: number\n    getBorderColor: InheritedColorConfigCustomFunction<StreamLayerData>\n    isInteractive: boolean\n    tooltip: StreamCommonProps<RawDatum>['tooltip']\n}\n\nexport const StreamLayer = <RawDatum extends StreamDatum>({\n    layer,\n    fillOpacity,\n    borderWidth,\n    getBorderColor,\n    isInteractive,\n    tooltip,\n}: StreamLayerProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseHover = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { layer }), event, 'left')\n        },\n        [showTooltipFromEvent, layer]\n    )\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedPath = useAnimatedPath(layer.path)\n    const animatedProps = useSpring({\n        color: layer.color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={layer.fill ? layer.fill : animatedProps.color}\n            fillOpacity={fillOpacity}\n            stroke={getBorderColor(layer)}\n            strokeWidth={borderWidth}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? hideTooltip : undefined}\n        />\n    )\n}\n","import { InheritedColorConfigCustomFunction } from '@nivo/colors'\nimport { StreamLayer } from './StreamLayer'\nimport { StreamCommonProps, StreamLayerData, StreamDatum } from './types'\n\ninterface StreamLayersProps<RawDatum extends StreamDatum> {\n    layers: StreamLayerData[]\n    fillOpacity: number\n    borderWidth: number\n    getBorderColor: InheritedColorConfigCustomFunction<StreamLayerData>\n    isInteractive: boolean\n    tooltip: StreamCommonProps<RawDatum>['tooltip']\n}\n\nexport const StreamLayers = <RawDatum extends StreamDatum>({\n    layers,\n    fillOpacity,\n    borderWidth,\n    getBorderColor,\n    isInteractive,\n    tooltip,\n}: StreamLayersProps<RawDatum>) => (\n    <g>\n        {layers.map((layer, i) => (\n            <StreamLayer<RawDatum>\n                key={i}\n                layer={layer}\n                getBorderColor={getBorderColor}\n                borderWidth={borderWidth}\n                fillOpacity={fillOpacity}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n            />\n        ))}\n    </g>\n)\n","import { createElement } from 'react'\nimport { StreamSvgProps, StreamLayerDatum, StreamDatum } from './types'\n\ninterface StreamDotsProps<RawDatum extends StreamDatum> {\n    id: string | number\n    color: string\n    data: StreamLayerDatum[]\n    dotComponent: Exclude<StreamSvgProps<RawDatum>['dotComponent'], undefined>\n    position: 'start' | 'center' | 'end'\n    getSize: (datum: StreamLayerDatum) => number\n    getColor: (datum: StreamLayerDatum) => string\n    getBorderWidth: (datum: StreamLayerDatum) => number\n    getBorderColor: (datum: StreamLayerDatum) => string\n}\n\nconst getDotY = <RawDatum extends StreamDatum>(\n    datum: StreamLayerDatum,\n    position: StreamDotsProps<RawDatum>['position']\n) => {\n    let y = datum.y2\n    if (position === 'center') {\n        y = datum.y1 + (datum.y2 - datum.y1) / 2\n    } else if (position === 'start') {\n        y = datum.y1\n    }\n\n    return y\n}\n\nexport const StreamDots = <RawDatum extends StreamDatum>({\n    data,\n    dotComponent,\n    position,\n    getSize,\n    getColor,\n    getBorderWidth,\n    getBorderColor,\n}: StreamDotsProps<RawDatum>) => (\n    <>\n        {data.map((datum, i) => {\n            return createElement(dotComponent, {\n                key: i,\n                datum,\n                x: datum.x,\n                y: getDotY<RawDatum>(datum, position),\n                size: getSize(datum),\n                color: getColor(datum),\n                borderWidth: getBorderWidth(datum),\n                borderColor: getBorderColor(datum),\n            })\n        })}\n    </>\n)\n","import { createElement, useCallback, useState, MouseEvent } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { StreamCommonProps, StreamDatum, StreamSliceData } from './types'\n\ninterface StreamSlicesItemProps<RawDatum extends StreamDatum> {\n    slice: StreamSliceData\n    height: number\n    tooltip: StreamCommonProps<RawDatum>['stackTooltip']\n}\n\nexport const StreamSlicesItem = <RawDatum extends StreamDatum>({\n    slice,\n    height,\n    tooltip,\n}: StreamSlicesItemProps<RawDatum>) => {\n    const [isHover, setIsHover] = useState(false)\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            setIsHover(true)\n            showTooltipFromEvent(createElement(tooltip, { slice }), event, 'left')\n        },\n        [setIsHover, showTooltipFromEvent, tooltip, slice]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        setIsHover(false)\n        hideTooltip()\n    }, [setIsHover, hideTooltip])\n\n    return (\n        <g transform={`translate(${slice.x}, 0)`}>\n            {isHover && (\n                <line\n                    x1={0}\n                    x2={0}\n                    y1={0}\n                    y2={height}\n                    stroke=\"#000\"\n                    strokeOpacity={0.35}\n                    strokeWidth={1}\n                />\n            )}\n            <rect\n                x={-20}\n                width={40}\n                height={height}\n                fill=\"#000\"\n                fillOpacity={0}\n                onMouseEnter={handleMouseHover}\n                onMouseMove={handleMouseHover}\n                onMouseLeave={handleMouseLeave}\n            />\n        </g>\n    )\n}\n","import { StreamSliceData, StreamDatum, StreamCommonProps } from './types'\nimport { StreamSlicesItem } from './StreamSlicesItem'\n\ninterface StreamSlicesProps<RawDatum extends StreamDatum> {\n    slices: StreamSliceData[]\n    height: number\n    tooltip: StreamCommonProps<RawDatum>['stackTooltip']\n}\n\nexport const StreamSlices = <RawDatum extends StreamDatum>({\n    slices,\n    height,\n    tooltip,\n}: StreamSlicesProps<RawDatum>) => (\n    <g>\n        {slices.map(slice => (\n            <StreamSlicesItem<RawDatum>\n                key={slice.index}\n                slice={slice}\n                height={height}\n                tooltip={tooltip}\n            />\n        ))}\n    </g>\n)\n","import { StackOrder, StackOffset, AreaCurve } from '@nivo/core'\nimport { StreamCommonProps, StreamLayerId } from './types'\nimport { StreamDotsItem } from './StreamDotsItem'\nimport { LayerTooltip } from './LayerTooltip'\nimport { StackTooltip } from './StackTooltip'\n\nexport const defaultProps = {\n    label: 'id',\n\n    order: 'none' as StackOrder,\n    offsetType: 'wiggle' as StackOffset,\n    curve: 'catmullRom' as AreaCurve,\n\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: false,\n    enableGridY: true,\n\n    colors: { scheme: 'nivo' } as StreamCommonProps<any>['colors'],\n    fillOpacity: 1,\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    } as StreamCommonProps<any>['borderColor'],\n\n    enableDots: false,\n    dotPosition: 'center' as StreamCommonProps<any>['dotPosition'],\n    dotComponent: StreamDotsItem,\n    dotSize: 6,\n    dotColor: { from: 'color' },\n    dotBorderWidth: 0,\n    dotBorderColor: { from: 'color' },\n\n    isInteractive: true,\n    tooltip: LayerTooltip,\n    enableStackTooltip: true,\n    stackTooltip: StackTooltip,\n\n    legends: [],\n    legendLabel: 'id',\n\n    role: 'application',\n}\n\nexport const svgDefaultProps = {\n    ...defaultProps,\n    layers: ['grid', 'axes', 'layers', 'dots', 'slices', 'legends'] as StreamLayerId[],\n\n    defs: [],\n    fill: [],\n\n    animate: true,\n    motionConfig: 'default',\n\n    role: 'img',\n    isFocusable: false,\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\n\nexport interface StreamDotsItemProps {\n    x: number\n    y: number\n    size: number\n    color: string\n    borderWidth: number\n    borderColor: string\n}\n\nexport const StreamDotsItem = ({\n    x,\n    y,\n    size,\n    color,\n    borderWidth,\n    borderColor,\n}: StreamDotsItemProps) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedProps = useSpring({\n        x,\n        y,\n        radius: size * 0.5,\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            cx={animatedProps.x}\n            cy={animatedProps.y}\n            r={animatedProps.radius}\n            fill={animatedProps.color}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n        />\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { TooltipProps } from './types'\n\nexport const LayerTooltip = ({ layer }: TooltipProps) => (\n    <BasicTooltip id={layer.label} enableChip={true} color={layer.color} />\n)\n","import { useMemo } from 'react'\nimport { TableTooltip, Chip } from '@nivo/tooltip'\nimport { StackTooltipProps } from './types'\n\nexport const StackTooltip = ({ slice }: StackTooltipProps) => {\n    const rows = useMemo(\n        () =>\n            slice.stack.map(p => [\n                <Chip key={p.layerId} color={p.color} />,\n                p.layerLabel,\n                p.formattedValue,\n            ]),\n        [slice]\n    )\n\n    return <TableTooltip rows={rows} />\n}\n","import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    Container,\n    SvgWrapper,\n    useDimensions,\n    // @ts-ignore\n    bindDefs,\n} from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { StreamLayers } from './StreamLayers'\nimport { StreamDots } from './StreamDots'\nimport { StreamSlices } from './StreamSlices'\nimport { useStream } from './hooks'\nimport { svgDefaultProps } from './props'\nimport { StreamDatum, StreamLayerId, StreamSvgProps } from './types'\n\ntype InnerStreamProps<RawDatum extends StreamDatum> = Omit<\n    StreamSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerStream = <RawDatum extends StreamDatum>({\n    data,\n    keys,\n    label,\n    valueFormat,\n\n    offsetType,\n    order,\n    curve,\n\n    layers: chartLayers = svgDefaultProps.layers,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n\n    colors,\n    fillOpacity = svgDefaultProps.fillOpacity,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n\n    enableDots = svgDefaultProps.enableDots,\n    dotPosition = svgDefaultProps.dotPosition,\n    dotComponent = svgDefaultProps.dotComponent,\n    dotSize,\n    dotColor,\n    dotBorderWidth,\n    dotBorderColor,\n\n    isInteractive = svgDefaultProps.isInteractive,\n    tooltip = svgDefaultProps.tooltip,\n    enableStackTooltip = svgDefaultProps.enableStackTooltip,\n    stackTooltip = svgDefaultProps.stackTooltip,\n\n    legends = svgDefaultProps.legends,\n\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerStreamProps<RawDatum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        xScale,\n        yScale,\n        layers,\n        slices,\n        getBorderColor,\n        getDotSize,\n        getDotColor,\n        getDotBorderWidth,\n        getDotBorderColor,\n        layerContext,\n    } = useStream<RawDatum>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        keys,\n        label,\n        valueFormat,\n        offsetType,\n        order,\n        curve,\n        colors,\n        borderColor,\n        dotSize,\n        dotColor,\n        dotBorderWidth,\n        dotBorderColor,\n    })\n\n    const boundDefs = bindDefs(defs, layers, fill)\n\n    const layerById: Record<StreamLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        layers: null,\n        dots: null,\n        slices: null,\n        legends: null,\n    }\n\n    if (chartLayers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n        )\n    }\n\n    if (chartLayers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (chartLayers.includes('layers')) {\n        layerById.layers = (\n            <StreamLayers<RawDatum>\n                key=\"layers\"\n                layers={layers}\n                fillOpacity={fillOpacity}\n                borderWidth={borderWidth}\n                getBorderColor={getBorderColor}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    if (chartLayers.includes('dots') && enableDots) {\n        layerById.dots = (\n            <Fragment key=\"dots\">\n                {layers.map(layer => (\n                    <StreamDots\n                        key={layer.id}\n                        id={layer.id}\n                        color={layer.color}\n                        data={layer.data}\n                        dotComponent={dotComponent}\n                        position={dotPosition}\n                        getSize={getDotSize}\n                        getColor={getDotColor}\n                        getBorderWidth={getDotBorderWidth}\n                        getBorderColor={getDotBorderColor}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (chartLayers.includes('slices') && isInteractive && enableStackTooltip) {\n        layerById.slices = (\n            <StreamSlices<RawDatum>\n                key=\"slices\"\n                slices={slices}\n                height={innerHeight}\n                tooltip={stackTooltip}\n            />\n        )\n    }\n\n    if (chartLayers.includes('legends')) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {legends.map((legend, i) => {\n                    const legendData = layers\n                        .map(layer => ({\n                            id: layer.id,\n                            label: layer.label,\n                            color: layer.color,\n                            fill: layer.fill,\n                        }))\n                        .reverse()\n\n                    return (\n                        <BoxLegendSvg\n                            key={i}\n                            {...legend}\n                            containerWidth={innerWidth}\n                            containerHeight={innerHeight}\n                            data={legendData}\n                        />\n                    )\n                })}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {chartLayers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Stream = <RawDatum extends StreamDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: StreamSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerStream<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { useMemo } from 'react'\nimport { area, stack as d3Stack } from 'd3-shape'\nimport {\n    useTheme,\n    usePropertyAccessor,\n    useValueFormatter,\n    useCurveInterpolation,\n    // @ts-ignore\n    stackOrderFromProp,\n    // @ts-ignore\n    stackOffsetFromProp,\n} from '@nivo/core'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport {\n    StreamCommonProps,\n    StreamCustomLayerProps,\n    StreamDataProps,\n    StreamDatum,\n    StreamLayerData,\n    StreamLayerDatum,\n    StreamSliceData,\n} from './types'\nimport { defaultProps } from './props'\nimport { createLinearScale, createPointScale } from '@nivo/scales'\n\nexport const useStream = <RawDatum extends StreamDatum>({\n    width,\n    height,\n    data,\n    keys,\n    label = defaultProps.label,\n    valueFormat,\n    offsetType = defaultProps.offsetType,\n    order = defaultProps.order,\n    curve = defaultProps.curve,\n    colors = defaultProps.colors,\n    borderColor = defaultProps.borderColor,\n    dotSize = defaultProps.dotSize,\n    dotColor = defaultProps.dotColor,\n    dotBorderWidth = defaultProps.dotBorderWidth,\n    dotBorderColor = defaultProps.dotBorderColor,\n}: {\n    width: number\n    height: number\n    data: StreamDataProps<RawDatum>['data']\n    keys: StreamDataProps<RawDatum>['keys']\n    label?: StreamCommonProps<RawDatum>['label']\n    valueFormat?: StreamCommonProps<RawDatum>['valueFormat']\n    offsetType?: StreamCommonProps<RawDatum>['offsetType']\n    order?: StreamCommonProps<RawDatum>['order']\n    curve?: StreamCommonProps<RawDatum>['curve']\n    colors?: StreamCommonProps<RawDatum>['colors']\n    dotSize?: StreamCommonProps<RawDatum>['dotSize']\n    dotColor?: StreamCommonProps<RawDatum>['dotColor']\n    dotBorderWidth?: StreamCommonProps<RawDatum>['dotBorderWidth']\n    dotBorderColor?: StreamCommonProps<RawDatum>['dotBorderColor']\n    borderColor?: StreamCommonProps<RawDatum>['borderColor']\n}) => {\n    const areaCurveFactory = useCurveInterpolation(curve)\n    const areaGenerator = useMemo(\n        () =>\n            area<StreamLayerDatum>()\n                .x(({ x }) => x)\n                .y0(({ y1 }) => y1)\n                .y1(({ y2 }) => y2)\n                .curve(areaCurveFactory),\n        [areaCurveFactory]\n    )\n\n    const stack = useMemo(\n        () =>\n            d3Stack<RawDatum, string | number>()\n                .keys(keys)\n                .offset(stackOffsetFromProp(offsetType))\n                .order(stackOrderFromProp(order)),\n        [keys, offsetType, order]\n    )\n\n    const [layers, xScale, yScale] = useMemo(() => {\n        const allMin: number[] = []\n        const allMax: number[] = []\n\n        const layers = stack(data).map(layer => {\n            return layer.map(point => {\n                allMin.push(point[0])\n                allMax.push(point[1])\n\n                return {\n                    ...point,\n                    value: point.data[layer.key] as number,\n                }\n            })\n        })\n\n        const minValue = Math.min(...allMin)\n        const maxValue = Math.max(...allMax)\n\n        const xScale = createPointScale(\n            { type: 'point' },\n            { all: Array.from({ length: data.length }, (_, i) => i), min: 0, max: data.length },\n            width\n        )\n        const yScale = createLinearScale(\n            { type: 'linear' },\n            { all: [minValue, maxValue], min: minValue, max: maxValue },\n            height,\n            'y'\n        )\n        return [layers, xScale, yScale]\n    }, [stack, data, width, height])\n\n    const theme = useTheme()\n    const getColor = useOrdinalColorScale<Omit<StreamLayerData, 'label' | 'color' | 'data'>>(\n        colors,\n        'id'\n    )\n    const getBorderColor = useInheritedColor<StreamLayerData>(borderColor, theme)\n\n    const getDotSize = useMemo(\n        () => (typeof dotSize === 'function' ? dotSize : () => dotSize),\n        [dotSize]\n    )\n    const getDotColor = useInheritedColor(dotColor, theme)\n    const getDotBorderWidth = useMemo(\n        () => (typeof dotBorderWidth === 'function' ? dotBorderWidth : () => dotBorderWidth),\n        [dotBorderWidth]\n    )\n    const getDotBorderColor = useInheritedColor(dotBorderColor, theme)\n\n    const getLabel = usePropertyAccessor<\n        Omit<StreamLayerData, 'label' | 'color' | 'data'>,\n        string | number\n    >(label)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const enhancedLayers: StreamLayerData[] = useMemo(\n        () =>\n            layers.map((points, layerIndex) => {\n                const computedPoints: StreamLayerDatum[] = points.map((point, i) => ({\n                    layerId: keys[layerIndex],\n                    layerLabel: '',\n                    index: i,\n                    color: '',\n                    x: xScale(i) as number,\n                    value: point.value,\n                    formattedValue: formatValue(point.value),\n                    y1: yScale(point[0]),\n                    y2: yScale(point[1]),\n                }))\n\n                const layer: Omit<StreamLayerData, 'label' | 'color' | 'data'> = {\n                    id: keys[layerIndex] as string,\n                    path: areaGenerator(computedPoints) as string,\n                }\n\n                const layerWithComputedProperties: Omit<StreamLayerData, 'data'> = {\n                    ...layer,\n                    label: getLabel(layer),\n                    color: getColor(layer),\n                }\n\n                return {\n                    ...layerWithComputedProperties,\n                    data: computedPoints.map(point => {\n                        point.layerLabel = layerWithComputedProperties.label\n                        point.color = layerWithComputedProperties.color\n\n                        return point\n                    }),\n                }\n            }),\n        [layers, keys, getLabel, areaGenerator, getColor, xScale, yScale, formatValue]\n    )\n\n    const slices: StreamSliceData[] = useMemo(\n        () =>\n            Array.from({ length: data.length }, (_, i) => {\n                const sliceStack = enhancedLayers\n                    .map(layer => layer.data[i])\n                    .sort((a, b) => a.y2 - b.y2)\n\n                return {\n                    index: i,\n                    x: enhancedLayers[0].data[i].x,\n                    stack: sliceStack,\n                }\n            }),\n        [data.length, enhancedLayers]\n    )\n\n    const layerContext: StreamCustomLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            layers: enhancedLayers,\n            slices,\n        }),\n        [xScale, yScale, enhancedLayers, slices]\n    )\n\n    return {\n        xScale,\n        yScale,\n        layers: enhancedLayers,\n        slices,\n        getBorderColor,\n        getDotSize,\n        getDotColor,\n        getDotBorderWidth,\n        getDotBorderColor,\n        layerContext,\n    }\n}\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { StreamDatum, StreamSvgProps } from './types'\nimport { Stream } from './Stream'\n\nexport const ResponsiveStream = <RawDatum extends StreamDatum>(\n    props: Omit<StreamSvgProps<RawDatum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Stream<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["StreamLayer","_ref","layer","fillOpacity","borderWidth","getBorderColor","isInteractive","tooltip","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseHover","useCallback","event","createElement","_useMotionConfig","useMotionConfig","animate","springConfig","config","animatedPath","useAnimatedPath","path","animatedProps","useSpring","color","immediate","_jsx","animated","d","fill","stroke","strokeWidth","onMouseMove","undefined","onMouseEnter","onMouseLeave","StreamLayers","layers","children","map","i","getDotY","datum","position","y","y2","y1","StreamDots","data","dotComponent","getSize","getColor","getBorderWidth","_Fragment","key","x","size","borderColor","StreamSlicesItem","slice","height","_useState","useState","isHover","setIsHover","handleMouseLeave","_jsxs","transform","x1","x2","strokeOpacity","width","StreamSlices","slices","index","defaultProps","label","order","offsetType","curve","axisBottom","axisLeft","enableGridX","enableGridY","colors","scheme","from","modifiers","enableDots","dotPosition","radius","circle","cx","cy","r","dotSize","dotColor","dotBorderWidth","dotBorderColor","BasicTooltip","id","enableChip","enableStackTooltip","stackTooltip","rows","useMemo","stack","p","Chip","layerId","layerLabel","formattedValue","TableTooltip","legends","legendLabel","role","svgDefaultProps","_extends","defs","motionConfig","isFocusable","InnerStream","keys","valueFormat","_ref$layers","chartLayers","partialMargin","margin","axisTop","axisRight","_ref$axisBottom","_ref$axisLeft","_ref$enableGridX","_ref$enableGridY","_ref$fillOpacity","_ref$borderWidth","_ref$defs","_ref$fill","_ref$enableDots","_ref$dotPosition","_ref$dotComponent","_ref$isInteractive","_ref$tooltip","_ref$enableStackToolt","_ref$stackTooltip","_ref$legends","ariaLabel","ariaLabelledBy","ariaDescribedBy","_useDimensions","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","_useStream","_ref$label","_ref$offsetType","_ref$order","_ref$curve","_ref$colors","_ref$borderColor","_ref$dotSize","_ref$dotColor","_ref$dotBorderWidth","_ref$dotBorderColor","areaCurveFactory","useCurveInterpolation","areaGenerator","area","_ref2","y0","_ref3","_ref4","d3Stack","offset","stackOffsetFromProp","stackOrderFromProp","_useMemo","allMin","allMax","point","push","value","minValue","Math","min","apply","maxValue","max","createPointScale","type","all","Array","length","_","createLinearScale","xScale","yScale","theme","useTheme","useOrdinalColorScale","useInheritedColor","getDotSize","getDotColor","getDotBorderWidth","getDotBorderColor","getLabel","usePropertyAccessor","formatValue","useValueFormatter","enhancedLayers","points","layerIndex","computedPoints","layerWithComputedProperties","sliceStack","sort","a","b","layerContext","useStream","boundDefs","bindDefs","layerById","grid","axes","dots","includes","Grid","Axes","top","right","bottom","left","Fragment","legend","legendData","reverse","BoxLegendSvg","containerWidth","containerHeight","SvgWrapper","_layerById$layer","Stream","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","ResponsiveStream","props","ResponsiveWrapper"],"mappings":"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"}