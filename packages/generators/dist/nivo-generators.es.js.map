{"version":3,"file":"nivo-generators.es.js","sources":["../src/color.ts","../src/sets/countryCodes.ts","../src/sets/names.ts","../src/sets/programmingLanguages.ts","../src/boxplot.ts","../src/bullet.ts","../src/chord.ts","../src/network.ts","../src/parallelCoordinates.ts","../src/sankey.ts","../src/swarmplot.ts","../src/waffle.ts","../src/xySeries.ts","../src/index.ts"],"sourcesContent":["export const randColor = () => `hsl(${Math.round(Math.random() * 360)}, 70%, 50%)`\n","export const countryCodes = [\n    'AD',\n    'AE',\n    'AF',\n    'AG',\n    'AI',\n    'AL',\n    'AM',\n    'AO',\n    'AQ',\n    'AR',\n    'AS',\n    'AT',\n    'AU',\n    'AW',\n    'AX',\n    'AZ',\n    'BA',\n    'BB',\n    'BD',\n    'BE',\n    'BF',\n    'BG',\n    'BH',\n    'BI',\n    'BJ',\n    'BL',\n    'BM',\n    'BN',\n    'BO',\n    'BQ',\n    'BQ',\n    'BR',\n    'BS',\n    'BT',\n    'BV',\n    'BW',\n    'BY',\n    'BZ',\n    'CA',\n    'CC',\n    'CD',\n    'CF',\n    'CG',\n    'CH',\n    'CI',\n    'CK',\n    'CL',\n    'CM',\n    'CN',\n    'CO',\n    'CR',\n    'CU',\n    'CV',\n    'CW',\n    'CX',\n    'CY',\n    'CZ',\n    'DE',\n    'DJ',\n    'DK',\n    'DM',\n    'DO',\n    'DZ',\n    'EC',\n    'EE',\n    'EG',\n    'EH',\n    'ER',\n    'ES',\n    'ET',\n    'FI',\n    'FJ',\n    'FK',\n    'FM',\n    'FO',\n    'FR',\n    'GA',\n    'GB',\n    'GD',\n    'GE',\n    'GF',\n    'GG',\n    'GH',\n    'GI',\n    'GL',\n    'GM',\n    'GN',\n    'GP',\n    'GQ',\n    'GR',\n    'GS',\n    'GT',\n    'GU',\n    'GW',\n    'GY',\n    'HK',\n    'HM',\n    'HN',\n    'HR',\n    'HT',\n    'HU',\n    'ID',\n    'IE',\n    'IL',\n    'IM',\n    'IN',\n    'IO',\n    'IQ',\n    'IR',\n    'IS',\n    'IT',\n    'JE',\n    'JM',\n    'JO',\n    'JP',\n    'KE',\n    'KG',\n    'KH',\n    'KI',\n    'KM',\n    'KN',\n    'KP',\n    'KR',\n    'KW',\n    'KY',\n    'KZ',\n    'LA',\n    'LB',\n    'LC',\n    'LI',\n    'LK',\n    'LR',\n    'LS',\n    'LT',\n    'LU',\n    'LV',\n    'LY',\n    'MA',\n    'MC',\n    'MD',\n    'ME',\n    'MF',\n    'MG',\n    'MH',\n    'MK',\n    'ML',\n    'MM',\n    'MN',\n    'MO',\n    'MP',\n    'MQ',\n    'MR',\n    'MS',\n    'MT',\n    'MU',\n    'MV',\n    'MW',\n    'MX',\n    'MY',\n    'MZ',\n    'NA',\n    'NC',\n    'NE',\n    'NF',\n    'NG',\n    'NI',\n    'NL',\n    'NO',\n    'NP',\n    'NR',\n    'NU',\n    'NZ',\n    'OM',\n    'PA',\n    'PE',\n    'PF',\n    'PG',\n    'PH',\n    'PK',\n    'PL',\n    'PM',\n    'PN',\n    'PR',\n    'PS',\n    'PT',\n    'PW',\n    'PY',\n    'QA',\n    'RE',\n    'RO',\n    'RS',\n    'RU',\n    'RW',\n    'SA',\n    'SB',\n    'SC',\n    'SD',\n    'SE',\n    'SG',\n    'SH',\n    'SI',\n    'SJ',\n    'SK',\n    'SL',\n    'SM',\n    'SN',\n    'SO',\n    'SR',\n    'SS',\n    'ST',\n    'SV',\n    'SX',\n    'SY',\n    'SZ',\n    'TC',\n    'TD',\n    'TF',\n    'TG',\n    'TH',\n    'TJ',\n    'TK',\n    'TL',\n    'TM',\n    'TN',\n    'TO',\n    'TR',\n    'TT',\n    'TV',\n    'TW',\n    'TZ',\n    'UA',\n    'UG',\n    'UM',\n    'US',\n    'UY',\n    'UZ',\n    'VA',\n    'VC',\n    'VE',\n    'VG',\n    'VI',\n    'VN',\n    'VU',\n    'WF',\n    'WS',\n    'YE',\n    'YT',\n    'ZA',\n    'ZM',\n    'ZW',\n]\n","export const names = [\n    'John',\n    'Raoul',\n    'Jane',\n    'Marcel',\n    'Ibrahim',\n    'Junko',\n    'Lyu',\n    'André',\n    'Maki',\n    'Véronique',\n    'Thibeau',\n    'Josiane',\n    'Raphaël',\n    'Mathéo',\n    'Margot',\n    'Hugo',\n    'Christian',\n    'Louis',\n    'Ella',\n    'Alton',\n    'Jimmy',\n    'Guillaume',\n    'Sébastien',\n    'Alfred',\n    'Bon',\n    'Solange',\n    'Kendrick',\n    'Jared',\n    'Satoko',\n    'Tomoko',\n    'Line',\n    'Delphine',\n    'Leonard',\n    'Alphonse',\n    'Lisa',\n    'Bart',\n    'Benjamin',\n    'Homer',\n    'Jack',\n]\n","export const programmingLanguages = [\n    'php',\n    'make',\n    'javascript',\n    'go',\n    'erlang',\n    'elixir',\n    'lisp',\n    'haskell',\n    'python',\n    'ruby',\n    'hack',\n    'scala',\n    'java',\n    'rust',\n    'c',\n    'css',\n    'sass',\n    'stylus',\n]\n","// configuration for a set of data points\n// strings are descriptors for the set\n// numbers are used for synthetic data generation)\ntype BoxPlotConfig = {\n    group: string\n    subgroup?: string\n    mu: number\n    sd: number\n    n: number\n}\n\n// create a random number from a distribution that has a mean and some spread\n// (uses Math.atanh instead of normal distribution - only meant for test cases)\nconst randomValue = (mu = 0, sigma = 1) => {\n    const z = (Math.random() - 0.5) * 2\n    return Math.atanh(z) * sigma + mu\n}\n\nexport const generateBoxPlotData = (config: BoxPlotConfig[]) => {\n    return config\n        .map(x => {\n            const values = Array(x.n)\n                .fill(0)\n                .map(() => randomValue(x.mu, x.sd))\n            return values.map(v => {\n                return { ...x, value: v }\n            })\n        })\n        .flat()\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\n\ntype Options = Partial<{\n    float: boolean\n    markerCount: number\n    measureCount: number\n    rangeCount: number\n    subtitle: string\n    title: string\n}>\n\nexport const generateBulletData = (\n    id: string,\n    max: number,\n    {\n        title,\n        subtitle,\n        rangeCount = 5,\n        measureCount = 1,\n        markerCount = 1,\n        float = false,\n    }: Options = {}\n) => {\n    const ranges = range(rangeCount - 1).reduce(\n        acc => {\n            const remaining = max - acc[0]\n            return [random(remaining, float), ...acc]\n        },\n        [max]\n    )\n\n    const measures = range(measureCount).reduce<number[]>(acc => {\n        if (acc.length === 0) return [random(max, float)]\n        return [random(acc[0], float), ...acc]\n    }, [])\n\n    const markers = range(markerCount).map(() => max * 0.6 + random(max * 0.4))\n\n    return {\n        id,\n        title,\n        subtitle,\n        ranges,\n        measures,\n        markers,\n    }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport { names } from './sets'\n\nexport const generateChordData = ({\n    keys = names,\n    size = 7,\n    minValue = 0,\n    maxValue = 2000,\n} = {}) => {\n    const maxSize = Math.min(keys.length, size)\n    const selectedKeys = keys.slice(0, maxSize)\n\n    const matrix = range(maxSize).map(() =>\n        range(maxSize).map(() => {\n            if (Math.random() < 0.66) return random(minValue, maxValue / 4)\n            return random(minValue, maxValue)\n        })\n    )\n\n    return { matrix, keys: selectedKeys }\n}\n","import random from 'lodash/random'\n\ntype Link = {\n    source: string\n    target: string\n    distance: number\n}\n\ntype ExtraNode = {\n    id: string\n    height: number\n    color: string\n    size: number\n}\n\nexport const generateNetworkData = ({\n    rootSize = 32,\n    midSize = 24,\n    leafSize = 12,\n    minMidNodes = 5,\n    maxMidNodes = 11,\n    minLeaves = 3,\n    maxLeaves = 9,\n}: {\n    rootSize?: number\n    midSize?: number\n    leafSize?: number\n    minMidNodes?: number\n    maxMidNodes?: number\n    minLeaves?: number\n    maxLeaves?: number\n} = {}) => {\n    const rootNode = {\n        id: 'Node 0',\n        height: 2,\n        size: rootSize,\n        color: 'rgb(244, 117, 96)',\n    }\n    let nodes = Array.from({ length: random(minMidNodes, maxMidNodes) }, (_, k) => ({\n        id: `Node ${k + 1}`,\n        height: 1,\n        size: midSize,\n        color: 'rgb(97, 205, 187)',\n    }))\n\n    const links: Link[] = []\n    const extraNodes: ExtraNode[] = []\n    nodes.forEach(source => {\n        links.push({\n            source: 'Node 0',\n            target: source.id,\n            distance: 80,\n        })\n        nodes.forEach(target => {\n            if (Math.random() < 0.04) {\n                links.push({\n                    source: source.id,\n                    target: target.id,\n                    distance: 80,\n                })\n            }\n        })\n        Array.from({ length: random(minLeaves, maxLeaves) }, (_, k) => {\n            extraNodes.push({\n                id: `${source.id}.${k}`,\n                height: 0,\n                size: leafSize,\n                color: 'rgb(232, 193, 160)',\n            })\n            links.push({\n                source: source.id,\n                target: `${source.id}.${k}`,\n                distance: 50,\n            })\n\n            return null\n        })\n    })\n\n    nodes.push(rootNode)\n    nodes = nodes.concat(extraNodes)\n\n    return { nodes, links }\n}\n","import random from 'lodash/random'\n\ninterface Id {\n    id: string\n}\n\ninterface Variable {\n    id: string\n    range: [number, number]\n    floating?: boolean\n}\n\ninterface Group {\n    id: string\n}\n\nexport const generateParallelCoordinatesData = ({\n    ids,\n    variables,\n}: {\n    ids: Id[]\n    variables: Variable[]\n}) => {\n    const datumGenerator = () =>\n        variables.reduce((acc, variable) => {\n            const value = random(variable.range[0], variable.range[1], variable.floating)\n\n            return { ...acc, [variable.id]: value }\n        }, {})\n\n    return ids.map(id => {\n        return {\n            ...datumGenerator(),\n            ...id,\n        }\n    })\n}\n\nexport const generateGroupedParallelCoordinatesData = ({\n    ids,\n    groups,\n    variables,\n}: {\n    ids: Id[]\n    groups: Group[]\n    variables: Variable[]\n}) => {\n    const data: Record<string, string | number>[] = []\n\n    for (const group of groups) {\n        // First, generate a baseline for each variable,\n        // so that values within a group are close to each other.\n        const baselineValues: Record<string, { base: number; variation: number }> = {}\n        for (const variable of variables) {\n            baselineValues[variable.id] = {\n                base: random(variable.range[0], variable.range[1], variable.floating),\n                variation: Math.abs(variable.range[1] - variable.range[0]) * 0.12,\n            }\n        }\n\n        for (const id of ids) {\n            const datum: Record<string, string | number> = { ...id, group: group.id }\n            for (const variable of variables) {\n                const baseline = baselineValues[variable.id]\n                const unclampedValue =\n                    baseline.base +\n                    random(-baseline.variation, baseline.variation, variable.floating)\n\n                datum[variable.id] = Math.max(\n                    variable.range[0],\n                    Math.min(variable.range[1], unclampedValue)\n                )\n            }\n\n            data.push(datum)\n        }\n    }\n\n    return data\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { randColor } from './color'\nimport { names } from './sets'\n\ntype Link = {\n    source: string\n    target: string\n    value: number\n}\n\nconst availableNodes = names.map(name => ({ id: name }))\n\nconst getNodeTargets = (id: string, links: Link[], currentPath?: string[]): string[] => {\n    const targets = links\n        .filter(({ source }) => source === id)\n        .map(({ target }) => {\n            if (target === id) {\n                throw new Error(\n                    `[sankey] a node cannot be linked on itself:\\n  link: ${id} —> ${id}`\n                )\n            }\n            if (currentPath?.includes(target)) {\n                throw new Error(\n                    `[sankey] found cyclic dependency:\\n  link: ${currentPath.join(\n                        ' —> '\n                    )} —> ${target}`\n                )\n            }\n            return target\n        })\n\n    return targets.reduce(\n        (acc, targetId) =>\n            acc.concat(\n                getNodeTargets(\n                    targetId,\n                    links,\n                    currentPath ? [...currentPath, targetId] : [id, targetId]\n                )\n            ),\n        targets\n    )\n}\n\nconst getNodesTargets = (links: Link[]) =>\n    links.reduce<Record<string, string[]>>((targetsById, link) => {\n        if (!targetsById[link.source]) {\n            targetsById[link.source] = getNodeTargets(link.source, links)\n        }\n\n        return targetsById\n    }, {})\n\nexport const generateSankeyData = ({\n    nodeCount,\n    maxIterations = 3,\n}: {\n    nodeCount?: number\n    maxIterations?: number\n} = {}) => {\n    const nodes = availableNodes.slice(0, nodeCount).map(node =>\n        Object.assign({}, node, {\n            nodeColor: randColor(),\n        })\n    )\n\n    const links: Link[] = []\n    shuffle(nodes).forEach(({ id }) => {\n        range(random(1, maxIterations)).forEach(() => {\n            const targetsById = getNodesTargets(links)\n            const randId = shuffle(nodes.filter(n => n.id !== id).map(n => n.id))[0]\n            if (\n                (!targetsById[randId] || !targetsById[randId].includes(id)) &&\n                (!targetsById[id] || !targetsById[id].includes(randId))\n            ) {\n                links.push({\n                    source: id,\n                    target: randId,\n                    value: random(5, 200),\n                })\n            }\n        })\n    })\n\n    return { nodes, links }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\n\ntype SwarmPlotDatum = {\n    id: string\n    categories?: number[]\n    group: string\n    price: number\n    volume: number\n}\n\nconst randomPrice = () => random(0, 500)\nconst randomVolume = () => random(4, 20)\nconst randomCategory = () => random(3, 17)\n\nexport const generateSwarmPlotData = (\n    groups: string[],\n    { min = 60, max = 100, categoryCount = 0 }\n) => ({\n    groups,\n    data: groups.reduce<SwarmPlotDatum[]>(\n        (acc, group, groupIndex) => [\n            ...acc,\n            ...range(random(min, max))\n                .map(() => randomPrice())\n                .map((price, index) => {\n                    const datum: SwarmPlotDatum = {\n                        id: `${groupIndex}.${index}`,\n                        group,\n                        price,\n                        volume: randomVolume(),\n                    }\n\n                    if (categoryCount > 0) {\n                        datum.categories = range(categoryCount).map(randomCategory)\n                    }\n\n                    return datum\n                }),\n        ],\n        []\n    ),\n})\n\nexport const randomizeSwarmPlotData = (previousData: ReturnType<typeof generateSwarmPlotData>) => ({\n    groups: previousData.groups,\n    data: previousData.data.map(d => {\n        const datum = {\n            ...d,\n            group: shuffle(previousData.groups)[0],\n            price: randomPrice(),\n            volume: randomVolume(),\n        }\n\n        if (d.categories !== undefined) {\n            datum.categories = range(3).map(randomCategory)\n        }\n\n        return datum\n    }),\n})\n","export interface WaffleDatumSpec {\n    id: string\n    label?: string\n}\n\nexport const generateWaffleData = <D extends WaffleDatumSpec>({\n    groups,\n    total,\n}: {\n    groups: D[]\n    total: number\n}): (D & {\n    label: string\n    value: number\n})[] => {\n    const slice = total / groups.length\n\n    return groups.map(group => {\n        return {\n            ...group,\n            label: group.label !== undefined ? group.label : group.id,\n            value: Math.random() * slice,\n        }\n    })\n}\n","interface XYRangeStaticValues {\n    values: string[] | number[]\n}\n\ninterface XYRandomNumericValues {\n    length: number\n    min: number\n    max: number\n    round?: boolean\n}\n\ntype XYRangeValues = XYRangeStaticValues | XYRandomNumericValues\n\nconst getValueGenerator = (config: XYRangeValues) => {\n    let generator: (index: number) => string | number\n\n    if ('values' in config) {\n        generator = (index: number) => config.values[index]\n    } else {\n        generator = () => {\n            let value = config.min + Math.random() * (config.max - config.min)\n            if (config.round) {\n                value = Math.round(value)\n            }\n\n            return value\n        }\n    }\n\n    return generator\n}\n\nexport const generateXYSeries = ({\n    serieIds,\n    x,\n    y,\n}: {\n    serieIds: string[]\n    x: XYRangeValues\n    y: XYRangeValues\n}) => {\n    const xLength = 'length' in x ? x.length : x.values.length\n\n    const getX = getValueGenerator(x)\n    const getY = getValueGenerator(y)\n\n    return serieIds.map(serieId => {\n        return {\n            id: serieId,\n            data: Array.from({ length: xLength }).map((_, index) => {\n                return {\n                    x: getX(index),\n                    y: getY(index),\n                }\n            }),\n        }\n    })\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { timeDays } from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport * as color from './color'\nimport * as sets from './sets'\n\nexport { sets }\nexport const randColor = color.randColor\n\nexport const generateProgrammingLanguageStats = (shouldShuffle = true, limit = -1) => {\n    let langs = sets.programmingLanguages\n    if (shouldShuffle) {\n        langs = shuffle(langs)\n    }\n    if (limit < 1) {\n        limit = 1 + Math.round(Math.random() * (sets.programmingLanguages.length - 1))\n    }\n\n    return langs.slice(0, limit).map(language => ({\n        label: language,\n        value: Math.round(Math.random() * 600),\n        color: randColor(),\n    }))\n}\n\nexport const uniqRand = <T>(generator: (...args: unknown[]) => T) => {\n    const used: T[] = []\n\n    return (...args: unknown[]) => {\n        let value\n        do {\n            value = generator(...args)\n        } while (used.includes(value))\n\n        used.push(value)\n\n        return value\n    }\n}\n\nexport const randCountryCode = () => shuffle(sets.countryCodes)[0]\n\ntype DrinkDatum = {\n    id: string\n    color: string\n    data: Array<{\n        color: string\n        x: string\n        y: number\n    }>\n}\n\nexport const generateDrinkStats = (xSize = 16) => {\n    const rand = () => random(0, 60)\n    const types = ['whisky', 'rhum', 'gin', 'vodka', 'cognac']\n    const country = uniqRand(randCountryCode)\n\n    const data: DrinkDatum[] = types.map(id => ({\n        id,\n        color: randColor(),\n        data: [],\n    }))\n\n    range(xSize).forEach(() => {\n        const x = country()\n        types.forEach(id => {\n            data.find(d => d.id === id)?.data.push({\n                color: randColor(),\n                x,\n                y: rand(),\n            })\n        })\n    })\n\n    return data\n}\n\nexport const generateSerie = (xSize = 20) => {\n    const max = 100 + Math.random() * (Math.random() * 600)\n\n    return range(xSize).map(() => Math.round(Math.random() * max))\n}\n\nexport const generateSeries = (ids: string[], xKeys: string[]) =>\n    ids.map(id => ({\n        id,\n        color: randColor(),\n        data: xKeys.map(x => ({ x, y: Math.round(Math.random() * 300) })),\n    }))\n\nexport const generateStackData = (size = 3) => {\n    const length = 16\n    return range(size).map(() => generateSerie(length).map((v, i) => ({ x: i, y: v })))\n}\n\nexport const generateCountriesPopulation = (size: number) => {\n    const countryCode = uniqRand(randCountryCode)\n\n    return range(size).map(() => ({\n        country: countryCode(),\n        population: 200 + Math.round(Math.random() * Math.random() * 1000000),\n    }))\n}\n\nexport const generateOrderedDayCounts = (from: Date, to: Date) => {\n    const days = timeDays(from, to)\n    const dayFormat = timeFormat('%Y-%m-%d')\n\n    return days.map(day => {\n        return {\n            value: Math.round(Math.random() * 400),\n            day: dayFormat(day),\n        }\n    })\n}\n\nexport const generateDayCounts = (from: Date, to: Date, maxSize = 0.9) => {\n    const days = generateOrderedDayCounts(from, to)\n\n    const size =\n        Math.round(days.length * (maxSize * 0.4)) +\n        Math.round(Math.random() * (days.length * (maxSize * 0.6)))\n\n    return shuffle(days).slice(0, size)\n}\n\nexport const generateCountriesData = (\n    keys: string[],\n    { size = 12, min = 0, max = 200, withColors = true } = {}\n) =>\n    sets.countryCodes.slice(0, size).map(country => {\n        const d: Record<string, unknown> = {\n            country,\n        }\n        keys.forEach(key => {\n            d[key] = random(min, max)\n            if (withColors === true) {\n                d[`${key}Color`] = randColor()\n            }\n        })\n\n        return d\n    })\n\nconst libTreeItems = [\n    [\n        'viz',\n        [\n            ['stack', [['cchart'], ['xAxis'], ['yAxis'], ['layers']]],\n            [\n                'ppie',\n                [\n                    ['chart', [['pie', [['outline'], ['slices'], ['bbox']]], ['donut'], ['gauge']]],\n                    ['legends'],\n                ],\n            ],\n        ],\n    ],\n    ['colors', [['rgb'], ['hsl']]],\n    [\n        'utils',\n        [['randomize'], ['resetClock'], ['noop'], ['tick'], ['forceGC'], ['stackTrace'], ['dbg']],\n    ],\n    ['generators', [['address'], ['city'], ['animal'], ['movie'], ['user']]],\n    [\n        'set',\n        [\n            ['clone'],\n            ['intersect'],\n            ['merge'],\n            ['reverse'],\n            ['toArray'],\n            ['toObject'],\n            ['fromCSV'],\n            ['slice'],\n            ['append'],\n            ['prepend'],\n            ['shuffle'],\n            ['pick'],\n            ['plouc'],\n        ],\n    ],\n    [\n        'text',\n        [\n            ['trim'],\n            ['slugify'],\n            ['snakeCase'],\n            ['camelCase'],\n            ['repeat'],\n            ['padLeft'],\n            ['padRight'],\n            ['sanitize'],\n            ['ploucify'],\n        ],\n    ],\n    [\n        'misc',\n        [\n            ['greetings', [['hey'], ['HOWDY'], ['aloha'], ['AHOY']]],\n            ['other'],\n            [\n                'path',\n                [\n                    ['pathA'],\n                    ['pathB', [['pathB1'], ['pathB2'], ['pathB3'], ['pathB4']]],\n                    [\n                        'pathC',\n                        [\n                            ['pathC1'],\n                            ['pathC2'],\n                            ['pathC3'],\n                            ['pathC4'],\n                            ['pathC5'],\n                            ['pathC6'],\n                            ['pathC7'],\n                            ['pathC8'],\n                            ['pathC9'],\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ],\n]\n\ninterface LibTreeDatum {\n    name: string\n    loc?: number\n    color: string\n    children?: LibTreeDatum[]\n}\n\nexport const generateLibTree = (\n    name = 'nivo',\n    limit?: number | null,\n    children = libTreeItems\n): LibTreeDatum => {\n    limit = limit || children.length\n    if (limit > children.length) {\n        limit = children.length\n    }\n\n    const tree: LibTreeDatum = {\n        name,\n        color: randColor(),\n    }\n    if (children?.length > 0) {\n        tree.children = range(limit).map((_, i) => {\n            const leaf = children[i]\n\n            // full path `${name}.${leaf[0]}`\n            return generateLibTree(leaf[0] as string, null, (leaf[1] ?? []) as any)\n        })\n    } else {\n        tree.loc = Math.round(Math.random() * 200000)\n    }\n\n    return tree\n}\n\nconst wines = ['chardonay', 'carmenere', 'syrah']\nconst wineTastes = ['fruity', 'bitter', 'heavy', 'strong', 'sunny']\n\nexport const generateWinesTastes = ({ randMin = 20, randMax = 120 } = {}) => {\n    const data = wineTastes.map(taste => {\n        const d: Record<string, unknown> = { taste }\n        wines.forEach(wine => {\n            d[wine] = random(randMin, randMax)\n        })\n\n        return d\n    })\n\n    return { data, keys: wines }\n}\n\nexport * from './boxplot'\nexport * from './bullet'\nexport * from './chord'\nexport * from './network'\nexport * from './parallelCoordinates'\nexport * from './sankey'\nexport * from './swarmplot'\nexport * from './waffle'\nexport * from './xySeries'\n"],"names":["randColor","Math","round","random","countryCodes","names","programmingLanguages","generateBoxPlotData","config","map","x","Array","n","fill","mu","sigma","z","atanh","randomValue","sd","v","_extends","value","flat","generateBulletData","id","max","_temp","_ref","title","subtitle","_ref$rangeCount","rangeCount","_ref$measureCount","measureCount","_ref$markerCount","markerCount","_ref$float","float","ranges","range","reduce","acc","remaining","concat","measures","length","markers","generateChordData","_ref$keys","keys","_ref$size","size","_ref$minValue","minValue","_ref$maxValue","maxValue","maxSize","min","selectedKeys","slice","matrix","generateNetworkData","_ref$rootSize","rootSize","_ref$midSize","midSize","_ref$leafSize","leafSize","_ref$minMidNodes","minMidNodes","_ref$maxMidNodes","maxMidNodes","_ref$minLeaves","minLeaves","_ref$maxLeaves","maxLeaves","rootNode","height","color","nodes","from","_","k","links","extraNodes","forEach","source","push","target","distance","generateParallelCoordinatesData","ids","variables","datumGenerator","variable","_extends2","floating","generateGroupedParallelCoordinatesData","_ref2","_step","groups","data","_iterator","_createForOfIteratorHelperLoose","done","_step2","group","baselineValues","_iterator2","base","variation","abs","_step3","_iterator3","_step4","datum","_iterator4","baseline","unclampedValue","availableNodes","name","getNodeTargets","currentPath","targets","filter","Error","includes","join","targetId","getNodesTargets","targetsById","link","generateSankeyData","_ref3","nodeCount","_ref3$maxIterations","maxIterations","node","Object","assign","nodeColor","shuffle","_ref4","randId","randomPrice","randomVolume","randomCategory","generateSwarmPlotData","_ref$min","_ref$max","_ref$categoryCount","categoryCount","groupIndex","price","index","volume","categories","randomizeSwarmPlotData","previousData","d","undefined","generateWaffleData","total","label","getValueGenerator","generator","values","generateXYSeries","serieIds","y","xLength","getX","getY","serieId","generateProgrammingLanguageStats","shouldShuffle","limit","langs","sets","language","uniqRand","used","apply","arguments","randCountryCode","generateDrinkStats","xSize","types","country","_data$find","find","generateSerie","generateSeries","xKeys","generateStackData","i","generateCountriesPopulation","countryCode","population","generateOrderedDayCounts","to","days","timeDays","dayFormat","timeFormat","day","generateDayCounts","generateCountriesData","_ref$withColors","withColors","key","libTreeItems","generateLibTree","children","_children","tree","_leaf$","leaf","loc","wines","wineTastes","generateWinesTastes","_temp2","_ref2$randMin","randMin","_ref2$randMax","randMax","taste","wine"],"mappings":"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"}