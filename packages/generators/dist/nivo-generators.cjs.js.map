{"version":3,"file":"nivo-generators.cjs.js","sources":["../src/color.ts","../src/sets/countryCodes.ts","../src/sets/names.ts","../src/sets/programmingLanguages.ts","../src/boxplot.ts","../src/sankey.ts","../src/swarmplot.ts","../src/xySeries.ts","../src/index.ts","../src/bullet.ts","../src/chord.ts","../src/parallelCoordinates.ts","../src/network.ts","../src/waffle.ts"],"sourcesContent":["export const randColor = () => `hsl(${Math.round(Math.random() * 360)}, 70%, 50%)`\n","export const countryCodes = [\n    'AD',\n    'AE',\n    'AF',\n    'AG',\n    'AI',\n    'AL',\n    'AM',\n    'AO',\n    'AQ',\n    'AR',\n    'AS',\n    'AT',\n    'AU',\n    'AW',\n    'AX',\n    'AZ',\n    'BA',\n    'BB',\n    'BD',\n    'BE',\n    'BF',\n    'BG',\n    'BH',\n    'BI',\n    'BJ',\n    'BL',\n    'BM',\n    'BN',\n    'BO',\n    'BQ',\n    'BQ',\n    'BR',\n    'BS',\n    'BT',\n    'BV',\n    'BW',\n    'BY',\n    'BZ',\n    'CA',\n    'CC',\n    'CD',\n    'CF',\n    'CG',\n    'CH',\n    'CI',\n    'CK',\n    'CL',\n    'CM',\n    'CN',\n    'CO',\n    'CR',\n    'CU',\n    'CV',\n    'CW',\n    'CX',\n    'CY',\n    'CZ',\n    'DE',\n    'DJ',\n    'DK',\n    'DM',\n    'DO',\n    'DZ',\n    'EC',\n    'EE',\n    'EG',\n    'EH',\n    'ER',\n    'ES',\n    'ET',\n    'FI',\n    'FJ',\n    'FK',\n    'FM',\n    'FO',\n    'FR',\n    'GA',\n    'GB',\n    'GD',\n    'GE',\n    'GF',\n    'GG',\n    'GH',\n    'GI',\n    'GL',\n    'GM',\n    'GN',\n    'GP',\n    'GQ',\n    'GR',\n    'GS',\n    'GT',\n    'GU',\n    'GW',\n    'GY',\n    'HK',\n    'HM',\n    'HN',\n    'HR',\n    'HT',\n    'HU',\n    'ID',\n    'IE',\n    'IL',\n    'IM',\n    'IN',\n    'IO',\n    'IQ',\n    'IR',\n    'IS',\n    'IT',\n    'JE',\n    'JM',\n    'JO',\n    'JP',\n    'KE',\n    'KG',\n    'KH',\n    'KI',\n    'KM',\n    'KN',\n    'KP',\n    'KR',\n    'KW',\n    'KY',\n    'KZ',\n    'LA',\n    'LB',\n    'LC',\n    'LI',\n    'LK',\n    'LR',\n    'LS',\n    'LT',\n    'LU',\n    'LV',\n    'LY',\n    'MA',\n    'MC',\n    'MD',\n    'ME',\n    'MF',\n    'MG',\n    'MH',\n    'MK',\n    'ML',\n    'MM',\n    'MN',\n    'MO',\n    'MP',\n    'MQ',\n    'MR',\n    'MS',\n    'MT',\n    'MU',\n    'MV',\n    'MW',\n    'MX',\n    'MY',\n    'MZ',\n    'NA',\n    'NC',\n    'NE',\n    'NF',\n    'NG',\n    'NI',\n    'NL',\n    'NO',\n    'NP',\n    'NR',\n    'NU',\n    'NZ',\n    'OM',\n    'PA',\n    'PE',\n    'PF',\n    'PG',\n    'PH',\n    'PK',\n    'PL',\n    'PM',\n    'PN',\n    'PR',\n    'PS',\n    'PT',\n    'PW',\n    'PY',\n    'QA',\n    'RE',\n    'RO',\n    'RS',\n    'RU',\n    'RW',\n    'SA',\n    'SB',\n    'SC',\n    'SD',\n    'SE',\n    'SG',\n    'SH',\n    'SI',\n    'SJ',\n    'SK',\n    'SL',\n    'SM',\n    'SN',\n    'SO',\n    'SR',\n    'SS',\n    'ST',\n    'SV',\n    'SX',\n    'SY',\n    'SZ',\n    'TC',\n    'TD',\n    'TF',\n    'TG',\n    'TH',\n    'TJ',\n    'TK',\n    'TL',\n    'TM',\n    'TN',\n    'TO',\n    'TR',\n    'TT',\n    'TV',\n    'TW',\n    'TZ',\n    'UA',\n    'UG',\n    'UM',\n    'US',\n    'UY',\n    'UZ',\n    'VA',\n    'VC',\n    'VE',\n    'VG',\n    'VI',\n    'VN',\n    'VU',\n    'WF',\n    'WS',\n    'YE',\n    'YT',\n    'ZA',\n    'ZM',\n    'ZW',\n]\n","export const names = [\n    'John',\n    'Raoul',\n    'Jane',\n    'Marcel',\n    'Ibrahim',\n    'Junko',\n    'Lyu',\n    'André',\n    'Maki',\n    'Véronique',\n    'Thibeau',\n    'Josiane',\n    'Raphaël',\n    'Mathéo',\n    'Margot',\n    'Hugo',\n    'Christian',\n    'Louis',\n    'Ella',\n    'Alton',\n    'Jimmy',\n    'Guillaume',\n    'Sébastien',\n    'Alfred',\n    'Bon',\n    'Solange',\n    'Kendrick',\n    'Jared',\n    'Satoko',\n    'Tomoko',\n    'Line',\n    'Delphine',\n    'Leonard',\n    'Alphonse',\n    'Lisa',\n    'Bart',\n    'Benjamin',\n    'Homer',\n    'Jack',\n]\n","export const programmingLanguages = [\n    'php',\n    'make',\n    'javascript',\n    'go',\n    'erlang',\n    'elixir',\n    'lisp',\n    'haskell',\n    'python',\n    'ruby',\n    'hack',\n    'scala',\n    'java',\n    'rust',\n    'c',\n    'css',\n    'sass',\n    'stylus',\n]\n","// configuration for a set of data points\n// strings are descriptors for the set\n// numbers are used for synthetic data generation)\ntype BoxPlotConfig = {\n    group: string\n    subgroup?: string\n    mu: number\n    sd: number\n    n: number\n}\n\n// create a random number from a distribution that has a mean and some spread\n// (uses Math.atanh instead of normal distribution - only meant for test cases)\nconst randomValue = (mu = 0, sigma = 1) => {\n    const z = (Math.random() - 0.5) * 2\n    return Math.atanh(z) * sigma + mu\n}\n\nexport const generateBoxPlotData = (config: BoxPlotConfig[]) => {\n    return config\n        .map(x => {\n            const values = Array(x.n)\n                .fill(0)\n                .map(() => randomValue(x.mu, x.sd))\n            return values.map(v => {\n                return { ...x, value: v }\n            })\n        })\n        .flat()\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { randColor } from './color'\nimport { names } from './sets'\n\ntype Link = {\n    source: string\n    target: string\n    value: number\n}\n\nconst availableNodes = names.map(name => ({ id: name }))\n\nconst getNodeTargets = (id: string, links: Link[], currentPath?: string[]): string[] => {\n    const targets = links\n        .filter(({ source }) => source === id)\n        .map(({ target }) => {\n            if (target === id) {\n                throw new Error(\n                    `[sankey] a node cannot be linked on itself:\\n  link: ${id} —> ${id}`\n                )\n            }\n            if (currentPath?.includes(target)) {\n                throw new Error(\n                    `[sankey] found cyclic dependency:\\n  link: ${currentPath.join(\n                        ' —> '\n                    )} —> ${target}`\n                )\n            }\n            return target\n        })\n\n    return targets.reduce(\n        (acc, targetId) =>\n            acc.concat(\n                getNodeTargets(\n                    targetId,\n                    links,\n                    currentPath ? [...currentPath, targetId] : [id, targetId]\n                )\n            ),\n        targets\n    )\n}\n\nconst getNodesTargets = (links: Link[]) =>\n    links.reduce<Record<string, string[]>>((targetsById, link) => {\n        if (!targetsById[link.source]) {\n            targetsById[link.source] = getNodeTargets(link.source, links)\n        }\n\n        return targetsById\n    }, {})\n\nexport const generateSankeyData = ({\n    nodeCount,\n    maxIterations = 3,\n}: {\n    nodeCount?: number\n    maxIterations?: number\n} = {}) => {\n    const nodes = availableNodes.slice(0, nodeCount).map(node =>\n        Object.assign({}, node, {\n            nodeColor: randColor(),\n        })\n    )\n\n    const links: Link[] = []\n    shuffle(nodes).forEach(({ id }) => {\n        range(random(1, maxIterations)).forEach(() => {\n            const targetsById = getNodesTargets(links)\n            const randId = shuffle(nodes.filter(n => n.id !== id).map(n => n.id))[0]\n            if (\n                (!targetsById[randId] || !targetsById[randId].includes(id)) &&\n                (!targetsById[id] || !targetsById[id].includes(randId))\n            ) {\n                links.push({\n                    source: id,\n                    target: randId,\n                    value: random(5, 200),\n                })\n            }\n        })\n    })\n\n    return { nodes, links }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\n\ntype SwarmPlotDatum = {\n    id: string\n    categories?: number[]\n    group: string\n    price: number\n    volume: number\n}\n\nconst randomPrice = () => random(0, 500)\nconst randomVolume = () => random(4, 20)\nconst randomCategory = () => random(3, 17)\n\nexport const generateSwarmPlotData = (\n    groups: string[],\n    { min = 60, max = 100, categoryCount = 0 }\n) => ({\n    groups,\n    data: groups.reduce<SwarmPlotDatum[]>(\n        (acc, group, groupIndex) => [\n            ...acc,\n            ...range(random(min, max))\n                .map(() => randomPrice())\n                .map((price, index) => {\n                    const datum: SwarmPlotDatum = {\n                        id: `${groupIndex}.${index}`,\n                        group,\n                        price,\n                        volume: randomVolume(),\n                    }\n\n                    if (categoryCount > 0) {\n                        datum.categories = range(categoryCount).map(randomCategory)\n                    }\n\n                    return datum\n                }),\n        ],\n        []\n    ),\n})\n\nexport const randomizeSwarmPlotData = (previousData: ReturnType<typeof generateSwarmPlotData>) => ({\n    groups: previousData.groups,\n    data: previousData.data.map(d => {\n        const datum = {\n            ...d,\n            group: shuffle(previousData.groups)[0],\n            price: randomPrice(),\n            volume: randomVolume(),\n        }\n\n        if (d.categories !== undefined) {\n            datum.categories = range(3).map(randomCategory)\n        }\n\n        return datum\n    }),\n})\n","interface XYRangeStaticValues {\n    values: string[] | number[]\n}\n\ninterface XYRandomNumericValues {\n    length: number\n    min: number\n    max: number\n    round?: boolean\n}\n\ntype XYRangeValues = XYRangeStaticValues | XYRandomNumericValues\n\nconst getValueGenerator = (config: XYRangeValues) => {\n    let generator: (index: number) => string | number\n\n    if ('values' in config) {\n        generator = (index: number) => config.values[index]\n    } else {\n        generator = () => {\n            let value = config.min + Math.random() * (config.max - config.min)\n            if (config.round) {\n                value = Math.round(value)\n            }\n\n            return value\n        }\n    }\n\n    return generator\n}\n\nexport const generateXYSeries = ({\n    serieIds,\n    x,\n    y,\n}: {\n    serieIds: string[]\n    x: XYRangeValues\n    y: XYRangeValues\n}) => {\n    const xLength = 'length' in x ? x.length : x.values.length\n\n    const getX = getValueGenerator(x)\n    const getY = getValueGenerator(y)\n\n    return serieIds.map(serieId => {\n        return {\n            id: serieId,\n            data: Array.from({ length: xLength }).map((_, index) => {\n                return {\n                    x: getX(index),\n                    y: getY(index),\n                }\n            }),\n        }\n    })\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport shuffle from 'lodash/shuffle'\nimport { timeDays } from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport * as color from './color'\nimport * as sets from './sets'\n\nexport { sets }\nexport const randColor = color.randColor\n\nexport const generateProgrammingLanguageStats = (shouldShuffle = true, limit = -1) => {\n    let langs = sets.programmingLanguages\n    if (shouldShuffle) {\n        langs = shuffle(langs)\n    }\n    if (limit < 1) {\n        limit = 1 + Math.round(Math.random() * (sets.programmingLanguages.length - 1))\n    }\n\n    return langs.slice(0, limit).map(language => ({\n        label: language,\n        value: Math.round(Math.random() * 600),\n        color: randColor(),\n    }))\n}\n\nexport const uniqRand = <T>(generator: (...args: unknown[]) => T) => {\n    const used: T[] = []\n\n    return (...args: unknown[]) => {\n        let value\n        do {\n            value = generator(...args)\n        } while (used.includes(value))\n\n        used.push(value)\n\n        return value\n    }\n}\n\nexport const randCountryCode = () => shuffle(sets.countryCodes)[0]\n\ntype DrinkDatum = {\n    id: string\n    color: string\n    data: Array<{\n        color: string\n        x: string\n        y: number\n    }>\n}\n\nexport const generateDrinkStats = (xSize = 16) => {\n    const rand = () => random(0, 60)\n    const types = ['whisky', 'rhum', 'gin', 'vodka', 'cognac']\n    const country = uniqRand(randCountryCode)\n\n    const data: DrinkDatum[] = types.map(id => ({\n        id,\n        color: randColor(),\n        data: [],\n    }))\n\n    range(xSize).forEach(() => {\n        const x = country()\n        types.forEach(id => {\n            data.find(d => d.id === id)?.data.push({\n                color: randColor(),\n                x,\n                y: rand(),\n            })\n        })\n    })\n\n    return data\n}\n\nexport const generateSerie = (xSize = 20) => {\n    const max = 100 + Math.random() * (Math.random() * 600)\n\n    return range(xSize).map(() => Math.round(Math.random() * max))\n}\n\nexport const generateSeries = (ids: string[], xKeys: string[]) =>\n    ids.map(id => ({\n        id,\n        color: randColor(),\n        data: xKeys.map(x => ({ x, y: Math.round(Math.random() * 300) })),\n    }))\n\nexport const generateStackData = (size = 3) => {\n    const length = 16\n    return range(size).map(() => generateSerie(length).map((v, i) => ({ x: i, y: v })))\n}\n\nexport const generateCountriesPopulation = (size: number) => {\n    const countryCode = uniqRand(randCountryCode)\n\n    return range(size).map(() => ({\n        country: countryCode(),\n        population: 200 + Math.round(Math.random() * Math.random() * 1000000),\n    }))\n}\n\nexport const generateOrderedDayCounts = (from: Date, to: Date) => {\n    const days = timeDays(from, to)\n    const dayFormat = timeFormat('%Y-%m-%d')\n\n    return days.map(day => {\n        return {\n            value: Math.round(Math.random() * 400),\n            day: dayFormat(day),\n        }\n    })\n}\n\nexport const generateDayCounts = (from: Date, to: Date, maxSize = 0.9) => {\n    const days = generateOrderedDayCounts(from, to)\n\n    const size =\n        Math.round(days.length * (maxSize * 0.4)) +\n        Math.round(Math.random() * (days.length * (maxSize * 0.6)))\n\n    return shuffle(days).slice(0, size)\n}\n\nexport const generateCountriesData = (\n    keys: string[],\n    { size = 12, min = 0, max = 200, withColors = true } = {}\n) =>\n    sets.countryCodes.slice(0, size).map(country => {\n        const d: Record<string, unknown> = {\n            country,\n        }\n        keys.forEach(key => {\n            d[key] = random(min, max)\n            if (withColors === true) {\n                d[`${key}Color`] = randColor()\n            }\n        })\n\n        return d\n    })\n\nconst libTreeItems = [\n    [\n        'viz',\n        [\n            ['stack', [['cchart'], ['xAxis'], ['yAxis'], ['layers']]],\n            [\n                'ppie',\n                [\n                    ['chart', [['pie', [['outline'], ['slices'], ['bbox']]], ['donut'], ['gauge']]],\n                    ['legends'],\n                ],\n            ],\n        ],\n    ],\n    ['colors', [['rgb'], ['hsl']]],\n    [\n        'utils',\n        [['randomize'], ['resetClock'], ['noop'], ['tick'], ['forceGC'], ['stackTrace'], ['dbg']],\n    ],\n    ['generators', [['address'], ['city'], ['animal'], ['movie'], ['user']]],\n    [\n        'set',\n        [\n            ['clone'],\n            ['intersect'],\n            ['merge'],\n            ['reverse'],\n            ['toArray'],\n            ['toObject'],\n            ['fromCSV'],\n            ['slice'],\n            ['append'],\n            ['prepend'],\n            ['shuffle'],\n            ['pick'],\n            ['plouc'],\n        ],\n    ],\n    [\n        'text',\n        [\n            ['trim'],\n            ['slugify'],\n            ['snakeCase'],\n            ['camelCase'],\n            ['repeat'],\n            ['padLeft'],\n            ['padRight'],\n            ['sanitize'],\n            ['ploucify'],\n        ],\n    ],\n    [\n        'misc',\n        [\n            ['greetings', [['hey'], ['HOWDY'], ['aloha'], ['AHOY']]],\n            ['other'],\n            [\n                'path',\n                [\n                    ['pathA'],\n                    ['pathB', [['pathB1'], ['pathB2'], ['pathB3'], ['pathB4']]],\n                    [\n                        'pathC',\n                        [\n                            ['pathC1'],\n                            ['pathC2'],\n                            ['pathC3'],\n                            ['pathC4'],\n                            ['pathC5'],\n                            ['pathC6'],\n                            ['pathC7'],\n                            ['pathC8'],\n                            ['pathC9'],\n                        ],\n                    ],\n                ],\n            ],\n        ],\n    ],\n]\n\ninterface LibTreeDatum {\n    name: string\n    loc?: number\n    color: string\n    children?: LibTreeDatum[]\n}\n\nexport const generateLibTree = (\n    name = 'nivo',\n    limit?: number | null,\n    children = libTreeItems\n): LibTreeDatum => {\n    limit = limit || children.length\n    if (limit > children.length) {\n        limit = children.length\n    }\n\n    const tree: LibTreeDatum = {\n        name,\n        color: randColor(),\n    }\n    if (children?.length > 0) {\n        tree.children = range(limit).map((_, i) => {\n            const leaf = children[i]\n\n            // full path `${name}.${leaf[0]}`\n            return generateLibTree(leaf[0] as string, null, (leaf[1] ?? []) as any)\n        })\n    } else {\n        tree.loc = Math.round(Math.random() * 200000)\n    }\n\n    return tree\n}\n\nconst wines = ['chardonay', 'carmenere', 'syrah']\nconst wineTastes = ['fruity', 'bitter', 'heavy', 'strong', 'sunny']\n\nexport const generateWinesTastes = ({ randMin = 20, randMax = 120 } = {}) => {\n    const data = wineTastes.map(taste => {\n        const d: Record<string, unknown> = { taste }\n        wines.forEach(wine => {\n            d[wine] = random(randMin, randMax)\n        })\n\n        return d\n    })\n\n    return { data, keys: wines }\n}\n\nexport * from './boxplot'\nexport * from './bullet'\nexport * from './chord'\nexport * from './network'\nexport * from './parallelCoordinates'\nexport * from './sankey'\nexport * from './swarmplot'\nexport * from './waffle'\nexport * from './xySeries'\n","import range from 'lodash/range'\nimport random from 'lodash/random'\n\ntype Options = Partial<{\n    float: boolean\n    markerCount: number\n    measureCount: number\n    rangeCount: number\n    subtitle: string\n    title: string\n}>\n\nexport const generateBulletData = (\n    id: string,\n    max: number,\n    {\n        title,\n        subtitle,\n        rangeCount = 5,\n        measureCount = 1,\n        markerCount = 1,\n        float = false,\n    }: Options = {}\n) => {\n    const ranges = range(rangeCount - 1).reduce(\n        acc => {\n            const remaining = max - acc[0]\n            return [random(remaining, float), ...acc]\n        },\n        [max]\n    )\n\n    const measures = range(measureCount).reduce<number[]>(acc => {\n        if (acc.length === 0) return [random(max, float)]\n        return [random(acc[0], float), ...acc]\n    }, [])\n\n    const markers = range(markerCount).map(() => max * 0.6 + random(max * 0.4))\n\n    return {\n        id,\n        title,\n        subtitle,\n        ranges,\n        measures,\n        markers,\n    }\n}\n","import range from 'lodash/range'\nimport random from 'lodash/random'\nimport { names } from './sets'\n\nexport const generateChordData = ({\n    keys = names,\n    size = 7,\n    minValue = 0,\n    maxValue = 2000,\n} = {}) => {\n    const maxSize = Math.min(keys.length, size)\n    const selectedKeys = keys.slice(0, maxSize)\n\n    const matrix = range(maxSize).map(() =>\n        range(maxSize).map(() => {\n            if (Math.random() < 0.66) return random(minValue, maxValue / 4)\n            return random(minValue, maxValue)\n        })\n    )\n\n    return { matrix, keys: selectedKeys }\n}\n","import random from 'lodash/random'\n\ninterface Id {\n    id: string\n}\n\ninterface Variable {\n    id: string\n    range: [number, number]\n    floating?: boolean\n}\n\ninterface Group {\n    id: string\n}\n\nexport const generateParallelCoordinatesData = ({\n    ids,\n    variables,\n}: {\n    ids: Id[]\n    variables: Variable[]\n}) => {\n    const datumGenerator = () =>\n        variables.reduce((acc, variable) => {\n            const value = random(variable.range[0], variable.range[1], variable.floating)\n\n            return { ...acc, [variable.id]: value }\n        }, {})\n\n    return ids.map(id => {\n        return {\n            ...datumGenerator(),\n            ...id,\n        }\n    })\n}\n\nexport const generateGroupedParallelCoordinatesData = ({\n    ids,\n    groups,\n    variables,\n}: {\n    ids: Id[]\n    groups: Group[]\n    variables: Variable[]\n}) => {\n    const data: Record<string, string | number>[] = []\n\n    for (const group of groups) {\n        // First, generate a baseline for each variable,\n        // so that values within a group are close to each other.\n        const baselineValues: Record<string, { base: number; variation: number }> = {}\n        for (const variable of variables) {\n            baselineValues[variable.id] = {\n                base: random(variable.range[0], variable.range[1], variable.floating),\n                variation: Math.abs(variable.range[1] - variable.range[0]) * 0.12,\n            }\n        }\n\n        for (const id of ids) {\n            const datum: Record<string, string | number> = { ...id, group: group.id }\n            for (const variable of variables) {\n                const baseline = baselineValues[variable.id]\n                const unclampedValue =\n                    baseline.base +\n                    random(-baseline.variation, baseline.variation, variable.floating)\n\n                datum[variable.id] = Math.max(\n                    variable.range[0],\n                    Math.min(variable.range[1], unclampedValue)\n                )\n            }\n\n            data.push(datum)\n        }\n    }\n\n    return data\n}\n","import random from 'lodash/random'\n\ntype Link = {\n    source: string\n    target: string\n    distance: number\n}\n\ntype ExtraNode = {\n    id: string\n    height: number\n    color: string\n    size: number\n}\n\nexport const generateNetworkData = ({\n    rootSize = 32,\n    midSize = 24,\n    leafSize = 12,\n    minMidNodes = 5,\n    maxMidNodes = 11,\n    minLeaves = 3,\n    maxLeaves = 9,\n}: {\n    rootSize?: number\n    midSize?: number\n    leafSize?: number\n    minMidNodes?: number\n    maxMidNodes?: number\n    minLeaves?: number\n    maxLeaves?: number\n} = {}) => {\n    const rootNode = {\n        id: 'Node 0',\n        height: 2,\n        size: rootSize,\n        color: 'rgb(244, 117, 96)',\n    }\n    let nodes = Array.from({ length: random(minMidNodes, maxMidNodes) }, (_, k) => ({\n        id: `Node ${k + 1}`,\n        height: 1,\n        size: midSize,\n        color: 'rgb(97, 205, 187)',\n    }))\n\n    const links: Link[] = []\n    const extraNodes: ExtraNode[] = []\n    nodes.forEach(source => {\n        links.push({\n            source: 'Node 0',\n            target: source.id,\n            distance: 80,\n        })\n        nodes.forEach(target => {\n            if (Math.random() < 0.04) {\n                links.push({\n                    source: source.id,\n                    target: target.id,\n                    distance: 80,\n                })\n            }\n        })\n        Array.from({ length: random(minLeaves, maxLeaves) }, (_, k) => {\n            extraNodes.push({\n                id: `${source.id}.${k}`,\n                height: 0,\n                size: leafSize,\n                color: 'rgb(232, 193, 160)',\n            })\n            links.push({\n                source: source.id,\n                target: `${source.id}.${k}`,\n                distance: 50,\n            })\n\n            return null\n        })\n    })\n\n    nodes.push(rootNode)\n    nodes = nodes.concat(extraNodes)\n\n    return { nodes, links }\n}\n","export interface WaffleDatumSpec {\n    id: string\n    label?: string\n}\n\nexport const generateWaffleData = <D extends WaffleDatumSpec>({\n    groups,\n    total,\n}: {\n    groups: D[]\n    total: number\n}): (D & {\n    label: string\n    value: number\n})[] => {\n    const slice = total / groups.length\n\n    return groups.map(group => {\n        return {\n            ...group,\n            label: group.label !== undefined ? group.label : group.id,\n            value: Math.random() * slice,\n        }\n    })\n}\n"],"names":["randColor","Math","round","random","countryCodes","names","programmingLanguages","availableNodes","map","name","id","getNodeTargets","links","currentPath","targets","filter","_ref","source","_ref2","target","Error","includes","join","reduce","acc","targetId","concat","getNodesTargets","targetsById","link","randomPrice","randomVolume","randomCategory","getValueGenerator","config","generator","index","values","value","min","max","color","uniqRand","used","apply","arguments","push","randCountryCode","shuffle","sets","generateSerie","xSize","range","generateOrderedDayCounts","from","to","days","timeDays","dayFormat","timeFormat","day","libTreeItems","wines","wineTastes","x","Array","n","fill","mu","sigma","z","atanh","randomValue","sd","v","_extends","flat","_temp","title","subtitle","_ref$rangeCount","rangeCount","_ref$measureCount","measureCount","_ref$markerCount","markerCount","_ref$float","float","ranges","remaining","measures","length","markers","_ref$keys","keys","_ref$size","size","_ref$minValue","minValue","_ref$maxValue","maxValue","maxSize","selectedKeys","slice","matrix","_ref$min","_ref$max","_ref$withColors","withColors","country","d","forEach","key","countryCode","population","types","data","_data$find","find","y","_step","ids","groups","variables","_iterator","_createForOfIteratorHelperLoose","done","_step2","group","baselineValues","_iterator2","variable","base","floating","variation","abs","_step3","_iterator3","_step4","datum","_iterator4","baseline","unclampedValue","generateLibTree","limit","children","_children","tree","_","i","_leaf$","leaf","loc","_ref$rootSize","rootSize","_ref$midSize","midSize","_ref$leafSize","leafSize","_ref$minMidNodes","minMidNodes","_ref$maxMidNodes","maxMidNodes","_ref$minLeaves","minLeaves","_ref$maxLeaves","maxLeaves","rootNode","height","nodes","k","extraNodes","distance","datumGenerator","_extends2","shouldShuffle","langs","language","label","_ref3","nodeCount","_ref3$maxIterations","maxIterations","node","Object","assign","nodeColor","_ref4","randId","xKeys","_ref$categoryCount","categoryCount","groupIndex","price","volume","categories","total","undefined","_temp2","_ref2$randMin","randMin","_ref2$randMax","randMax","taste","wine","serieIds","xLength","getX","getY","serieId","previousData"],"mappings":"mJAAaA,EAAY,WAAH,MAAgBC,OAAAA,KAAKC,MAAsB,IAAhBD,KAAKE,UAAe,aAAA,ECAxDC,EAAe,CACxjB,OACA,QACA,OACA,SACA,UACA,QACA,MACA,QACA,OACA,YACA,UACA,UACA,UACA,SACA,SACA,OACA,YACA,QACA,OACA,QACA,QACA,YACA,YACA,SACA,MACA,UACA,WACA,QACA,SACA,SACA,OACA,WACA,UACA,WACA,OACA,OACA,WACA,QACA,QCvCSC,EAAuB,CAChC,MACA,OACA,aACA,KACA,SACA,SACA,OACA,UACA,SACA,OACA,OACA,QACA,OACA,OACA,IACA,MACA,OACA,onCCLJ,ICDMC,EAAiBF,EAAMG,KAAI,SAAAC,GAAI,MAAK,CAAEC,GAAID,EAAM,IAEhDE,EAAiB,SAAjBA,EAAkBD,EAAYE,EAAeC,GAC/C,IAAMC,EAAUF,EACXG,QAAO,SAAAC,GAAS,OAAAA,EAANC,SAAwBP,CAAE,IACpCF,KAAI,SAAAU,GAAgB,IAAbC,EAAMD,EAANC,OACJ,GAAIA,IAAWT,EACX,MAAM,IAAIU,MAAK,wDAC6CV,EAAE,OAAOA,GAGzE,SAAIG,GAAAA,EAAaQ,SAASF,GACtB,MAAM,IAAIC,MAAK,8CACmCP,EAAYS,KACtD,QACIH,OAAAA,GAGhB,OAAOA,CACX,IAEJ,OAAOL,EAAQS,QACX,SAACC,EAAKC,GAAQ,OACVD,EAAIE,OACAf,EACIc,EACAb,EACAC,EAAW,GAAAa,OAAOb,EAAaY,CAAAA,IAAY,CAACf,EAAIe,IAEvD,GACLX,EAER,EAEMa,EAAkB,SAACf,GAAa,OAClCA,EAAMW,QAAiC,SAACK,EAAaC,GAKjD,OAJKD,EAAYC,EAAKZ,UAClBW,EAAYC,EAAKZ,QAAUN,EAAekB,EAAKZ,OAAQL,IAGpDgB,CACV,GAAE,CAAE,EAAC,ECzCJE,EAAc,WAAH,OAAS3B,EAAO,EAAG,IAAI,EAClC4B,EAAe,WAAH,OAAS5B,EAAO,EAAG,GAAG,EAClC6B,EAAiB,WAAH,OAAS7B,EAAO,EAAG,GAAG,ECDpC8B,EAAoB,SAACC,GACvB,IAAIC,EAeJ,OAZIA,EADA,WAAYD,EACA,SAACE,GAAa,OAAKF,EAAOG,OAAOD,EAAM,EAEvC,WACR,IAAIE,EAAQJ,EAAOK,IAAMtC,KAAKE,UAAY+B,EAAOM,IAAMN,EAAOK,KAK9D,OAJIL,EAAOhC,QACPoC,EAAQrC,KAAKC,MAAMoC,IAGhBA,GAIRH,CACX,ECrBanC,EAAYyC,EAkBZC,EAAW,SAAIP,GACxB,IAAMQ,EAAY,GAElB,OAAO,WACH,IAAIL,EACJ,GACIA,EAAQH,EAASS,WAAA,EAAAC,iBACZF,EAAKtB,SAASiB,IAIvB,OAFAK,EAAKG,KAAKR,GAEHA,EAEf,EAEaS,EAAkB,WAAH,OAASC,EAAQC,GAAmB,EAAE,EAqCrDC,EAAgB,SAACC,QAAK,IAALA,IAAAA,EAAQ,IAClC,IAAMX,EAAM,IAAMvC,KAAKE,UAA4B,IAAhBF,KAAKE,UAExC,OAAOiD,EAAMD,GAAO3C,KAAI,WAAA,OAAMP,KAAKC,MAAMD,KAAKE,SAAWqC,KAC7D,EAuBaa,EAA2B,SAACC,EAAYC,GACjD,IAAMC,EAAOC,EAAAA,SAASH,EAAMC,GACtBG,EAAYC,aAAW,YAE7B,OAAOH,EAAKhD,KAAI,SAAAoD,GACZ,MAAO,CACHtB,MAAOrC,KAAKC,MAAsB,IAAhBD,KAAKE,UACvByD,IAAKF,EAAUE,GAEvB,GACJ,EA8BMC,EAAe,CACjB,CACI,MACA,CACI,CAAC,QAAS,CAAC,CAAC,UAAW,CAAC,SAAU,CAAC,SAAU,CAAC,YAC9C,CACI,OACA,CACI,CAAC,QAAS,CAAC,CAAC,MAAO,CAAC,CAAC,WAAY,CAAC,UAAW,CAAC,UAAW,CAAC,SAAU,CAAC,WACrE,CAAC,eAKjB,CAAC,SAAU,CAAC,CAAC,OAAQ,CAAC,SACtB,CACI,QACA,CAAC,CAAC,aAAc,CAAC,cAAe,CAAC,QAAS,CAAC,QAAS,CAAC,WAAY,CAAC,cAAe,CAAC,SAEtF,CAAC,aAAc,CAAC,CAAC,WAAY,CAAC,QAAS,CAAC,UAAW,CAAC,SAAU,CAAC,UAC/D,CACI,MACA,CACI,CAAC,SACD,CAAC,aACD,CAAC,SACD,CAAC,WACD,CAAC,WACD,CAAC,YACD,CAAC,WACD,CAAC,SACD,CAAC,UACD,CAAC,WACD,CAAC,WACD,CAAC,QACD,CAAC,WAGT,CACI,OACA,CACI,CAAC,QACD,CAAC,WACD,CAAC,aACD,CAAC,aACD,CAAC,UACD,CAAC,WACD,CAAC,YACD,CAAC,YACD,CAAC,cAGT,CACI,OACA,CACI,CAAC,YAAa,CAAC,CAAC,OAAQ,CAAC,SAAU,CAAC,SAAU,CAAC,UAC/C,CAAC,SACD,CACI,OACA,CACI,CAAC,SACD,CAAC,QAAS,CAAC,CAAC,UAAW,CAAC,UAAW,CAAC,UAAW,CAAC,YAChD,CACI,QACA,CACI,CAAC,UACD,CAAC,UACD,CAAC,UACD,CAAC,UACD,CAAC,UACD,CAAC,UACD,CAAC,UACD,CAAC,UACD,CAAC,iBA4CvBC,EAAQ,CAAC,YAAa,YAAa,SACnCC,EAAa,CAAC,SAAU,SAAU,QAAS,SAAU,qCJtPxB,SAAC7B,GAChC,OAAOA,EACF1B,KAAI,SAAAwD,GAID,OAHeC,MAAMD,EAAEE,GAClBC,KAAK,GACL3D,KAAI,WAAA,OAVD,SAAC4D,EAAQC,QAAN,IAAFD,IAAAA,EAAK,QAAQ,IAALC,IAAAA,EAAQ,GACjC,IAAMC,EAA4B,GAAvBrE,KAAKE,SAAW,IAC3B,OAAOF,KAAKsE,MAAMD,GAAKD,EAAQD,CACnC,CAO2BI,CAAYR,EAAEI,GAAIJ,EAAES,OACrBjE,KAAI,SAAAkE,GACd,OAAAC,KAAYX,EAAC,CAAE1B,MAAOoC,GAC1B,GACJ,IACCE,MACT,6BKjBkC,SAC9BlE,EACA8B,EAAWqC,GASV,IAAA7D,WAAA6D,EADY,CAAE,EAAAA,EANXC,EAAK9D,EAAL8D,MACAC,EAAQ/D,EAAR+D,SAAQC,EAAAhE,EACRiE,WAAAA,OAAa,IAAHD,EAAG,EAACA,EAAAE,EAAAlE,EACdmE,aAAAA,OAAe,IAAHD,EAAG,EAACA,EAAAE,EAAApE,EAChBqE,YAAAA,OAAc,IAAHD,EAAG,EAACA,EAAAE,EAAAtE,EAAA,MACfuE,OAAQ,IAAHD,GAAQA,EAkBjB,MAAO,CACH5E,GAAAA,EACAoE,MAAAA,EACAC,SAAAA,EACAS,OAnBWpC,EAAM6B,EAAa,GAAG1D,QACjC,SAAAC,GACI,IAAMiE,EAAYjD,EAAMhB,EAAI,GAC5B,MAAQrB,CAAAA,EAAOsF,EAAWF,IAAM7D,OAAKF,EACzC,GACA,CAACgB,IAeDkD,SAZatC,EAAM+B,GAAc5D,QAAiB,SAAAC,GAClD,OAAmB,IAAfA,EAAImE,OAAqB,CAACxF,EAAOqC,EAAK+C,IAC1C,CAAQpF,EAAOqB,EAAI,GAAI+D,IAAM7D,OAAKF,EACrC,GAAE,IAUCoE,QARYxC,EAAMiC,GAAa7E,KAAI,WAAA,MAAY,GAANgC,EAAYrC,EAAa,GAANqC,MAUpE,4BC3CiC,SAAHqC,GAKnB,IAAA7D,WAAA6D,EAAP,CAAE,EAAAA,EAAAgB,EAAA7E,EAJF8E,KAAAA,OAAOzF,IAAHwF,EAAGxF,EAAKwF,EAAAE,EAAA/E,EACZgF,KAAAA,OAAO,IAAHD,EAAG,EAACA,EAAAE,EAAAjF,EACRkF,SAAAA,OAAW,IAAHD,EAAG,EAACA,EAAAE,EAAAnF,EACZoF,SAAAA,OAAW,IAAHD,EAAG,IAAIA,EAETE,EAAUpG,KAAKsC,IAAIuD,EAAKH,OAAQK,GAChCM,EAAeR,EAAKS,MAAM,EAAGF,GASnC,MAAO,CAAEG,OAPMpD,EAAMiD,GAAS7F,KAAI,WAAA,OAC9B4C,EAAMiD,GAAS7F,KAAI,WACf,OAAIP,KAAKE,SAAW,IAAaA,EAAO+F,EAAUE,EAAW,GACtDjG,EAAO+F,EAAUE,EAC5B,GAAE,IAGWN,KAAMQ,EAC3B,gCF2GqC,SACjCR,EAAcjB,GAAA,IAAA7D,WAAA6D,EACyC,CAAE,EAAAA,EAAAkB,EAAA/E,EAAvDgF,KAAAA,OAAO,IAAHD,EAAG,GAAEA,EAAAU,EAAAzF,EAAEuB,IAAAA,OAAM,IAAHkE,EAAG,EAACA,EAAAC,EAAA1F,EAAEwB,IAAAA,OAAM,IAAHkE,EAAG,IAAGA,EAAAC,EAAA3F,EAAE4F,WAAAA,OAAa,IAAHD,GAAOA,EAAA,OAElD1D,EAAkBsD,MAAM,EAAGP,GAAMxF,KAAI,SAAAqG,GACjC,IAAMC,EAA6B,CAC/BD,QAAAA,GASJ,OAPAf,EAAKiB,SAAQ,SAAAC,GACTF,EAAEE,GAAO7G,EAAOoC,EAAKC,IACF,IAAfoE,IACAE,EAAKE,EAAG,SAAWhH,IAE3B,IAEO8G,CACX,GAAE,sCA/CqC,SAACd,GACxC,IAAMiB,EAAcvE,EAASK,GAE7B,OAAOK,EAAM4C,GAAMxF,KAAI,WAAA,MAAO,CAC1BqG,QAASI,IACTC,WAAY,IAAMjH,KAAKC,MAAMD,KAAKE,SAAWF,KAAKE,SAAW,KAChE,GACL,4BAciC,SAACmD,EAAYC,EAAU8C,QAAO,IAAPA,IAAAA,EAAU,IAC9D,IAAM7C,EAAOH,EAAyBC,EAAMC,GAEtCyC,EACF/F,KAAKC,MAAMsD,EAAKmC,QAAoB,GAAVU,IAC1BpG,KAAKC,MAAMD,KAAKE,UAAYqD,EAAKmC,QAAoB,GAAVU,KAE/C,OAAOrD,EAAQQ,GAAM+C,MAAM,EAAGP,EAClC,6BAxEkC,SAAC7C,QAAK,IAALA,IAAAA,EAAQ,IACvC,IACMgE,EAAQ,CAAC,SAAU,OAAQ,MAAO,QAAS,UAC3CN,EAAUnE,EAASK,GAEnBqE,EAAqBD,EAAM3G,KAAI,SAAAE,GAAE,MAAK,CACxCA,GAAAA,EACA+B,MAAOzC,IACPoH,KAAM,GACT,IAaD,OAXAhE,EAAMD,GAAO4D,SAAQ,WACjB,IAAM/C,EAAI6C,IACVM,EAAMJ,SAAQ,SAAArG,GAAM,IAAA2G,SAChBA,EAAAD,EAAKE,MAAK,SAAAR,GAAC,OAAIA,EAAEpG,KAAOA,CAAE,MAA1B2G,EAA6BD,KAAKtE,KAAK,CACnCL,MAAOzC,IACPgE,EAAAA,EACAuD,EAhBOpH,EAAO,EAAG,KAkBzB,GACJ,IAEOiH,CACX,iDGvCsD,SAAHlG,GAW/C,IAHE,IAGwBsG,EAV1BC,EAAGvG,EAAHuG,IACAC,EAAMxG,EAANwG,OACAC,EAASzG,EAATyG,UAMMP,EAA0C,GAEhDQ,EAAAC,EAAoBH,KAAMF,EAAAI,KAAAE,MAAE,CAIxB,IAJwB,IAIQC,EAJzBC,EAAKR,EAAAlF,MAGN2F,EAAsE,CAAA,EAC5EC,EAAAL,EAAuBF,KAASI,EAAAG,KAAAJ,MAAE,CAAA,IAAvBK,EAAQJ,EAAAzF,MACf2F,EAAeE,EAASzH,IAAM,CAC1B0H,KAAMjI,EAAOgI,EAAS/E,MAAM,GAAI+E,EAAS/E,MAAM,GAAI+E,EAASE,UAC5DC,UAA6D,IAAlDrI,KAAKsI,IAAIJ,EAAS/E,MAAM,GAAK+E,EAAS/E,MAAM,IAE/D,CAEA,IAAA,IAAoBoF,EAApBC,EAAAZ,EAAiBJ,KAAGe,EAAAC,KAAAX,MAAE,CAElB,IAFkB,IAEcY,EAD1BC,EAAsChE,EAAA,CAAA,EADnC6D,EAAAlG,MAC6C,CAAE0F,MAAOA,EAAMtH,KACrEkI,EAAAf,EAAuBF,KAASe,EAAAE,KAAAd,MAAE,CAAA,IAAvBK,EAAQO,EAAApG,MACTuG,EAAWZ,EAAeE,EAASzH,IACnCoI,EACFD,EAAST,KACTjI,GAAQ0I,EAASP,UAAWO,EAASP,UAAWH,EAASE,UAE7DM,EAAMR,EAASzH,IAAMT,KAAKuC,IACtB2F,EAAS/E,MAAM,GACfnD,KAAKsC,IAAI4F,EAAS/E,MAAM,GAAI0F,GAEpC,CAEA1B,EAAKtE,KAAK6F,EACd,CACJ,CAEA,OAAOvB,CACX,0BH4J+B,SAAlB2B,EACTtI,EACAuI,EACAC,GACe,IAAAC,OAHX,IAAJzI,IAAAA,EAAO,aAEC,IAARwI,IAAAA,EAAWpF,IAEXmF,EAAQA,GAASC,EAAStD,QACdsD,EAAStD,SACjBqD,EAAQC,EAAStD,QAGrB,IAAMwD,EAAqB,CACvB1I,KAAAA,EACAgC,MAAOzC,KAaX,OAXY,OAARkJ,EAAAD,QAAQ,EAARC,EAAUvD,QAAS,EACnBwD,EAAKF,SAAW7F,EAAM4F,GAAOxI,KAAI,SAAC4I,EAAGC,GAAM,IAAAC,EACjCC,EAAON,EAASI,GAGtB,OAAON,EAAgBQ,EAAK,GAAc,YAAID,EAAGC,EAAK,IAAED,EAAI,GAChE,IAEAH,EAAKK,IAAMvJ,KAAKC,MAAsB,IAAhBD,KAAKE,UAGxBgJ,CACX,8BItPmC,SAAHtE,GAgBrB,IAAA7D,WAAA6D,EAAP,CAAE,EAAAA,EAAA4E,EAAAzI,EAfF0I,SAAAA,OAAW,IAAHD,EAAG,GAAEA,EAAAE,EAAA3I,EACb4I,QAAAA,OAAU,IAAHD,EAAG,GAAEA,EAAAE,EAAA7I,EACZ8I,SAAAA,OAAW,IAAHD,EAAG,GAAEA,EAAAE,EAAA/I,EACbgJ,YAAAA,OAAc,IAAHD,EAAG,EAACA,EAAAE,EAAAjJ,EACfkJ,YAAAA,OAAc,IAAHD,EAAG,GAAEA,EAAAE,EAAAnJ,EAChBoJ,UAAAA,OAAY,IAAHD,EAAG,EAACA,EAAAE,EAAArJ,EACbsJ,UAAAA,OAAY,IAAHD,EAAG,EAACA,EAUPE,EAAW,CACb7J,GAAI,SACJ8J,OAAQ,EACRxE,KAAM0D,EACNjH,MAAO,qBAEPgI,EAAQxG,MAAMX,KAAK,CAAEqC,OAAQxF,EAAO6J,EAAaE,KAAgB,SAACd,EAAGsB,GAAC,MAAM,CAC5EhK,GAAYgK,SAAAA,EAAI,GAChBF,OAAQ,EACRxE,KAAM4D,EACNnH,MAAO,oBACV,IAEK7B,EAAgB,GAChB+J,EAA0B,GAoChC,OAnCAF,EAAM1D,SAAQ,SAAA9F,GACVL,EAAMkC,KAAK,CACP7B,OAAQ,SACRE,OAAQF,EAAOP,GACfkK,SAAU,KAEdH,EAAM1D,SAAQ,SAAA5F,GACNlB,KAAKE,SAAW,KAChBS,EAAMkC,KAAK,CACP7B,OAAQA,EAAOP,GACfS,OAAQA,EAAOT,GACfkK,SAAU,IAGtB,IACA3G,MAAMX,KAAK,CAAEqC,OAAQxF,EAAOiK,EAAWE,KAAc,SAAClB,EAAGsB,GAarD,OAZAC,EAAW7H,KAAK,CACZpC,GAAOO,EAAOP,OAAMgK,EACpBF,OAAQ,EACRxE,KAAM8D,EACNrH,MAAO,uBAEX7B,EAAMkC,KAAK,CACP7B,OAAQA,EAAOP,GACfS,OAAWF,EAAOP,OAAMgK,EACxBE,SAAU,KAGP,IACX,GACJ,IAEAH,EAAM3H,KAAKyH,GAGJ,CAAEE,MAFTA,EAAQA,EAAM/I,OAAOiJ,GAEL/J,MAAAA,EACpB,6EDnE+C,SAAHI,GAMtC,IALFyG,EAAGzG,EAAHyG,IACAE,EAAS3G,EAAT2G,UAYA,OAAOF,EAAIjH,KAAI,SAAAE,GACX,OAAAiE,EACOkG,CAAAA,EARPlD,EAAUpG,QAAO,SAACC,EAAK2G,GAAa,IAAA2C,EAC1BxI,EAAQnC,EAAOgI,EAAS/E,MAAM,GAAI+E,EAAS/E,MAAM,GAAI+E,EAASE,UAEpE,OAAA1D,EAAA,CAAA,EAAYnD,IAAGsJ,EAAAA,CAAAA,GAAG3C,EAASzH,IAAK4B,EAAKwI,GACxC,GAAE,CAAE,GAKEpK,EAEX,GACJ,2CHzBgD,SAACqK,EAAsB/B,QAAT,IAAb+B,IAAAA,GAAgB,QAAW,IAAL/B,IAAAA,GAAS,GAC5E,IAAIgC,EAAQ/H,EAQZ,OAPI8H,IACAC,EAAQhI,EAAQgI,IAEhBhC,EAAQ,IACRA,EAAQ,EAAI/I,KAAKC,MAAMD,KAAKE,UAAY8C,EAA0B0C,OAAS,KAGxEqF,EAAMzE,MAAM,EAAGyC,GAAOxI,KAAI,SAAAyK,GAAQ,MAAK,CAC1CC,MAAOD,EACP3I,MAAOrC,KAAKC,MAAsB,IAAhBD,KAAKE,UACvBsC,MAAOzC,IACV,GACL,6BH8BkC,SAAH6E,GAMpB,IAAAsG,WAAAtG,EAAP,CAAE,EAAAA,EALFuG,EAASD,EAATC,UAASC,EAAAF,EACTG,cAAAA,OAAgB,IAAHD,EAAG,EAACA,EAKXZ,EAAQlK,EAAegG,MAAM,EAAG6E,GAAW5K,KAAI,SAAA+K,GAAI,OACrDC,OAAOC,OAAO,CAAE,EAAEF,EAAM,CACpBG,UAAW1L,KACb,IAGAY,EAAgB,GAkBtB,OAjBAoC,EAAQyH,GAAO1D,SAAQ,SAAA4E,GAAY,IAATjL,EAAEiL,EAAFjL,GACtB0C,EAAMjD,EAAO,EAAGmL,IAAgBvE,SAAQ,WACpC,IAAMnF,EAAcD,EAAgBf,GAC9BgL,EAAS5I,EAAQyH,EAAM1J,QAAO,SAAAmD,GAAC,OAAIA,EAAExD,KAAOA,CAAE,IAAEF,KAAI,SAAA0D,GAAC,OAAIA,EAAExD,OAAK,GAEhEkB,EAAYgK,IAAYhK,EAAYgK,GAAQvK,SAASX,IACrDkB,EAAYlB,IAAQkB,EAAYlB,GAAIW,SAASuK,IAE/ChL,EAAMkC,KAAK,CACP7B,OAAQP,EACRS,OAAQyK,EACRtJ,MAAOnC,EAAO,EAAG,MAG7B,GACJ,IAEO,CAAEsK,MAAAA,EAAO7J,MAAAA,EACpB,iDGF8B,SAAC6G,EAAeoE,GAAe,OACzDpE,EAAIjH,KAAI,SAAAE,GAAE,MAAK,CACXA,GAAAA,EACA+B,MAAOzC,IACPoH,KAAMyE,EAAMrL,KAAI,SAAAwD,GAAC,MAAK,CAAEA,EAAAA,EAAGuD,EAAGtH,KAAKC,MAAsB,IAAhBD,KAAKE,cACjD,GAAE,4BAE0B,SAAC6F,QAAI,IAAJA,IAAAA,EAAO,GAErC,OAAO5C,EAAM4C,GAAMxF,KAAI,WAAA,OAAM0C,EADd,IACoC1C,KAAI,SAACkE,EAAG2E,GAAC,MAAM,CAAErF,EAAGqF,EAAG9B,EAAG7C,EAAG,MACpF,gCF/EqC,SACjCgD,EAAgB1G,GAAA,IAAAyF,EAAAzF,EACduB,IAAAA,OAAM,IAAHkE,EAAG,GAAEA,EAAAC,EAAA1F,EAAEwB,IAAAA,OAAM,IAAHkE,EAAG,IAAGA,EAAAoF,EAAA9K,EAAE+K,cAAAA,OAAgB,IAAHD,EAAG,EAACA,EAAA,MACtC,CACFpE,OAAAA,EACAN,KAAMM,EAAOnG,QACT,SAACC,EAAKwG,EAAOgE,GAAU,MAAA,GAAAtK,OAChBF,EACA4B,EAAMjD,EAAOoC,EAAKC,IAChBhC,KAAI,WAAA,OAAMsB,GAAa,IACvBtB,KAAI,SAACyL,EAAO7J,GACT,IAAMuG,EAAwB,CAC1BjI,GAAOsL,EAAU,IAAI5J,EACrB4F,MAAAA,EACAiE,MAAAA,EACAC,OAAQnK,KAOZ,OAJIgK,EAAgB,IAChBpD,EAAMwD,WAAa/I,EAAM2I,GAAevL,IAAIwB,IAGzC2G,CACV,IACR,GACD,IAEP,6BOtCiC,SAAH3H,GASvB,IARJ0G,EAAM1G,EAAN0G,OASMnB,EARDvF,EAALoL,MAQsB1E,EAAO/B,OAE7B,OAAO+B,EAAOlH,KAAI,SAAAwH,GACd,OAAArD,KACOqD,EAAK,CACRkD,WAAuBmB,IAAhBrE,EAAMkD,MAAsBlD,EAAMkD,MAAQlD,EAAMtH,GACvD4B,MAAOrC,KAAKE,SAAWoG,GAE/B,GACJ,8BLkPmC,SAAH+F,GAA6C,IAAApL,WAAAoL,EAAP,CAAE,EAAAA,EAAAC,EAAArL,EAAlCsL,QAAAA,OAAU,IAAHD,EAAG,GAAEA,EAAAE,EAAAvL,EAAEwL,QAAAA,OAAU,IAAHD,EAAG,IAAGA,EAU7D,MAAO,CAAErF,KATIrD,EAAWvD,KAAI,SAAAmM,GACxB,IAAM7F,EAA6B,CAAE6F,MAAAA,GAKrC,OAJA7I,EAAMiD,SAAQ,SAAA6F,GACV9F,EAAE8F,GAAQzM,EAAOqM,EAASE,EAC9B,IAEO5F,CACX,IAEehB,KAAMhC,EACzB,2BDrPgC,SAAH9C,GAQvB,IAPF6L,EAAQ7L,EAAR6L,SACA7I,EAAChD,EAADgD,EACAuD,EAACvG,EAADuG,EAMMuF,EAAU,WAAY9I,EAAIA,EAAE2B,OAAS3B,EAAE3B,OAAOsD,OAE9CoH,EAAO9K,EAAkB+B,GACzBgJ,EAAO/K,EAAkBsF,GAE/B,OAAOsF,EAASrM,KAAI,SAAAyM,GAChB,MAAO,CACHvM,GAAIuM,EACJ7F,KAAMnD,MAAMX,KAAK,CAAEqC,OAAQmH,IAAWtM,KAAI,SAAC4I,EAAGhH,GAC1C,MAAO,CACH4B,EAAG+I,EAAK3K,GACRmF,EAAGyF,EAAK5K,OAIxB,GACJ,+EDZsC,SAAC8K,GAAsD,MAAM,CAC/FxF,OAAQwF,EAAaxF,OACrBN,KAAM8F,EAAa9F,KAAK5G,KAAI,SAAAsG,GACxB,IAAM6B,EAAKhE,EAAA,CAAA,EACJmC,EAAC,CACJkB,MAAOhF,EAAQkK,EAAaxF,QAAQ,GACpCuE,MAAOnK,IACPoK,OAAQnK,MAOZ,YAJqBsK,IAAjBvF,EAAEqF,aACFxD,EAAMwD,WAAa/I,EAAM,GAAG5C,IAAIwB,IAG7B2G,KAEd"}