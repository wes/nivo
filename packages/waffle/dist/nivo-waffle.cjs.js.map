{"version":3,"file":"nivo-waffle.cjs.js","sources":["../src/WaffleCell.tsx","../src/defaults.ts","../src/WaffleTooltip.tsx","../src/WaffleCellHtml.tsx","../src/types.ts","../src/hooks.ts","../src/WaffleCells.tsx","../src/WaffleArea.tsx","../src/WaffleAreas.tsx","../src/Waffle.tsx","../src/WaffleCellsHtml.tsx","../src/WaffleAreaHtml.tsx","../src/WaffleAreasHtml.tsx","../src/WaffleHtml.tsx","../src/WaffleCanvas.tsx","../src/ResponsiveWaffle.tsx","../src/ResponsiveWaffleCanvas.tsx","../src/ResponsiveWaffleHtml.tsx"],"sourcesContent":["import { animated } from '@react-spring/web'\nimport { Datum, CellComponentProps } from './types'\n\nexport const WaffleCell = <D extends Datum>({\n    cell,\n    animatedProps,\n    borderRadius,\n    borderWidth,\n    testIdPrefix,\n}: CellComponentProps<D>) => (\n    <animated.rect\n        x={animatedProps.x}\n        y={animatedProps.y}\n        width={animatedProps.size}\n        height={animatedProps.size}\n        rx={borderRadius}\n        ry={borderRadius}\n        opacity={animatedProps.opacity}\n        fill={cell.fill || animatedProps.color}\n        stroke={animatedProps.borderColor}\n        strokeWidth={borderWidth}\n        data-test-id={testIdPrefix ? `${testIdPrefix}.cell_${cell.key}` : undefined}\n    />\n)\n","import { CommonProps, Datum, WaffleHtmlLayer, WaffleSvgLayer } from './types'\nimport { WaffleCell } from './WaffleCell'\nimport { WaffleCellHtml } from './WaffleCellHtml'\nimport { WaffleTooltip } from './WaffleTooltip'\n\nexport const commonDefaultProps: Omit<\n    CommonProps<Datum>,\n    | 'valueFormat'\n    | 'margin'\n    | 'theme'\n    | 'labelFormat'\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'forwardLegendData'\n    | 'renderWrapper'\n    | 'ariaLabel'\n    | 'ariaLabelledBy'\n    | 'ariaDescribedBy'\n> = {\n    hiddenIds: [],\n\n    fillDirection: 'top',\n    padding: 0,\n\n    colors: { scheme: 'nivo' },\n    emptyColor: '#cccccc',\n    emptyOpacity: 1,\n    borderRadius: 0,\n    borderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    isInteractive: true,\n    tooltip: WaffleTooltip,\n\n    role: 'img',\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    layers: ['cells', 'areas', 'legends'] as WaffleSvgLayer<Datum>[],\n    cellComponent: WaffleCell,\n    defs: [],\n    fill: [],\n    legends: [],\n    motionStagger: 0,\n}\n\nexport const htmlDefaultProps = {\n    ...commonDefaultProps,\n    layers: ['cells', 'areas'] as WaffleHtmlLayer<Datum>[],\n    cellComponent: WaffleCellHtml,\n    defs: [],\n    fill: [],\n    legends: [],\n    motionStagger: 0,\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    legends: [],\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { Datum, TooltipProps } from './types'\n\nexport const WaffleTooltip = <RawDatum extends Datum>({ data }: TooltipProps<RawDatum>) => (\n    <BasicTooltip\n        id={data.label}\n        value={data.formattedValue}\n        enableChip={true}\n        color={data.color}\n    />\n)\n","import { animated } from '@react-spring/web'\nimport { Datum, CellComponentProps } from './types'\n\nexport const WaffleCellHtml = <D extends Datum>({\n    cell,\n    animatedProps,\n    borderRadius,\n    borderWidth,\n    testIdPrefix,\n}: CellComponentProps<D>) => (\n    <animated.div\n        style={{\n            position: 'absolute',\n            top: animatedProps.y,\n            left: animatedProps.x,\n            width: animatedProps.size,\n            height: animatedProps.size,\n            background: animatedProps.color,\n            opacity: animatedProps.opacity,\n            boxSizing: 'content-box',\n            borderStyle: 'solid',\n            borderRadius: `${borderRadius}px`,\n            borderWidth: `${borderWidth}px`,\n            borderColor: animatedProps.borderColor,\n        }}\n        data-test-id={testIdPrefix ? `${testIdPrefix}${cell.key}` : undefined}\n    />\n)\n","import { AriaAttributes, FunctionComponent, MouseEvent } from 'react'\nimport { SpringValues } from '@react-spring/web'\nimport { Box, Dimensions, Theme, SvgDefsAndFill, MotionProps, ValueFormat } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { LegendProps } from '@nivo/legends'\nimport { Vertex, GridCell, GridFillDirection } from '@nivo/grid'\n\nexport type DatumId = string | number\n\nexport interface Datum {\n    id: string\n    label: string\n    value: number\n}\n\nexport interface ComputedDatum<D extends Datum> extends Datum {\n    data: D\n    isHidden: boolean\n    formattedValue: string\n    groupIndex: number\n    // Index of the starting cell\n    startAt: number\n    // Index of the ending cell\n    endAt: number\n    polygons: Vertex[][]\n    color: string\n    // Used for patterns & gradients\n    fill?: string\n    borderColor: string\n}\n\n// Used for cells without data, considered empty.\nexport interface EmptyCell extends GridCell {\n    color: string\n    // Used for patterns & gradients\n    fill?: string\n    opacity: number\n    borderColor: string\n}\n\n// Used for cells having data.\nexport interface DataCell<D extends Datum> extends EmptyCell {\n    data: ComputedDatum<D>\n}\n\nexport type Cell<D extends Datum> = EmptyCell | DataCell<D>\n\nexport const isDataCell = <D extends Datum>(cell: Cell<D>): cell is DataCell<D> => {\n    return (cell as DataCell<D>).data !== undefined\n}\n\nexport type CellAnimatedProps = {\n    x: number\n    y: number\n    size: number\n    color: string\n    opacity: number\n    borderColor: string\n}\n\nexport interface LegendDatum<D extends Datum = Datum> {\n    id: D['id']\n    label: D['label']\n    color: string\n    data: ComputedDatum<D>\n}\n\n/**\n * When using a custom cell component, if you want to preserve transitions,\n * you should use an SVG element from `@react-spring/web`, for example\n * `animated.rect`.\n */\nexport interface CellComponentProps<D extends Datum> {\n    cell: Cell<D>\n    padding: number\n    animatedProps: SpringValues<CellAnimatedProps>\n    borderRadius: number\n    borderWidth: number\n    testIdPrefix?: string\n}\nexport type CellComponent<D extends Datum> = FunctionComponent<CellComponentProps<D>>\n\n// All those props are required\nexport interface DataProps<D extends Datum> {\n    data: readonly D[]\n    total: number\n    rows: number\n    columns: number\n}\n\nexport interface TooltipProps<D extends Datum> {\n    data: ComputedDatum<D>\n}\nexport type TooltipComponent<D extends Datum> = FunctionComponent<TooltipProps<D>>\n\n// Most of those props are optional for the public API,\n// but required internally, using defaults.\nexport interface CommonProps<D extends Datum> extends MotionProps {\n    hiddenIds: D['id'][]\n    margin: Box\n    valueFormat?: ValueFormat<D['value']>\n    fillDirection: GridFillDirection\n    padding: number\n    theme: Theme\n    colors: OrdinalColorScaleConfig<D>\n    emptyColor: string\n    emptyOpacity: number\n    borderRadius: number\n    borderWidth: number\n    borderColor: InheritedColorConfig<ComputedDatum<D> | { color: string }>\n    isInteractive: boolean\n    tooltip: TooltipComponent<D>\n    forwardLegendData: (data: LegendDatum<D>[]) => void\n    role: string\n    renderWrapper: boolean\n    ariaLabel: AriaAttributes['aria-label']\n    ariaLabelledBy: AriaAttributes['aria-labelledby']\n    ariaDescribedBy: AriaAttributes['aria-describedby']\n}\n\nexport type MouseHandler<D extends Datum, E extends Element> = (\n    data: ComputedDatum<D>,\n    event: MouseEvent<E>\n) => void\n\nexport interface MouseHandlers<D extends Datum, E extends Element> {\n    onClick: MouseHandler<D, E>\n    onMouseEnter: MouseHandler<D, E>\n    onMouseMove: MouseHandler<D, E>\n    onMouseLeave: MouseHandler<D, E>\n}\n\nexport type LayerId = 'cells' | 'areas' | 'legends'\n\nexport interface CustomLayerProps<D extends Datum> {\n    cells: Cell<D>[]\n    computedData: ComputedDatum<D>[]\n}\n\nexport type WaffleSvgLayer<D extends Datum> = LayerId | FunctionComponent<CustomLayerProps<D>>\n\nexport type WaffleSvgProps<D extends Datum = Datum> = DataProps<D> &\n    Dimensions &\n    Partial<CommonProps<D>> &\n    SvgDefsAndFill<ComputedDatum<D>> &\n    Partial<MouseHandlers<D, SVGGeometryElement>> & {\n        layers?: WaffleSvgLayer<D>[]\n        legends?: LegendProps[]\n        cellComponent?: CellComponent<D>\n        motionStagger?: number\n        testIdPrefix?: string\n    }\n\nexport type HtmlLayerId = Exclude<LayerId, 'legends'>\n\nexport type WaffleHtmlLayer<D extends Datum> = HtmlLayerId | FunctionComponent<CustomLayerProps<D>>\n\nexport type WaffleHtmlProps<D extends Datum = Datum> = DataProps<D> &\n    Dimensions &\n    Partial<CommonProps<D>> &\n    Partial<MouseHandlers<D, HTMLElement>> & {\n        layers?: WaffleHtmlLayer<D>[]\n        cellComponent?: CellComponent<D>\n        motionStagger?: number\n        testIdPrefix?: string\n    }\n\nexport type CanvasProps<D extends Datum = Datum> = DataProps<D> &\n    Dimensions &\n    Partial<CommonProps<D>> &\n    Partial<Omit<MouseHandlers<D, HTMLCanvasElement>, 'onMouseEnter' | 'onMouseLeave'>> & {\n        legends?: LegendProps[]\n        pixelRatio?: number\n    }\n","import { createElement, MouseEvent, useCallback, useEffect, useMemo, useRef } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { line as d3Line, curveLinearClosed } from 'd3-shape'\nimport {\n    useMotionConfig,\n    useTheme,\n    useValueFormatter,\n    // @ts-ignore\n    bindDefs,\n} from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { OrdinalColorScaleConfig, useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { generateGrid, GridCell, GridFillDirection, Vertex, getCellsPolygons } from '@nivo/grid'\nimport {\n    CommonProps,\n    ComputedDatum,\n    Datum,\n    DataProps,\n    EmptyCell,\n    Cell,\n    DataCell,\n    isDataCell,\n    MouseHandlers,\n    TooltipComponent,\n    LegendDatum,\n    WaffleSvgProps,\n    CustomLayerProps,\n    CellAnimatedProps,\n} from './types'\nimport { commonDefaultProps } from './defaults'\n\n/**\n * Computes empty cells according to dimensions/layout/padding.\n * At this stage the cells aren't bound to any data.\n */\nexport const computeGrid = ({\n    width,\n    height,\n    rows,\n    columns,\n    fillDirection,\n    emptyColor,\n    emptyOpacity,\n    getBorderColor,\n}: {\n    width: number\n    height: number\n    rows: number\n    columns: number\n    fillDirection: GridFillDirection\n    emptyColor: string\n    emptyOpacity: number\n    getBorderColor: ReturnType<typeof useInheritedColor<{ color: string }>>\n}) => {\n    const borderColor = getBorderColor({ color: emptyColor })\n    const extend = (cell: GridCell, origin: [number, number]): EmptyCell => ({\n        ...cell,\n        x: origin[0] + cell.x,\n        y: origin[1] + cell.y,\n        color: emptyColor,\n        opacity: emptyOpacity,\n        borderColor,\n    })\n\n    // We do not apply the padding at this stage so that we can\n    // easily compute the polygon surrounding each \"area\"\n    // (all cells belonging to a specific datum), because they\n    // need to touch.\n    const { cells } = generateGrid<EmptyCell>({\n        width,\n        height,\n        rows,\n        columns,\n        fillDirection,\n        square: true,\n        extend,\n    })\n\n    return cells\n}\n\nexport const mergeCellsData = <RawDatum extends Datum>(\n    cells: EmptyCell[],\n    data: ComputedDatum<RawDatum>[]\n) => {\n    const cellsCopy: Cell<RawDatum>[] = cells.map(cell => ({ ...cell }))\n\n    data.forEach(datum => {\n        for (let index = datum.startAt; index < datum.endAt; index++) {\n            const cell = cellsCopy[index]\n            if (cell !== undefined) {\n                const cellWithData = cell as DataCell<RawDatum>\n                cellWithData.data = datum\n                cellWithData.color = datum.color\n                cellWithData.opacity = 1\n                cellWithData.borderColor = datum.borderColor\n\n                if (datum.fill) {\n                    cellWithData.fill = datum.fill\n                }\n            }\n        }\n    }, [])\n\n    return cellsCopy\n}\n\n/**\n * Assumes that cells ares sorted by group.\n */\nconst findPolygons = <D extends Datum>(grid: DataCell<D>[]) => {\n    const grouped = grid.reduce((acc, cell) => {\n        ;(acc[cell.data.id] = acc[cell.data.id] || []).push(cell)\n        return acc\n    }, {} as Record<string | number, DataCell<D>[]>)\n\n    const polygons: Partial<Record<D['id'], Vertex[][]>> = {}\n    for (const [group, cells] of Object.entries(grouped)) {\n        polygons[group as D['id']] = getCellsPolygons(cells)\n    }\n\n    return polygons\n}\n\nexport const useWaffle = <D extends Datum = Datum>({\n    width,\n    height,\n    data,\n    hiddenIds,\n    valueFormat,\n    total,\n    rows,\n    columns,\n    fillDirection = commonDefaultProps.fillDirection,\n    colors = commonDefaultProps.colors as OrdinalColorScaleConfig<D>,\n    emptyColor = commonDefaultProps.emptyColor,\n    emptyOpacity = commonDefaultProps.emptyOpacity,\n    borderColor = commonDefaultProps.borderColor,\n    forwardLegendData,\n    // `defs` and `fill` are only supported for the SVG implementation\n    defs = [],\n    fill = [],\n}: Pick<\n    CommonProps<D>,\n    | 'hiddenIds'\n    | 'valueFormat'\n    | 'fillDirection'\n    | 'colors'\n    | 'emptyColor'\n    | 'emptyOpacity'\n    | 'borderColor'\n> &\n    Pick<WaffleSvgProps<D>, 'defs' | 'fill'> &\n    DataProps<D> & {\n        width: number\n        height: number\n        forwardLegendData?: CommonProps<D>['forwardLegendData']\n    }) => {\n    const formatValue = useValueFormatter(valueFormat)\n\n    const getColor = useOrdinalColorScale<D>(colors, 'id')\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n\n    const unit = total / (rows * columns)\n\n    const computedData: Array<ComputedDatum<D>> = useMemo(() => {\n        let currentPosition = 0\n\n        const enhancedData: ComputedDatum<D>[] = []\n\n        data.forEach((datum, groupIndex) => {\n            const isHidden = hiddenIds.includes(datum.id)\n\n            const startAt = currentPosition\n            let endAt = startAt\n            if (!isHidden) {\n                endAt = startAt + Math.round(datum.value / unit)\n            }\n            currentPosition = endAt\n\n            const color = getColor(datum)\n\n            const enhancedDatum: ComputedDatum<D> = {\n                id: datum.id,\n                isHidden,\n                label: datum.label,\n                value: datum.value,\n                formattedValue: formatValue(datum.value),\n                groupIndex,\n                startAt,\n                endAt,\n                color,\n                // Temporary, it's re-computed later as the inherited color\n                // needs the computed data.\n                borderColor: color,\n                data: datum,\n                polygons: [],\n            }\n            enhancedDatum.borderColor = getBorderColor(enhancedDatum)\n\n            enhancedData.push(enhancedDatum)\n        })\n\n        return enhancedData\n    }, [data, hiddenIds, unit, formatValue, getColor, getBorderColor])\n\n    // Please note that this also mutates `computedData`.\n    const boundDefs = useMemo(() => bindDefs(defs, computedData, fill), [computedData, defs, fill])\n\n    const emptyCells = useMemo(\n        () =>\n            computeGrid({\n                width,\n                height,\n                rows,\n                columns,\n                fillDirection,\n                emptyColor,\n                emptyOpacity,\n                getBorderColor,\n            }),\n        [width, height, rows, columns, fillDirection, emptyColor, emptyOpacity, getBorderColor]\n    )\n\n    const cells = useMemo(\n        () => mergeCellsData(emptyCells, computedData),\n        [emptyCells, computedData]\n    )\n\n    const polygons = useMemo(() => findPolygons(cells.filter(isDataCell)), [cells])\n    computedData.forEach(datum => {\n        if (datum.id in polygons) {\n            datum.polygons = polygons[datum.id as D['id']]!\n        }\n    })\n\n    const legendData: LegendDatum<D>[] = useMemo(() => {\n        const _legendData = computedData.map(datum => ({\n            id: datum.id,\n            label: datum.label,\n            color: datum.color,\n            // fill: datum.fill,,\n            data: datum,\n        }))\n\n        // Adjust the legend items order according to `fillDirection`\n        // so that it's more natural to read.\n        if (['top', 'left'].includes(fillDirection)) {\n            _legendData.reverse()\n        }\n\n        return _legendData\n    }, [computedData, fillDirection])\n\n    // Forward the legends data if `forwardLegendData` is defined.\n    const forwardLegendDataRef = useRef(forwardLegendData)\n    useEffect(() => {\n        if (typeof forwardLegendDataRef.current !== 'function') return\n        forwardLegendDataRef.current(legendData)\n    }, [forwardLegendDataRef, legendData])\n\n    return {\n        cells,\n        computedData,\n        legendData,\n        getBorderColor,\n        boundDefs,\n    }\n}\n\n/**\n * This D3 path generator is used to compute the polygons\n * surrounding each group of cells attached to the same datum.\n */\nexport const useAreaPathGenerator = () => useMemo(() => d3Line().curve(curveLinearClosed), [])\n\n/**\n * Generate event handlers for both the SVG & HTML implementations,\n * for the canvas implementation, we don't need it because the current\n * cell is detected using a global event handler attached to the canvas itself.\n */\nexport const useAreaMouseHandlers = <D extends Datum, E extends Element>(\n    data: ComputedDatum<D>,\n    { onMouseEnter, onMouseMove, onMouseLeave, onClick }: Partial<MouseHandlers<D, E>>,\n    tooltip: TooltipComponent<D>\n) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<E>) => {\n            showTooltipFromEvent(createElement(tooltip, { data }), event)\n            onMouseEnter?.(data, event)\n        },\n        [showTooltipFromEvent, data, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<E>) => {\n            showTooltipFromEvent(createElement(tooltip, { data }), event)\n            onMouseMove?.(data, event)\n        },\n        [showTooltipFromEvent, data, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<E>) => {\n            hideTooltip()\n            onMouseLeave?.(data, event)\n        },\n        [hideTooltip, data, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<E>) => {\n            hideTooltip()\n            onClick?.(data, event)\n        },\n        [hideTooltip, data, onClick]\n    )\n\n    return {\n        handleMouseEnter,\n        handleMouseMove,\n        handleMouseLeave,\n        handleClick,\n    }\n}\n\n/**\n * Generate cells transitions for the SVG & HTML implementations.\n */\nexport const useAnimatedCells = <D extends Datum>({\n    cells,\n    padding,\n    motionStagger,\n}: {\n    cells: Cell<D>[]\n    padding: number\n    motionStagger: number\n}) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const getAnimatedProps = useMemo(\n        () =>\n            (cell: Cell<D>): CellAnimatedProps => ({\n                x: cell.x + padding / 2,\n                y: cell.y + padding / 2,\n                color: cell.color,\n                size: cell.width - padding,\n                opacity: cell.opacity,\n                borderColor: cell.borderColor,\n            }),\n        [padding]\n    )\n\n    return useTransition<Cell<D>, CellAnimatedProps>(cells, {\n        keys: cell => cell.key,\n        initial: getAnimatedProps,\n        enter: getAnimatedProps,\n        update: getAnimatedProps,\n        trail: animate ? motionStagger : undefined,\n        config: springConfig,\n        immediate: !animate,\n    })\n}\n\n/**\n * Memoize custom layers props.\n */\nexport const useCustomLayerProps = <D extends Datum>({\n    cells,\n    computedData,\n}: CustomLayerProps<D>): CustomLayerProps<D> =>\n    useMemo(\n        () => ({\n            cells,\n            computedData,\n        }),\n        [cells, computedData]\n    )\n","import { createElement } from 'react'\nimport { Cell, Datum, WaffleSvgProps, CellComponent } from './types'\nimport { useAnimatedCells } from './hooks'\n\ninterface WaffleCellsProps<D extends Datum> {\n    cells: Cell<D>[]\n    cellComponent: CellComponent<D>\n    padding: number\n    borderRadius: number\n    borderWidth: number\n    motionStagger: number\n    testIdPrefix: WaffleSvgProps<D>['testIdPrefix']\n}\n\nexport const WaffleCells = <D extends Datum>({\n    cells,\n    cellComponent,\n    padding,\n    borderRadius,\n    borderWidth,\n    motionStagger,\n    testIdPrefix,\n}: WaffleCellsProps<D>) => {\n    const transition = useAnimatedCells<D>({\n        cells,\n        padding,\n        motionStagger,\n    })\n\n    return (\n        <g>\n            {transition((animatedProps, cell) => {\n                return createElement(cellComponent, {\n                    key: cell.key,\n                    cell,\n                    padding,\n                    animatedProps,\n                    borderRadius,\n                    borderWidth,\n                    testIdPrefix,\n                })\n            })}\n        </g>\n    )\n}\n","import { Line } from 'd3-shape'\nimport { ComputedDatum, Datum, WaffleSvgProps } from './types'\nimport { Vertex } from '@nivo/grid'\nimport { useAreaMouseHandlers } from './hooks'\n\ninterface WaffleAreaProps<D extends Datum> {\n    data: ComputedDatum<D>\n    pathGenerator: Line<Vertex>\n    isInteractive: Exclude<WaffleSvgProps<D>['isInteractive'], undefined>\n    onMouseEnter: WaffleSvgProps<D>['onMouseEnter']\n    onMouseMove: WaffleSvgProps<D>['onMouseMove']\n    onMouseLeave: WaffleSvgProps<D>['onMouseLeave']\n    onClick: WaffleSvgProps<D>['onClick']\n    tooltip: Exclude<WaffleSvgProps<D>['tooltip'], undefined>\n    testIdPrefix: WaffleSvgProps<D>['testIdPrefix']\n}\n\nexport const WaffleArea = <D extends Datum>({\n    data,\n    pathGenerator,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    testIdPrefix,\n}: WaffleAreaProps<D>) => {\n    const { handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick } =\n        useAreaMouseHandlers<D, SVGPathElement>(\n            data,\n            {\n                onMouseEnter,\n                onMouseMove,\n                onMouseLeave,\n                onClick,\n            },\n            tooltip\n        )\n\n    return (\n        <>\n            {data.polygons.map((polygon, index) => (\n                <path\n                    key={index}\n                    d={pathGenerator(polygon)!}\n                    fill=\"#000000\"\n                    fillOpacity={0}\n                    onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                    onMouseMove={isInteractive ? handleMouseMove : undefined}\n                    onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                    onClick={isInteractive ? handleClick : undefined}\n                    data-test-id={\n                        testIdPrefix\n                            ? `${testIdPrefix}.area_${data.id}.polygon_${index}`\n                            : undefined\n                    }\n                />\n            ))}\n        </>\n    )\n}\n","import { ComputedDatum, Datum, WaffleSvgProps } from './types'\nimport { useAreaPathGenerator } from './hooks'\nimport { WaffleArea } from './WaffleArea'\n\ninterface WaffleAreasProps<D extends Datum> {\n    data: ComputedDatum<D>[]\n    isInteractive: Exclude<WaffleSvgProps<D>['isInteractive'], undefined>\n    onMouseEnter: WaffleSvgProps<D>['onMouseEnter']\n    onMouseMove: WaffleSvgProps<D>['onMouseMove']\n    onMouseLeave: WaffleSvgProps<D>['onMouseLeave']\n    onClick: WaffleSvgProps<D>['onClick']\n    tooltip: Exclude<WaffleSvgProps<D>['tooltip'], undefined>\n    testIdPrefix?: string\n}\n\nexport const WaffleAreas = <D extends Datum>({\n    data,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    testIdPrefix,\n}: WaffleAreasProps<D>) => {\n    const pathGenerator = useAreaPathGenerator()\n\n    return (\n        <g>\n            {data.map(datum => {\n                if (datum.isHidden) return null\n\n                return (\n                    <WaffleArea<D>\n                        key={datum.id}\n                        data={datum}\n                        pathGenerator={pathGenerator}\n                        isInteractive={isInteractive}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                        tooltip={tooltip}\n                        testIdPrefix={testIdPrefix}\n                    />\n                )\n            })}\n        </g>\n    )\n}\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { Datum, WaffleSvgProps, LayerId, TooltipComponent } from './types'\nimport { svgDefaultProps } from './defaults'\nimport { useWaffle, useCustomLayerProps } from './hooks'\nimport { WaffleCells } from './WaffleCells'\nimport { WaffleAreas } from './WaffleAreas'\n\ntype InnerWaffleProps<D extends Datum> = Omit<\n    WaffleSvgProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerWaffle = <D extends Datum>({\n    width,\n    height,\n    margin: partialMargin,\n    data,\n    valueFormat,\n    total,\n    rows,\n    columns,\n    fillDirection = svgDefaultProps.fillDirection,\n    padding = svgDefaultProps.padding,\n    hiddenIds = svgDefaultProps.hiddenIds,\n    layers = svgDefaultProps.layers as LayerId[],\n    cellComponent = svgDefaultProps.cellComponent,\n    colors = svgDefaultProps.colors as OrdinalColorScaleConfig<D>,\n    emptyColor = svgDefaultProps.emptyColor,\n    emptyOpacity = svgDefaultProps.emptyOpacity,\n    borderRadius = svgDefaultProps.borderRadius,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n    isInteractive = svgDefaultProps.isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = svgDefaultProps.tooltip as TooltipComponent<D>,\n    forwardLegendData,\n    legends = svgDefaultProps.legends,\n    motionStagger = svgDefaultProps.motionStagger,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    testIdPrefix,\n}: InnerWaffleProps<D>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { cells, legendData, computedData, boundDefs } = useWaffle<D>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        hiddenIds,\n        valueFormat,\n        total,\n        rows,\n        columns,\n        fillDirection,\n        colors,\n        emptyColor,\n        emptyOpacity,\n        borderColor,\n        forwardLegendData,\n        defs,\n        fill,\n    })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        cells: null,\n        areas: null,\n        legends: null,\n    }\n\n    if (layers.includes('cells')) {\n        layerById.cells = (\n            <WaffleCells<D>\n                key=\"cells\"\n                cells={cells}\n                cellComponent={cellComponent}\n                padding={padding}\n                borderRadius={borderRadius}\n                borderWidth={borderWidth}\n                motionStagger={motionStagger}\n                testIdPrefix={testIdPrefix}\n            />\n        )\n    }\n\n    if (layers.includes('areas')) {\n        layerById.areas = (\n            <WaffleAreas<D>\n                key=\"areas\"\n                data={computedData}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                testIdPrefix={testIdPrefix}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <g key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={width}\n                        containerHeight={height}\n                        data={legendData}\n                    />\n                ))}\n            </g>\n        )\n    }\n\n    const customLayerProps = useCustomLayerProps<D>({\n        cells,\n        computedData,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Waffle = <D extends Datum = Datum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: WaffleSvgProps<D>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerWaffle<D> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { createElement } from 'react'\nimport { Margin } from '@nivo/core'\nimport { Cell, Datum, CellComponent, WaffleHtmlProps } from './types'\nimport { useAnimatedCells } from './hooks'\n\ninterface WaffleCellsHtmlProps<D extends Datum> {\n    cells: Cell<D>[]\n    cellComponent: CellComponent<D>\n    padding: number\n    margin: Margin\n    borderRadius: number\n    borderWidth: number\n    motionStagger: number\n    testIdPrefix: WaffleHtmlProps<D>['testIdPrefix']\n}\n\nexport const WaffleCellsHtml = <D extends Datum>({\n    cells,\n    cellComponent,\n    padding,\n    borderRadius,\n    borderWidth,\n    motionStagger,\n    testIdPrefix,\n    margin,\n}: WaffleCellsHtmlProps<D>) => {\n    const transition = useAnimatedCells<D>({\n        cells,\n        padding,\n        motionStagger,\n    })\n\n    return (\n        <div\n            style={{\n                position: 'absolute',\n                top: margin.top,\n                left: margin.left,\n            }}\n        >\n            {transition((animatedProps, cell) => {\n                return createElement(cellComponent, {\n                    key: cell.key,\n                    cell,\n                    padding,\n                    animatedProps,\n                    borderRadius,\n                    borderWidth,\n                    testIdPrefix,\n                })\n            })}\n        </div>\n    )\n}\n","import { Line } from 'd3-shape'\nimport { Vertex } from '@nivo/grid'\nimport { ComputedDatum, Datum, WaffleHtmlProps } from './types'\nimport { useAreaMouseHandlers } from './hooks'\n\ninterface WaffleAreaHtmlProps<D extends Datum> {\n    data: ComputedDatum<D>\n    pathGenerator: Line<Vertex>\n    isInteractive: Exclude<WaffleHtmlProps<D>['isInteractive'], undefined>\n    onMouseEnter: WaffleHtmlProps<D>['onMouseEnter']\n    onMouseMove: WaffleHtmlProps<D>['onMouseMove']\n    onMouseLeave: WaffleHtmlProps<D>['onMouseLeave']\n    onClick: WaffleHtmlProps<D>['onClick']\n    tooltip: Exclude<WaffleHtmlProps<D>['tooltip'], undefined>\n    testIdPrefix: WaffleHtmlProps<D>['testIdPrefix']\n}\n\nexport const WaffleAreaHtml = <D extends Datum>({\n    data,\n    pathGenerator,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    testIdPrefix,\n}: WaffleAreaHtmlProps<D>) => {\n    const { handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick } =\n        useAreaMouseHandlers<D, HTMLElement>(\n            data,\n            {\n                onMouseEnter,\n                onMouseMove,\n                onMouseLeave,\n                onClick,\n            },\n            tooltip\n        )\n\n    return (\n        <>\n            {data.polygons.map((polygon, index) => (\n                <div\n                    key={index}\n                    style={{\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        width: '100%',\n                        height: '100%',\n                        backgroundColor: 'transparent',\n                        clipPath: `path('${pathGenerator(polygon)}')`,\n                    }}\n                    onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n                    onMouseMove={isInteractive ? handleMouseMove : undefined}\n                    onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n                    onClick={isInteractive ? handleClick : undefined}\n                    data-test-id={\n                        testIdPrefix\n                            ? `${testIdPrefix}.area_${data.id}.polygon_${index}`\n                            : undefined\n                    }\n                />\n            ))}\n        </>\n    )\n}\n","import { Margin } from '@nivo/core'\nimport { ComputedDatum, Datum, WaffleHtmlProps } from './types'\nimport { useAreaPathGenerator } from './hooks'\nimport { WaffleAreaHtml } from './WaffleAreaHtml'\n\ninterface WaffleAreasHtmlProps<D extends Datum> {\n    data: ComputedDatum<D>[]\n    margin: Margin\n    isInteractive: Exclude<WaffleHtmlProps<D>['isInteractive'], undefined>\n    onMouseEnter: WaffleHtmlProps<D>['onMouseEnter']\n    onMouseMove: WaffleHtmlProps<D>['onMouseMove']\n    onMouseLeave: WaffleHtmlProps<D>['onMouseLeave']\n    onClick: WaffleHtmlProps<D>['onClick']\n    tooltip: Exclude<WaffleHtmlProps<D>['tooltip'], undefined>\n    testIdPrefix: WaffleHtmlProps<D>['testIdPrefix']\n}\n\nexport const WaffleAreasHtml = <D extends Datum>({\n    data,\n    margin,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    testIdPrefix,\n}: WaffleAreasHtmlProps<D>) => {\n    const pathGenerator = useAreaPathGenerator()\n\n    return (\n        <div\n            style={{\n                position: 'absolute',\n                top: margin.top,\n                left: margin.left,\n                width: '100%',\n                height: '100%',\n            }}\n        >\n            {data.map(datum => {\n                if (datum.isHidden) return null\n\n                return (\n                    <WaffleAreaHtml<D>\n                        key={datum.id}\n                        data={datum}\n                        pathGenerator={pathGenerator}\n                        isInteractive={isInteractive}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                        tooltip={tooltip}\n                        testIdPrefix={testIdPrefix}\n                    />\n                )\n            })}\n        </div>\n    )\n}\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, useDimensions } from '@nivo/core'\nimport { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { Datum, CellComponent, WaffleHtmlProps, TooltipComponent, HtmlLayerId } from './types'\nimport { htmlDefaultProps } from './defaults'\nimport { useCustomLayerProps, useWaffle } from './hooks'\nimport { WaffleCellsHtml } from './WaffleCellsHtml'\nimport { WaffleAreasHtml } from './WaffleAreasHtml'\n\ntype InnerWaffleHtmlProps<D extends Datum> = Omit<\n    WaffleHtmlProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerWaffleHtml = <D extends Datum>({\n    width,\n    height,\n    margin: partialMargin,\n    data,\n    valueFormat,\n    total,\n    rows,\n    columns,\n    fillDirection = htmlDefaultProps.fillDirection,\n    hiddenIds = htmlDefaultProps.hiddenIds,\n    padding = htmlDefaultProps.padding,\n    layers = htmlDefaultProps.layers as HtmlLayerId[],\n    cellComponent = htmlDefaultProps.cellComponent as unknown as CellComponent<D>,\n    colors = htmlDefaultProps.colors as OrdinalColorScaleConfig<D>,\n    emptyColor = htmlDefaultProps.emptyColor,\n    emptyOpacity = htmlDefaultProps.emptyOpacity,\n    borderRadius = htmlDefaultProps.borderRadius,\n    borderWidth = htmlDefaultProps.borderWidth,\n    borderColor = htmlDefaultProps.borderColor,\n    isInteractive = htmlDefaultProps.isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = htmlDefaultProps.tooltip as TooltipComponent<D>,\n    forwardLegendData,\n    motionStagger = htmlDefaultProps.motionStagger,\n    role = htmlDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    testIdPrefix,\n}: InnerWaffleHtmlProps<D>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { cells, computedData } = useWaffle<D>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        hiddenIds,\n        valueFormat,\n        total,\n        rows,\n        columns,\n        fillDirection,\n        colors,\n        emptyColor,\n        emptyOpacity,\n        borderColor,\n        forwardLegendData,\n    })\n\n    const layerById: Record<HtmlLayerId, ReactNode> = {\n        cells: null,\n        areas: null,\n    }\n\n    if (layers.includes('cells')) {\n        layerById.cells = (\n            <WaffleCellsHtml<D>\n                key=\"cells\"\n                cells={cells}\n                cellComponent={cellComponent}\n                padding={padding}\n                margin={margin}\n                borderRadius={borderRadius}\n                borderWidth={borderWidth}\n                motionStagger={motionStagger}\n                testIdPrefix={testIdPrefix}\n            />\n        )\n    }\n\n    if (layers.includes('areas')) {\n        layerById.areas = (\n            <WaffleAreasHtml<D>\n                key=\"areas\"\n                data={computedData}\n                margin={margin}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                testIdPrefix={testIdPrefix}\n            />\n        )\n    }\n\n    const customLayerProps = useCustomLayerProps<D>({\n        cells,\n        computedData,\n    })\n\n    return (\n        <div\n            style={{\n                position: 'relative',\n                width: outerWidth,\n                height: outerHeight,\n            }}\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </div>\n    )\n}\n\nexport const WaffleHtml = <D extends Datum = Datum>({\n    isInteractive = htmlDefaultProps.isInteractive,\n    animate = htmlDefaultProps.animate,\n    motionConfig = htmlDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: WaffleHtmlProps<D>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerWaffleHtml<D> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { createElement, MouseEvent, useCallback, useEffect, useRef } from 'react'\nimport {\n    isCursorInRect,\n    getRelativeCursor,\n    Container,\n    useDimensions,\n    useTheme,\n    Margin,\n} from '@nivo/core'\nimport { roundedRect } from '@nivo/canvas'\nimport { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { CanvasProps, Datum, isDataCell, TooltipComponent, Cell } from './types'\nimport { canvasDefaultProps } from './defaults'\nimport { useWaffle } from './hooks'\n\nconst findCellUnderCursor = <D extends Datum>(\n    cells: Cell<D>[],\n    margin: Margin,\n    x: number,\n    y: number\n) =>\n    cells.find(cell =>\n        isCursorInRect(margin.left + cell.x, margin.top + cell.y, cell.width, cell.height, x, y)\n    )\n\ntype InnerWaffleCanvasProps<D extends Datum> = Omit<CanvasProps<D>, 'renderWrapper' | 'theme'>\n\nconst InnerWaffleCanvas = <D extends Datum>({\n    width,\n    height,\n    margin: partialMargin,\n    data,\n    valueFormat,\n    total,\n    rows,\n    columns,\n    fillDirection = canvasDefaultProps.fillDirection,\n    hiddenIds = canvasDefaultProps.hiddenIds,\n    padding = canvasDefaultProps.padding,\n    colors = canvasDefaultProps.colors as OrdinalColorScaleConfig<D>,\n    emptyColor = canvasDefaultProps.emptyColor,\n    emptyOpacity = canvasDefaultProps.emptyOpacity,\n    borderRadius = canvasDefaultProps.borderRadius,\n    borderWidth = canvasDefaultProps.borderWidth,\n    borderColor = canvasDefaultProps.borderColor,\n    isInteractive = canvasDefaultProps.isInteractive,\n    onMouseMove,\n    onClick,\n    tooltip = canvasDefaultProps.tooltip as TooltipComponent<D>,\n    forwardLegendData,\n    legends = canvasDefaultProps.legends,\n    role = canvasDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n}: InnerWaffleCanvasProps<D>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { cells, legendData } = useWaffle<D>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        hiddenIds,\n        valueFormat,\n        total,\n        rows,\n        columns,\n        fillDirection,\n        colors,\n        emptyColor,\n        emptyOpacity,\n        borderColor,\n        forwardLegendData,\n    })\n\n    const theme = useTheme()\n\n    useEffect(() => {\n        if (canvasEl.current === null) return\n\n        const ctx = canvasEl.current.getContext('2d')\n        if (ctx === null) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        cells.forEach(cell => {\n            ctx.save()\n\n            ctx.fillStyle = cell.color\n            ctx.globalAlpha = cell.opacity\n\n            const x = cell.x + padding / 2\n            const y = cell.y + padding / 2\n            const cellWidth = cell.width - padding\n            const cellHeight = cell.height - padding\n\n            ctx.beginPath()\n            roundedRect(ctx, x, y, cellWidth, cellHeight, borderRadius)\n            ctx.fill()\n\n            if (borderWidth > 0) {\n                ctx.strokeStyle = cell.borderColor\n                ctx.lineWidth = borderWidth\n\n                ctx.beginPath()\n                roundedRect(ctx, x, y, cellWidth, cellHeight, borderRadius)\n                ctx.stroke()\n            }\n\n            ctx.restore()\n        })\n\n        legends.forEach(legend => {\n            renderLegendToCanvas(ctx, {\n                ...legend,\n                data: legendData,\n                containerWidth: width,\n                containerHeight: height,\n                theme,\n            })\n        })\n    }, [\n        canvasEl,\n        margin,\n        outerWidth,\n        outerHeight,\n        cells,\n        padding,\n        borderRadius,\n        borderWidth,\n        theme,\n        width,\n        height,\n        pixelRatio,\n        legends,\n        legendData,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (canvasEl.current === null) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const cell = findCellUnderCursor(cells, margin, x, y)\n\n            if (cell !== undefined && isDataCell(cell)) {\n                showTooltipFromEvent(createElement(tooltip, { data: cell.data }), event, 'top')\n                onMouseMove?.(cell.data, event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [canvasEl, cells, margin, showTooltipFromEvent, hideTooltip, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    const handleClick = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (!onClick || canvasEl.current === null) return\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            const cell = findCellUnderCursor(cells, margin, x, y)\n\n            if (cell !== undefined && isDataCell(cell)) {\n                onClick(cell.data, event)\n            }\n        },\n        [canvasEl, cells, margin, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n            role={role}\n            aria-label={ariaLabel}\n            aria-labelledby={ariaLabelledBy}\n            aria-describedby={ariaDescribedBy}\n        />\n    )\n}\n\nexport const WaffleCanvas = <D extends Datum = Datum>({\n    theme,\n    isInteractive = canvasDefaultProps.isInteractive,\n    animate = canvasDefaultProps.animate,\n    motionConfig = canvasDefaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: CanvasProps<D>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerWaffleCanvas<D> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { WaffleSvgProps, Datum } from './types'\nimport { Waffle } from './Waffle'\n\nexport const ResponsiveWaffle = <RawDatum extends Datum>(\n    props: Omit<WaffleSvgProps<RawDatum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Waffle<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { CanvasProps, Datum } from './types'\nimport { WaffleCanvas } from './WaffleCanvas'\n\nexport const ResponsiveWaffleCanvas = <D extends Datum>(\n    props: Omit<CanvasProps<D>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <WaffleCanvas<D> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { WaffleHtmlProps, Datum } from './types'\nimport { WaffleHtml } from './WaffleHtml'\n\nexport const ResponsiveWaffleHtml = <RawDatum extends Datum>(\n    props: Omit<WaffleHtmlProps<RawDatum>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <WaffleHtml<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["commonDefaultProps","hiddenIds","fillDirection","padding","colors","scheme","emptyColor","emptyOpacity","borderRadius","borderWidth","borderColor","from","modifiers","isInteractive","tooltip","_ref","data","_jsx","BasicTooltip","id","label","value","formattedValue","enableChip","color","role","animate","motionConfig","svgDefaultProps","_extends","layers","cellComponent","cell","animatedProps","testIdPrefix","jsx","animated","rect","x","y","width","size","height","rx","ry","opacity","fill","stroke","strokeWidth","key","undefined","defs","legends","motionStagger","htmlDefaultProps","div","style","position","top","left","background","boxSizing","borderStyle","canvasDefaultProps","pixelRatio","window","_window$devicePixelRa","devicePixelRatio","isDataCell","useWaffle","_ref2","valueFormat","total","rows","columns","_ref2$fillDirection","_ref2$colors","_ref2$emptyColor","_ref2$emptyOpacity","_ref2$borderColor","forwardLegendData","_ref2$defs","_ref2$fill","formatValue","useValueFormatter","getColor","useOrdinalColorScale","theme","useTheme","getBorderColor","useInheritedColor","unit","computedData","useMemo","currentPosition","enhancedData","forEach","datum","groupIndex","isHidden","includes","startAt","endAt","Math","round","enhancedDatum","polygons","push","boundDefs","bindDefs","emptyCells","generateGrid","square","extend","origin","cells","computeGrid","cellsCopy","map","index","cellWithData","mergeCellsData","grid","grouped","reduce","acc","_i","_Object$entries","Object","entries","length","_Object$entries$_i","group","getCellsPolygons","findPolygons","filter","legendData","_legendData","reverse","forwardLegendDataRef","useRef","useEffect","current","useAreaPathGenerator","d3Line","curve","curveLinearClosed","useAreaMouseHandlers","_ref3","onMouseEnter","onMouseMove","onMouseLeave","onClick","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","useCallback","event","createElement","handleMouseMove","handleMouseLeave","handleClick","useAnimatedCells","_ref4","_useMotionConfig","useMotionConfig","springConfig","config","getAnimatedProps","useTransition","keys","initial","enter","update","trail","immediate","useCustomLayerProps","_ref5","WaffleCells","transition","children","WaffleArea","pathGenerator","_useAreaMouseHandlers","_Fragment","polygon","d","fillOpacity","WaffleAreas","InnerWaffle","partialMargin","margin","_ref$fillDirection","_ref$padding","_ref$hiddenIds","_ref$layers","_ref$cellComponent","_ref$colors","_ref$emptyColor","_ref$emptyOpacity","_ref$borderRadius","_ref$borderWidth","_ref$borderColor","_ref$defs","_ref$fill","_ref$isInteractive","_ref$tooltip","_ref$legends","_ref$motionStagger","_ref$role","ariaLabel","ariaLabelledBy","ariaDescribedBy","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","_useWaffle","layerById","areas","legend","i","BoxLegendSvg","containerWidth","containerHeight","customLayerProps","SvgWrapper","layer","_layerById$layer","Fragment","Waffle","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","WaffleCellsHtml","WaffleAreaHtml","backgroundColor","clipPath","WaffleAreasHtml","InnerWaffleHtml","WaffleHtml","findCellUnderCursor","find","isCursorInRect","InnerWaffleCanvas","_ref$pixelRatio","canvasEl","ctx","getContext","scale","fillStyle","fillRect","translate","save","globalAlpha","cellWidth","cellHeight","beginPath","roundedRect","strokeStyle","lineWidth","restore","renderLegendToCanvas","handleMouseHover","_getRelativeCursor","getRelativeCursor","_getRelativeCursor2","ref","WaffleCanvas","props","ResponsiveWrapper"],"mappings":"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"}