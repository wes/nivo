{"version":3,"file":"nivo-scatterplot.es.js","sources":["../src/compute.ts","../src/hooks.ts","../src/Node.tsx","../src/props.tsx","../src/Tooltip.tsx","../src/ScatterPlotAnnotations.tsx","../src/Nodes.tsx","../src/Mesh.tsx","../src/ScatterPlot.tsx","../src/ResponsiveScatterPlot.tsx","../src/ScatterPlotCanvas.tsx","../src/ResponsiveScatterPlotCanvas.tsx"],"sourcesContent":["import get from 'lodash/get'\nimport isString from 'lodash/isString'\nimport isNumber from 'lodash/isNumber'\nimport isPlainObject from 'lodash/isPlainObject'\nimport { scaleLinear } from 'd3-scale'\nimport { ComputedSerie } from '@nivo/scales'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNodeData,\n    ScatterPlotNodeDynamicSizeSpec,\n} from './types'\n\nconst isDynamicSizeSpec = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n): size is ScatterPlotNodeDynamicSizeSpec => isPlainObject(size)\n\nexport const getNodeSizeGenerator = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n) => {\n    if (typeof size === 'function') return size\n    if (isNumber(size)) return () => size\n    if (isDynamicSizeSpec<RawDatum>(size)) {\n        if (!isString(size.key)) {\n            throw new Error(\n                'symbolSize is invalid, key should be a string pointing to the property to use to determine node size'\n            )\n        }\n        if (!Array.isArray(size.values) || size.values.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, values spec should be an array containing two values, min and max'\n            )\n        }\n        if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, sizes spec should be an array containing two values, min and max'\n            )\n        }\n\n        const sizeScale = scaleLinear()\n            .domain([size.values[0], size.values[1]])\n            .range([size.sizes[0], size.sizes[1]])\n\n        return (datum: Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>) =>\n            sizeScale(get(datum, size.key))\n    }\n\n    throw new Error('nodeSize is invalid, it should be either a function, a number or an object')\n}\n\nexport const computePoints = <RawDatum extends ScatterPlotDatum>({\n    series,\n    formatX,\n    formatY,\n    getNodeId,\n}: {\n    series: ComputedSerie<{ id: string | number }, RawDatum>[]\n    formatX: (value: RawDatum['x']) => string | number\n    formatY: (value: RawDatum['x']) => string | number\n    getNodeId: (d: Omit<ScatterPlotNodeData<RawDatum>, 'id' | 'size' | 'color'>) => string\n}): Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>[] => {\n    const points: Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>[] = []\n\n    series.forEach(serie => {\n        serie.data.forEach((d, serieIndex) => {\n            const point: Omit<ScatterPlotNodeData<RawDatum>, 'id' | 'size' | 'color'> = {\n                index: points.length,\n                serieIndex,\n                serieId: serie.id,\n                x: d.position.x as number,\n                xValue: d.data.x,\n                formattedX: formatX(d.data.x),\n                y: d.position.y as number,\n                yValue: d.data.y,\n                formattedY: formatY(d.data.y),\n                data: d.data,\n            }\n\n            points.push({\n                ...point,\n                id: getNodeId(point),\n            })\n        })\n    })\n\n    return points\n}\n","import { useMemo } from 'react'\nimport { useValueFormatter, usePropertyAccessor } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { useAnnotations } from '@nivo/annotations'\nimport { computePoints, getNodeSizeGenerator } from './compute'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDataProps,\n    ScatterPlotDatum,\n    ScatterPlotNodeData,\n} from './types'\n\nconst useNodeSize = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n) => useMemo(() => getNodeSizeGenerator<RawDatum>(size), [size])\n\nexport const useScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScaleSpec,\n    xFormat,\n    yScaleSpec,\n    yFormat,\n    width,\n    height,\n    nodeId,\n    nodeSize,\n    colors,\n}: {\n    data: ScatterPlotDataProps<RawDatum>['data']\n    xScaleSpec: ScatterPlotCommonProps<RawDatum>['xScale']\n    xFormat?: ScatterPlotCommonProps<RawDatum>['xFormat']\n    yScaleSpec: ScatterPlotCommonProps<RawDatum>['yScale']\n    yFormat?: ScatterPlotCommonProps<RawDatum>['yFormat']\n    width: number\n    height: number\n    nodeId: ScatterPlotCommonProps<RawDatum>['nodeId']\n    nodeSize: ScatterPlotCommonProps<RawDatum>['nodeSize']\n    colors: ScatterPlotCommonProps<RawDatum>['colors']\n}) => {\n    const { series, xScale, yScale } = useMemo(\n        () =>\n            computeXYScalesForSeries<{ id: string | number }, RawDatum>(\n                data,\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getNodeId = usePropertyAccessor(nodeId)\n    const rawNodes = useMemo(\n        () => computePoints<RawDatum>({ series, formatX, formatY, getNodeId }),\n        [series, formatX, formatY, getNodeId]\n    )\n\n    const getNodeSize = useNodeSize<RawDatum>(nodeSize)\n\n    const getColor = useOrdinalColorScale(colors, 'serieId')\n\n    const nodes: ScatterPlotNodeData<RawDatum>[] = useMemo(\n        () =>\n            rawNodes.map(rawNode => ({\n                ...rawNode,\n                size: getNodeSize(rawNode),\n                color: getColor({ serieId: rawNode.serieId }),\n            })),\n        [rawNodes, getNodeSize, getColor]\n    )\n\n    const legendData = useMemo(\n        () =>\n            series.map(serie => ({\n                id: serie.id,\n                label: serie.id,\n                color: getColor({ serieId: serie.id }),\n            })),\n        [series, getColor]\n    )\n\n    return {\n        xScale,\n        yScale,\n        nodes,\n        legendData,\n    }\n}\n\nexport const useScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>(\n    items: ScatterPlotNodeData<RawDatum>[],\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n) =>\n    useAnnotations<ScatterPlotNodeData<RawDatum>>({\n        data: items,\n        annotations,\n        getPosition: (node: ScatterPlotNodeData<RawDatum>) => ({\n            x: node.x,\n            y: node.y,\n        }),\n        getDimensions: (node: ScatterPlotNodeData<RawDatum>) => ({\n            size: node.size,\n            width: node.size,\n            height: node.size,\n        }),\n    })\n","import { useCallback, MouseEvent } from 'react'\nimport { animated } from '@react-spring/web'\nimport { ScatterPlotDatum, ScatterPlotNodeProps } from './types'\n\nconst interpolateRadius = (size: number) => size / 2\n\nexport const Node = <RawDatum extends ScatterPlotDatum>({\n    node,\n    style,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: ScatterPlotNodeProps<RawDatum>) => {\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseEnter?.(node, event),\n        [node, onMouseEnter]\n    )\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseMove?.(node, event),\n        [node, onMouseMove]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseLeave?.(node, event),\n        [node, onMouseLeave]\n    )\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onClick?.(node, event),\n        [node, onClick]\n    )\n\n    return (\n        <animated.circle\n            cx={style.x}\n            cy={style.y}\n            r={style.size.to(interpolateRadius)}\n            fill={style.color}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n","import { CssMixBlendMode } from '@nivo/core'\nimport { Node } from './Node'\nimport { Tooltip } from './Tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotLayerId,\n    ScatterPlotNodeData,\n} from './types'\n\nexport const commonDefaultProps = {\n    xScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['xScale'],\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['yScale'],\n\n    enableGridX: true,\n    enableGridY: true,\n    axisBottom: {},\n    axisLeft: {},\n\n    nodeId: (({ serieId, index }) =>\n        `${serieId}.${index}`) as ScatterPlotCommonProps<ScatterPlotDatum>['nodeId'],\n    nodeSize: 9,\n    nodeComponent: Node,\n\n    colors: { scheme: 'nivo' } as ScatterPlotCommonProps<ScatterPlotDatum>['colors'],\n\n    isInteractive: true,\n    debugMesh: false,\n\n    tooltip: Tooltip,\n\n    markers: [],\n\n    legends: [],\n\n    annotations: [],\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    blendMode: 'normal' as CssMixBlendMode,\n    layers: [\n        'grid',\n        'axes',\n        'nodes',\n        'markers',\n        'mesh',\n        'legends',\n        'annotations',\n    ] as ScatterPlotLayerId[],\n    role: 'img',\n    useMesh: true,\n    animate: true,\n    motionConfig: 'default',\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'nodes', 'mesh', 'legends', 'annotations'] as ScatterPlotLayerId[],\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n    renderNode: (ctx: CanvasRenderingContext2D, node: ScatterPlotNodeData<ScatterPlotDatum>) => {\n        ctx.beginPath()\n        ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n        ctx.fillStyle = node.color\n        ctx.fill()\n    },\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ScatterPlotTooltipProps, ScatterPlotDatum } from './types'\n\nexport const Tooltip = <RawDatum extends ScatterPlotDatum>({\n    node,\n}: ScatterPlotTooltipProps<RawDatum>) => (\n    <BasicTooltip\n        id={node.serieId}\n        value={`x: ${node.formattedX}, y: ${node.formattedY}`}\n        enableChip={true}\n        color={node.color}\n    />\n)\n","import { Annotation } from '@nivo/annotations'\nimport { useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface ScatterPlotAnnotationsProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n}\n\nexport const ScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    annotations,\n}: ScatterPlotAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { createElement, useCallback, MouseEvent } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { CssMixBlendMode, useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNode,\n    ScatterPlotNodeData,\n} from './types'\n\ninterface NodesProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    nodeComponent: ScatterPlotNode<RawDatum>\n    isInteractive: boolean\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    blendMode: CssMixBlendMode\n}\n\nconst getNodeKey = <RawDatum extends ScatterPlotDatum>(node: ScatterPlotNodeData<RawDatum>) =>\n    node.id\nconst regularTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: node.size,\n    color: node.color,\n})\nconst leaveTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: 0,\n    color: node.color,\n})\n\nexport const Nodes = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    nodeComponent,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    blendMode,\n}: NodesProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        ScatterPlotNodeData<RawDatum>,\n        {\n            x: number\n            y: number\n            size: number\n            color: string\n        }\n    >(nodes, {\n        keys: getNodeKey,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseEnter = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseEnter]\n    )\n    const handleMouseMove = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseMove]\n    )\n    const handleMouseLeave = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n    const handleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => onClick?.(node, event),\n        [onClick]\n    )\n\n    return (\n        <>\n            {transition((style, node) =>\n                createElement(nodeComponent, {\n                    node,\n                    style,\n                    blendMode,\n                    isInteractive,\n                    onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n                    onMouseMove: isInteractive ? handleMouseMove : undefined,\n                    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n                    onClick: isInteractive ? handleClick : undefined,\n                })\n            )}\n        </>\n    )\n}\n","import { createElement, useCallback, MouseEvent } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface MeshProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    width: number\n    height: number\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    debug: boolean\n}\n\nexport const Mesh = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    width,\n    height,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}: MeshProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove && onMouseMove(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            onClick && onClick(node, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={nodes}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n","import { createElement, Fragment, ReactNode, useMemo } from 'react'\nimport { SvgWrapper, Container, useDimensions, CartesianMarkers } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useScatterPlot } from './hooks'\nimport { svgDefaultProps } from './props'\nimport { ScatterPlotAnnotations } from './ScatterPlotAnnotations'\nimport { Nodes } from './Nodes'\nimport { Mesh } from './Mesh'\nimport { ScatterPlotDatum, ScatterPlotLayerId, ScatterPlotSvgProps } from './types'\n\ntype InnerScatterPlotProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = svgDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = svgDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers,\n    colors = svgDefaultProps.colors,\n    blendMode = svgDefaultProps.blendMode,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = svgDefaultProps.nodeSize,\n    nodeComponent = svgDefaultProps.nodeComponent,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    annotations = svgDefaultProps.annotations,\n    isInteractive = svgDefaultProps.isInteractive,\n    useMesh = svgDefaultProps.useMesh,\n    debugMesh = svgDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = svgDefaultProps.tooltip,\n    markers = svgDefaultProps.markers,\n    legends = svgDefaultProps.legends,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerScatterPlotProps<RawDatum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    const layerById: Record<ScatterPlotLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        nodes: null,\n        markers: null,\n        mesh: null,\n        annotations: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <Nodes<RawDatum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                blendMode={blendMode}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<RawDatum['x'], RawDatum['y']>\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (value: RawDatum['x']) => number}\n                yScale={yScale as (value: RawDatum['y']) => number}\n            />\n        )\n    }\n\n    if (layers.includes('mesh') && isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh<RawDatum>\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <ScatterPlotAnnotations<RawDatum>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legendData}\n            />\n        ))\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'string' && layerById[layer] !== undefined) {\n                    return layerById[layer]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                throw new Error(`Unknown layer (${layer})`)\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const ScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: ScatterPlotSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerScatterPlot<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ScatterPlot } from './ScatterPlot'\nimport { ScatterPlotDatum, ScatterPlotSvgProps } from './types'\n\nexport const ResponsiveScatterPlot = <RawDatum extends ScatterPlotDatum>(\n    props: Omit<ScatterPlotSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ScatterPlot<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n    MouseEvent,\n} from 'react'\nimport { Container, useDimensions, useTheme, getRelativeCursor, isCursorInRect } from '@nivo/core'\nimport { renderAnnotationsToCanvas } from '@nivo/annotations'\nimport { CanvasAxisProps, renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { canvasDefaultProps, svgDefaultProps } from './props'\nimport { useScatterPlot, useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ntype InnerScatterPlotCanvasProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst InnerScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = canvasDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = canvasDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    layers = canvasDefaultProps.layers,\n    colors = canvasDefaultProps.colors,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = canvasDefaultProps.nodeSize,\n    renderNode = canvasDefaultProps.renderNode,\n    enableGridX = canvasDefaultProps.enableGridX,\n    gridXValues,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    annotations = canvasDefaultProps.annotations,\n    isInteractive = canvasDefaultProps.isInteractive,\n    debugMesh = canvasDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = canvasDefaultProps.tooltip,\n    legends = canvasDefaultProps.legends,\n    canvasRef,\n}: InnerScatterPlotCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState<ScatterPlotNodeData<RawDatum> | null>(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                ctx.lineWidth = theme.grid.line.strokeWidth as number\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                enableGridX &&\n                    renderGridLinesToCanvas<RawDatum['x']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas<RawDatum['y']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas<ScatterPlotNodeData<RawDatum>>(ctx, {\n                    annotations: boundAnnotations as any,\n                    theme,\n                })\n            } else if (layer === 'axes') {\n                renderAxesToCanvas<RawDatum['x'], RawDatum['y']>(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop as CanvasAxisProps<RawDatum['x']>,\n                    right: axisRight as CanvasAxisProps<RawDatum['y']>,\n                    bottom: axisBottom as CanvasAxisProps<RawDatum['x']>,\n                    left: axisLeft as CanvasAxisProps<RawDatum['y']>,\n                    theme,\n                })\n            } else if (layer === 'nodes') {\n                nodes.forEach(node => {\n                    renderNode(ctx, node)\n                })\n            } else if (layer === 'mesh') {\n                if (debugMesh) {\n                    renderVoronoiToCanvas(ctx, voronoi!)\n                    if (currentNode) {\n                        renderVoronoiCellToCanvas(ctx, voronoi!, currentNode.index)\n                    }\n                }\n            } else if (layer === 'legends') {\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            } else {\n                throw new Error(`Invalid layer: ${layer}`)\n            }\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        renderNode,\n        layers,\n        customLayerProps,\n        theme,\n        xScale,\n        yScale,\n        nodes,\n        enableGridX,\n        enableGridY,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        legendData,\n        debugMesh,\n        voronoi,\n        currentNode,\n        boundAnnotations,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const getNodeFromMouseEvent = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            const [x, y] = getRelativeCursor(canvasEl.current!, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                showTooltipFromEvent(createElement(tooltip, { node }), event)\n                if (currentNode && currentNode.id !== node.id) {\n                    onMouseLeave && onMouseLeave(currentNode, event)\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                if (!currentNode) {\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                onMouseMove && onMouseMove(node, event)\n            } else {\n                hideTooltip()\n                currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n            }\n        },\n        [\n            getNodeFromMouseEvent,\n            currentNode,\n            setCurrentNode,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            hideTooltip()\n            setCurrentNode(null)\n            currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n        },\n        [hideTooltip, currentNode, setCurrentNode, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (onClick) {\n                const node = getNodeFromMouseEvent(event)\n                node && onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const ScatterPlotCanvas = forwardRef(\n    <RawDatum extends ScatterPlotDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: ScatterPlotCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerScatterPlotCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ForwardedRef, forwardRef } from 'react'\n\nimport { ScatterPlotCanvas } from './ScatterPlotCanvas'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum } from './types'\n\nexport const ResponsiveScatterPlotCanvas = forwardRef(function ResponsiveScatterPlotCanvas<\n    RawDatum extends ScatterPlotDatum\n>(\n    props: Omit<ScatterPlotCanvasProps<RawDatum>, 'width' | 'height'>,\n    ref: ForwardedRef<HTMLCanvasElement>\n) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <ScatterPlotCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<\n                        ScatterPlotCanvasProps<ScatterPlotDatum>,\n                        'height' | 'width'\n                    >)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"],"names":["getNodeSizeGenerator","size","isNumber","isPlainObject","isDynamicSizeSpec","isString","key","Error","Array","isArray","values","length","sizes","sizeScale","scaleLinear","domain","range","datum","get","useScatterPlot","_ref","data","xScaleSpec","xFormat","yScaleSpec","yFormat","width","height","nodeId","nodeSize","colors","_useMemo","useMemo","computeXYScalesForSeries","series","xScale","yScale","formatX","useValueFormatter","formatY","getNodeId","usePropertyAccessor","rawNodes","points","forEach","serie","d","serieIndex","point","index","serieId","id","x","position","xValue","formattedX","y","yValue","formattedY","push","_extends","computePoints","getNodeSize","getColor","useOrdinalColorScale","nodes","map","rawNode","color","legendData","label","useScatterPlotAnnotations","items","annotations","useAnnotations","getPosition","node","getDimensions","interpolateRadius","commonDefaultProps","type","min","max","enableGridX","enableGridY","axisBottom","axisLeft","nodeComponent","style","blendMode","isInteractive","onMouseEnter","onMouseMove","onMouseLeave","onClick","handleMouseEnter","useCallback","event","handleMouseMove","handleMouseLeave","handleClick","_jsx","animated","circle","cx","cy","r","to","fill","mixBlendMode","undefined","scheme","debugMesh","tooltip","BasicTooltip","value","enableChip","markers","legends","svgDefaultProps","layers","role","useMesh","animate","motionConfig","canvasDefaultProps","pixelRatio","window","devicePixelRatio","renderNode","ctx","beginPath","arc","Math","PI","fillStyle","ScatterPlotAnnotations","boundAnnotations","_Fragment","children","annotation","i","Annotation","getNodeKey","regularTransition","leaveTransition","Nodes","_useMotionConfig","useMotionConfig","springConfig","config","transition","useTransition","keys","from","enter","update","leave","immediate","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","createElement","Mesh","debug","BaseMesh","InnerScatterPlot","_ref$xScale","_ref$yScale","partialMargin","margin","_ref$layers","_ref$colors","_ref$blendMode","_ref$nodeId","_ref$nodeSize","_ref$nodeComponent","_ref$enableGridX","_ref$enableGridY","gridXValues","gridYValues","axisTop","axisRight","_ref$axisBottom","_ref$axisLeft","_ref$annotations","_ref$isInteractive","_ref$useMesh","_ref$debugMesh","_ref$tooltip","_ref$markers","_ref$legends","_ref$role","ariaLabel","ariaLabelledBy","ariaDescribedBy","_useDimensions","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","_useScatterPlot","customLayerProps","layerById","grid","axes","mesh","includes","Grid","xValues","yValues","Axes","top","right","bottom","left","CartesianMarkers","legend","BoxLegendSvg","containerWidth","containerHeight","SvgWrapper","layer","Fragment","ScatterPlot","_ref2","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","theme","renderWrapper","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","ResponsiveScatterPlot","props","ResponsiveWrapper","InnerScatterPlotCanvas","_ref$pixelRatio","_ref$renderNode","canvasRef","canvasEl","useRef","useTheme","_useState","useState","currentNode","setCurrentNode","_useVoronoiMesh","useVoronoiMesh","delaunay","voronoi","useEffect","current","getContext","scale","background","fillRect","translate","lineWidth","line","strokeWidth","strokeStyle","stroke","renderGridLinesToCanvas","axis","renderAnnotationsToCanvas","renderAxesToCanvas","renderVoronoiToCanvas","renderVoronoiCellToCanvas","renderLegendToCanvas","getNodeFromMouseEvent","_getRelativeCursor","getRelativeCursor","isCursorInRect","nodeIndex","find","handleMouseHover","ref","canvas","cursor","ScatterPlotCanvas","forwardRef","ResponsiveScatterPlotCanvas"],"mappings":"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"}