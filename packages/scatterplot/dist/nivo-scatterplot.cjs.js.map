{"version":3,"file":"nivo-scatterplot.cjs.js","sources":["../src/compute.ts","../src/hooks.ts","../src/Node.tsx","../src/props.tsx","../src/Tooltip.tsx","../src/ScatterPlotAnnotations.tsx","../src/Nodes.tsx","../src/Mesh.tsx","../src/ScatterPlot.tsx","../src/ScatterPlotCanvas.tsx","../src/ResponsiveScatterPlotCanvas.tsx","../src/ResponsiveScatterPlot.tsx"],"sourcesContent":["import get from 'lodash/get'\nimport isString from 'lodash/isString'\nimport isNumber from 'lodash/isNumber'\nimport isPlainObject from 'lodash/isPlainObject'\nimport { scaleLinear } from 'd3-scale'\nimport { ComputedSerie } from '@nivo/scales'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNodeData,\n    ScatterPlotNodeDynamicSizeSpec,\n} from './types'\n\nconst isDynamicSizeSpec = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n): size is ScatterPlotNodeDynamicSizeSpec => isPlainObject(size)\n\nexport const getNodeSizeGenerator = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n) => {\n    if (typeof size === 'function') return size\n    if (isNumber(size)) return () => size\n    if (isDynamicSizeSpec<RawDatum>(size)) {\n        if (!isString(size.key)) {\n            throw new Error(\n                'symbolSize is invalid, key should be a string pointing to the property to use to determine node size'\n            )\n        }\n        if (!Array.isArray(size.values) || size.values.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, values spec should be an array containing two values, min and max'\n            )\n        }\n        if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, sizes spec should be an array containing two values, min and max'\n            )\n        }\n\n        const sizeScale = scaleLinear()\n            .domain([size.values[0], size.values[1]])\n            .range([size.sizes[0], size.sizes[1]])\n\n        return (datum: Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>) =>\n            sizeScale(get(datum, size.key))\n    }\n\n    throw new Error('nodeSize is invalid, it should be either a function, a number or an object')\n}\n\nexport const computePoints = <RawDatum extends ScatterPlotDatum>({\n    series,\n    formatX,\n    formatY,\n    getNodeId,\n}: {\n    series: ComputedSerie<{ id: string | number }, RawDatum>[]\n    formatX: (value: RawDatum['x']) => string | number\n    formatY: (value: RawDatum['x']) => string | number\n    getNodeId: (d: Omit<ScatterPlotNodeData<RawDatum>, 'id' | 'size' | 'color'>) => string\n}): Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>[] => {\n    const points: Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>[] = []\n\n    series.forEach(serie => {\n        serie.data.forEach((d, serieIndex) => {\n            const point: Omit<ScatterPlotNodeData<RawDatum>, 'id' | 'size' | 'color'> = {\n                index: points.length,\n                serieIndex,\n                serieId: serie.id,\n                x: d.position.x as number,\n                xValue: d.data.x,\n                formattedX: formatX(d.data.x),\n                y: d.position.y as number,\n                yValue: d.data.y,\n                formattedY: formatY(d.data.y),\n                data: d.data,\n            }\n\n            points.push({\n                ...point,\n                id: getNodeId(point),\n            })\n        })\n    })\n\n    return points\n}\n","import { useMemo } from 'react'\nimport { useValueFormatter, usePropertyAccessor } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { useAnnotations } from '@nivo/annotations'\nimport { computePoints, getNodeSizeGenerator } from './compute'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDataProps,\n    ScatterPlotDatum,\n    ScatterPlotNodeData,\n} from './types'\n\nconst useNodeSize = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n) => useMemo(() => getNodeSizeGenerator<RawDatum>(size), [size])\n\nexport const useScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScaleSpec,\n    xFormat,\n    yScaleSpec,\n    yFormat,\n    width,\n    height,\n    nodeId,\n    nodeSize,\n    colors,\n}: {\n    data: ScatterPlotDataProps<RawDatum>['data']\n    xScaleSpec: ScatterPlotCommonProps<RawDatum>['xScale']\n    xFormat?: ScatterPlotCommonProps<RawDatum>['xFormat']\n    yScaleSpec: ScatterPlotCommonProps<RawDatum>['yScale']\n    yFormat?: ScatterPlotCommonProps<RawDatum>['yFormat']\n    width: number\n    height: number\n    nodeId: ScatterPlotCommonProps<RawDatum>['nodeId']\n    nodeSize: ScatterPlotCommonProps<RawDatum>['nodeSize']\n    colors: ScatterPlotCommonProps<RawDatum>['colors']\n}) => {\n    const { series, xScale, yScale } = useMemo(\n        () =>\n            computeXYScalesForSeries<{ id: string | number }, RawDatum>(\n                data,\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getNodeId = usePropertyAccessor(nodeId)\n    const rawNodes = useMemo(\n        () => computePoints<RawDatum>({ series, formatX, formatY, getNodeId }),\n        [series, formatX, formatY, getNodeId]\n    )\n\n    const getNodeSize = useNodeSize<RawDatum>(nodeSize)\n\n    const getColor = useOrdinalColorScale(colors, 'serieId')\n\n    const nodes: ScatterPlotNodeData<RawDatum>[] = useMemo(\n        () =>\n            rawNodes.map(rawNode => ({\n                ...rawNode,\n                size: getNodeSize(rawNode),\n                color: getColor({ serieId: rawNode.serieId }),\n            })),\n        [rawNodes, getNodeSize, getColor]\n    )\n\n    const legendData = useMemo(\n        () =>\n            series.map(serie => ({\n                id: serie.id,\n                label: serie.id,\n                color: getColor({ serieId: serie.id }),\n            })),\n        [series, getColor]\n    )\n\n    return {\n        xScale,\n        yScale,\n        nodes,\n        legendData,\n    }\n}\n\nexport const useScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>(\n    items: ScatterPlotNodeData<RawDatum>[],\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n) =>\n    useAnnotations<ScatterPlotNodeData<RawDatum>>({\n        data: items,\n        annotations,\n        getPosition: (node: ScatterPlotNodeData<RawDatum>) => ({\n            x: node.x,\n            y: node.y,\n        }),\n        getDimensions: (node: ScatterPlotNodeData<RawDatum>) => ({\n            size: node.size,\n            width: node.size,\n            height: node.size,\n        }),\n    })\n","import { useCallback, MouseEvent } from 'react'\nimport { animated } from '@react-spring/web'\nimport { ScatterPlotDatum, ScatterPlotNodeProps } from './types'\n\nconst interpolateRadius = (size: number) => size / 2\n\nexport const Node = <RawDatum extends ScatterPlotDatum>({\n    node,\n    style,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: ScatterPlotNodeProps<RawDatum>) => {\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseEnter?.(node, event),\n        [node, onMouseEnter]\n    )\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseMove?.(node, event),\n        [node, onMouseMove]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseLeave?.(node, event),\n        [node, onMouseLeave]\n    )\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onClick?.(node, event),\n        [node, onClick]\n    )\n\n    return (\n        <animated.circle\n            cx={style.x}\n            cy={style.y}\n            r={style.size.to(interpolateRadius)}\n            fill={style.color}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n","import { CssMixBlendMode } from '@nivo/core'\nimport { Node } from './Node'\nimport { Tooltip } from './Tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotLayerId,\n    ScatterPlotNodeData,\n} from './types'\n\nexport const commonDefaultProps = {\n    xScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['xScale'],\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['yScale'],\n\n    enableGridX: true,\n    enableGridY: true,\n    axisBottom: {},\n    axisLeft: {},\n\n    nodeId: (({ serieId, index }) =>\n        `${serieId}.${index}`) as ScatterPlotCommonProps<ScatterPlotDatum>['nodeId'],\n    nodeSize: 9,\n    nodeComponent: Node,\n\n    colors: { scheme: 'nivo' } as ScatterPlotCommonProps<ScatterPlotDatum>['colors'],\n\n    isInteractive: true,\n    debugMesh: false,\n\n    tooltip: Tooltip,\n\n    markers: [],\n\n    legends: [],\n\n    annotations: [],\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    blendMode: 'normal' as CssMixBlendMode,\n    layers: [\n        'grid',\n        'axes',\n        'nodes',\n        'markers',\n        'mesh',\n        'legends',\n        'annotations',\n    ] as ScatterPlotLayerId[],\n    role: 'img',\n    useMesh: true,\n    animate: true,\n    motionConfig: 'default',\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'nodes', 'mesh', 'legends', 'annotations'] as ScatterPlotLayerId[],\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n    renderNode: (ctx: CanvasRenderingContext2D, node: ScatterPlotNodeData<ScatterPlotDatum>) => {\n        ctx.beginPath()\n        ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n        ctx.fillStyle = node.color\n        ctx.fill()\n    },\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ScatterPlotTooltipProps, ScatterPlotDatum } from './types'\n\nexport const Tooltip = <RawDatum extends ScatterPlotDatum>({\n    node,\n}: ScatterPlotTooltipProps<RawDatum>) => (\n    <BasicTooltip\n        id={node.serieId}\n        value={`x: ${node.formattedX}, y: ${node.formattedY}`}\n        enableChip={true}\n        color={node.color}\n    />\n)\n","import { Annotation } from '@nivo/annotations'\nimport { useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface ScatterPlotAnnotationsProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n}\n\nexport const ScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    annotations,\n}: ScatterPlotAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { createElement, useCallback, MouseEvent } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { CssMixBlendMode, useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNode,\n    ScatterPlotNodeData,\n} from './types'\n\ninterface NodesProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    nodeComponent: ScatterPlotNode<RawDatum>\n    isInteractive: boolean\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    blendMode: CssMixBlendMode\n}\n\nconst getNodeKey = <RawDatum extends ScatterPlotDatum>(node: ScatterPlotNodeData<RawDatum>) =>\n    node.id\nconst regularTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: node.size,\n    color: node.color,\n})\nconst leaveTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: 0,\n    color: node.color,\n})\n\nexport const Nodes = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    nodeComponent,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    blendMode,\n}: NodesProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        ScatterPlotNodeData<RawDatum>,\n        {\n            x: number\n            y: number\n            size: number\n            color: string\n        }\n    >(nodes, {\n        keys: getNodeKey,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseEnter = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseEnter]\n    )\n    const handleMouseMove = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseMove]\n    )\n    const handleMouseLeave = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n    const handleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => onClick?.(node, event),\n        [onClick]\n    )\n\n    return (\n        <>\n            {transition((style, node) =>\n                createElement(nodeComponent, {\n                    node,\n                    style,\n                    blendMode,\n                    isInteractive,\n                    onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n                    onMouseMove: isInteractive ? handleMouseMove : undefined,\n                    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n                    onClick: isInteractive ? handleClick : undefined,\n                })\n            )}\n        </>\n    )\n}\n","import { createElement, useCallback, MouseEvent } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface MeshProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    width: number\n    height: number\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    debug: boolean\n}\n\nexport const Mesh = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    width,\n    height,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}: MeshProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove && onMouseMove(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            onClick && onClick(node, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={nodes}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n","import { createElement, Fragment, ReactNode, useMemo } from 'react'\nimport { SvgWrapper, Container, useDimensions, CartesianMarkers } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useScatterPlot } from './hooks'\nimport { svgDefaultProps } from './props'\nimport { ScatterPlotAnnotations } from './ScatterPlotAnnotations'\nimport { Nodes } from './Nodes'\nimport { Mesh } from './Mesh'\nimport { ScatterPlotDatum, ScatterPlotLayerId, ScatterPlotSvgProps } from './types'\n\ntype InnerScatterPlotProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = svgDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = svgDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers,\n    colors = svgDefaultProps.colors,\n    blendMode = svgDefaultProps.blendMode,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = svgDefaultProps.nodeSize,\n    nodeComponent = svgDefaultProps.nodeComponent,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    annotations = svgDefaultProps.annotations,\n    isInteractive = svgDefaultProps.isInteractive,\n    useMesh = svgDefaultProps.useMesh,\n    debugMesh = svgDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = svgDefaultProps.tooltip,\n    markers = svgDefaultProps.markers,\n    legends = svgDefaultProps.legends,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerScatterPlotProps<RawDatum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    const layerById: Record<ScatterPlotLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        nodes: null,\n        markers: null,\n        mesh: null,\n        annotations: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <Nodes<RawDatum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                blendMode={blendMode}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<RawDatum['x'], RawDatum['y']>\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (value: RawDatum['x']) => number}\n                yScale={yScale as (value: RawDatum['y']) => number}\n            />\n        )\n    }\n\n    if (layers.includes('mesh') && isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh<RawDatum>\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <ScatterPlotAnnotations<RawDatum>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legendData}\n            />\n        ))\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'string' && layerById[layer] !== undefined) {\n                    return layerById[layer]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                throw new Error(`Unknown layer (${layer})`)\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const ScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: ScatterPlotSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerScatterPlot<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n    MouseEvent,\n} from 'react'\nimport { Container, useDimensions, useTheme, getRelativeCursor, isCursorInRect } from '@nivo/core'\nimport { renderAnnotationsToCanvas } from '@nivo/annotations'\nimport { CanvasAxisProps, renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { canvasDefaultProps, svgDefaultProps } from './props'\nimport { useScatterPlot, useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ntype InnerScatterPlotCanvasProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst InnerScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = canvasDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = canvasDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    layers = canvasDefaultProps.layers,\n    colors = canvasDefaultProps.colors,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = canvasDefaultProps.nodeSize,\n    renderNode = canvasDefaultProps.renderNode,\n    enableGridX = canvasDefaultProps.enableGridX,\n    gridXValues,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    annotations = canvasDefaultProps.annotations,\n    isInteractive = canvasDefaultProps.isInteractive,\n    debugMesh = canvasDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = canvasDefaultProps.tooltip,\n    legends = canvasDefaultProps.legends,\n    canvasRef,\n}: InnerScatterPlotCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState<ScatterPlotNodeData<RawDatum> | null>(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                ctx.lineWidth = theme.grid.line.strokeWidth as number\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                enableGridX &&\n                    renderGridLinesToCanvas<RawDatum['x']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas<RawDatum['y']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas<ScatterPlotNodeData<RawDatum>>(ctx, {\n                    annotations: boundAnnotations as any,\n                    theme,\n                })\n            } else if (layer === 'axes') {\n                renderAxesToCanvas<RawDatum['x'], RawDatum['y']>(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop as CanvasAxisProps<RawDatum['x']>,\n                    right: axisRight as CanvasAxisProps<RawDatum['y']>,\n                    bottom: axisBottom as CanvasAxisProps<RawDatum['x']>,\n                    left: axisLeft as CanvasAxisProps<RawDatum['y']>,\n                    theme,\n                })\n            } else if (layer === 'nodes') {\n                nodes.forEach(node => {\n                    renderNode(ctx, node)\n                })\n            } else if (layer === 'mesh') {\n                if (debugMesh) {\n                    renderVoronoiToCanvas(ctx, voronoi!)\n                    if (currentNode) {\n                        renderVoronoiCellToCanvas(ctx, voronoi!, currentNode.index)\n                    }\n                }\n            } else if (layer === 'legends') {\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            } else {\n                throw new Error(`Invalid layer: ${layer}`)\n            }\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        renderNode,\n        layers,\n        customLayerProps,\n        theme,\n        xScale,\n        yScale,\n        nodes,\n        enableGridX,\n        enableGridY,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        legendData,\n        debugMesh,\n        voronoi,\n        currentNode,\n        boundAnnotations,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const getNodeFromMouseEvent = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            const [x, y] = getRelativeCursor(canvasEl.current!, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                showTooltipFromEvent(createElement(tooltip, { node }), event)\n                if (currentNode && currentNode.id !== node.id) {\n                    onMouseLeave && onMouseLeave(currentNode, event)\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                if (!currentNode) {\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                onMouseMove && onMouseMove(node, event)\n            } else {\n                hideTooltip()\n                currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n            }\n        },\n        [\n            getNodeFromMouseEvent,\n            currentNode,\n            setCurrentNode,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            hideTooltip()\n            setCurrentNode(null)\n            currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n        },\n        [hideTooltip, currentNode, setCurrentNode, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (onClick) {\n                const node = getNodeFromMouseEvent(event)\n                node && onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const ScatterPlotCanvas = forwardRef(\n    <RawDatum extends ScatterPlotDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: ScatterPlotCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerScatterPlotCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ForwardedRef, forwardRef } from 'react'\n\nimport { ScatterPlotCanvas } from './ScatterPlotCanvas'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum } from './types'\n\nexport const ResponsiveScatterPlotCanvas = forwardRef(function ResponsiveScatterPlotCanvas<\n    RawDatum extends ScatterPlotDatum\n>(\n    props: Omit<ScatterPlotCanvasProps<RawDatum>, 'width' | 'height'>,\n    ref: ForwardedRef<HTMLCanvasElement>\n) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <ScatterPlotCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<\n                        ScatterPlotCanvasProps<ScatterPlotDatum>,\n                        'height' | 'width'\n                    >)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ScatterPlot } from './ScatterPlot'\nimport { ScatterPlotDatum, ScatterPlotSvgProps } from './types'\n\nexport const ResponsiveScatterPlot = <RawDatum extends ScatterPlotDatum>(\n    props: Omit<ScatterPlotSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ScatterPlot<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["getNodeSizeGenerator","size","isNumber","isPlainObject","isDynamicSizeSpec","isString","key","Error","Array","isArray","values","length","sizes","sizeScale","scaleLinear","domain","range","datum","get","useScatterPlot","_ref","data","xScaleSpec","xFormat","yScaleSpec","yFormat","width","height","nodeId","nodeSize","colors","_useMemo","useMemo","computeXYScalesForSeries","series","xScale","yScale","formatX","useValueFormatter","formatY","getNodeId","usePropertyAccessor","rawNodes","points","forEach","serie","d","serieIndex","point","index","serieId","id","x","position","xValue","formattedX","y","yValue","formattedY","push","_extends","computePoints","getNodeSize","getColor","useOrdinalColorScale","nodes","map","rawNode","color","legendData","label","useScatterPlotAnnotations","items","annotations","useAnnotations","getPosition","node","getDimensions","interpolateRadius","commonDefaultProps","type","min","max","enableGridX","enableGridY","axisBottom","axisLeft","nodeComponent","style","blendMode","isInteractive","onMouseEnter","onMouseMove","onMouseLeave","onClick","handleMouseEnter","useCallback","event","handleMouseMove","handleMouseLeave","handleClick","_jsx","jsx","animated","circle","cx","cy","r","to","fill","mixBlendMode","undefined","scheme","debugMesh","tooltip","BasicTooltip","value","enableChip","markers","legends","svgDefaultProps","layers","role","useMesh","animate","motionConfig","canvasDefaultProps","pixelRatio","window","devicePixelRatio","renderNode","ctx","beginPath","arc","Math","PI","fillStyle","ScatterPlotAnnotations","boundAnnotations","_Fragment","children","annotation","i","Annotation","getNodeKey","regularTransition","leaveTransition","Nodes","_useMotionConfig","useMotionConfig","springConfig","config","transition","useTransition","keys","from","enter","update","leave","immediate","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","createElement","Mesh","debug","BaseMesh","InnerScatterPlot","_ref$xScale","_ref$yScale","partialMargin","margin","_ref$layers","_ref$colors","_ref$blendMode","_ref$nodeId","_ref$nodeSize","_ref$nodeComponent","_ref$enableGridX","_ref$enableGridY","gridXValues","gridYValues","axisTop","axisRight","_ref$axisBottom","_ref$axisLeft","_ref$annotations","_ref$isInteractive","_ref$useMesh","_ref$debugMesh","_ref$tooltip","_ref$markers","_ref$legends","_ref$role","ariaLabel","ariaLabelledBy","ariaDescribedBy","_useDimensions","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","_useScatterPlot","customLayerProps","layerById","grid","axes","mesh","includes","Grid","xValues","yValues","Axes","top","right","bottom","left","CartesianMarkers","legend","BoxLegendSvg","containerWidth","containerHeight","SvgWrapper","layer","Fragment","ScatterPlot","_ref2","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","theme","renderWrapper","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","InnerScatterPlotCanvas","_ref$pixelRatio","_ref$renderNode","canvasRef","canvasEl","useRef","useTheme","_useState","useState","currentNode","setCurrentNode","_useVoronoiMesh","useVoronoiMesh","delaunay","voronoi","useEffect","current","getContext","scale","background","fillRect","translate","lineWidth","line","strokeWidth","strokeStyle","stroke","renderGridLinesToCanvas","axis","renderAnnotationsToCanvas","renderAxesToCanvas","renderVoronoiToCanvas","renderVoronoiCellToCanvas","renderLegendToCanvas","getNodeFromMouseEvent","_getRelativeCursor","getRelativeCursor","isCursorInRect","nodeIndex","find","handleMouseHover","ref","canvas","cursor","ScatterPlotCanvas","forwardRef","props","ResponsiveScatterPlotCanvas","ResponsiveWrapper"],"mappings":"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"}