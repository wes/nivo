{"version":3,"file":"nivo-bump.cjs.js","sources":["../src/bump/compute.ts","../src/bump/hooks.ts","../src/bump/Point.tsx","../src/bump/defaults.ts","../src/bump/LineTooltip.tsx","../src/bump/Line.tsx","../src/bump/LinesLabels.tsx","../src/bump/Points.tsx","../src/bump/Bump.tsx","../src/area-bump/hooks.ts","../src/area-bump/compute.ts","../src/area-bump/Area.tsx","../src/area-bump/AreasLabels.tsx","../src/area-bump/defaults.ts","../src/area-bump/AreaTooltip.tsx","../src/area-bump/AreaBump.tsx","../src/area-bump/ResponsiveAreaBump.tsx","../src/bump/ResponsiveBump.tsx"],"sourcesContent":["import { scalePoint } from 'd3-scale'\nimport { castPointScale } from '@nivo/scales'\nimport {\n    BumpDataProps,\n    BumpDatum,\n    BumpComputedSerie,\n    BumpSeriePoint,\n    BumpSerieExtraProps,\n} from './types'\n\nexport const computeSeries = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    width,\n    height,\n    data,\n    xPadding,\n    xOuterPadding,\n    yOuterPadding,\n}: {\n    width: number\n    height: number\n    data: BumpDataProps<Datum, ExtraProps>['data']\n    xPadding: number\n    xOuterPadding: number\n    yOuterPadding: number\n}) => {\n    const xValuesSet = new Set<Datum['x']>()\n    const yValuesSet = new Set<number>()\n\n    data.forEach(serie => {\n        serie.data.forEach(datum => {\n            xValuesSet.add(datum.x)\n            if (datum.y !== null) {\n                yValuesSet.add(datum.y)\n            }\n        })\n    })\n\n    const xValues: Datum['x'][] = Array.from(xValuesSet)\n    const xScale = castPointScale<Datum['x']>(\n        scalePoint<Datum['x']>().domain(xValues).range([0, width]).padding(xOuterPadding)\n    )\n\n    const yValues: number[] = Array.from(yValuesSet).sort((a, b) => a - b)\n    const yScale = castPointScale<number>(\n        scalePoint<number>().domain(yValues).range([0, height]).padding(yOuterPadding)\n    )\n\n    const linePointPadding = xScale.step() * Math.min(xPadding * 0.5, 0.5)\n\n    const series: Omit<BumpComputedSerie<Datum, ExtraProps>, 'color' | 'opacity' | 'lineWidth'>[] =\n        data.map(rawSerie => {\n            const serie: Omit<\n                BumpComputedSerie<Datum, ExtraProps>,\n                'color' | 'opacity' | 'lineWidth'\n            > = {\n                id: rawSerie.id,\n                data: rawSerie,\n                points: [],\n                linePoints: [],\n            }\n\n            rawSerie.data.forEach((datum, i) => {\n                let x = null\n                let y = null\n\n                if (datum.y !== null) {\n                    x = xScale(datum.x)!\n                    y = yScale(datum.y)!\n                }\n\n                const point: BumpSeriePoint<Datum, ExtraProps> = {\n                    id: `${rawSerie.id}.${i}`,\n                    serie: rawSerie,\n                    data: datum,\n                    x: x as number,\n                    y,\n                }\n                serie.points.push(point)\n\n                // only add pre transition point if the datum is not empty\n                if (point.x !== null) {\n                    if (i === 0) {\n                        serie.linePoints.push([0, point.y])\n                    } else {\n                        serie.linePoints.push([point.x - linePointPadding, point.y])\n                    }\n                }\n\n                serie.linePoints.push([point.x, point.y])\n\n                // only add post transition point if the datum is not empty\n                if (x !== null) {\n                    if (i === rawSerie.data.length - 1 && x) {\n                        serie.linePoints.push([width, point.y])\n                    } else {\n                        serie.linePoints.push([point.x + linePointPadding, point.y])\n                    }\n                }\n\n                // remove points having null coordinates\n                serie.points = serie.points.filter(point => point.x !== null)\n            })\n\n            return serie\n        })\n\n    return {\n        series,\n        xScale,\n        yScale,\n    }\n}\n","import { createElement, useMemo, useCallback, useState, MouseEvent } from 'react'\nimport { line as d3Line, curveBasis, curveLinear } from 'd3-shape'\nimport { useTheme } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    BumpInterpolation,\n    BumpCommonProps,\n    BumpDatum,\n    DefaultBumpDatum,\n    BumpDataProps,\n    BumpComputedSerie,\n    BumpPoint,\n    BumpLabel,\n    BumpLabelData,\n    BumpSerieExtraProps,\n} from './types'\nimport { computeSeries } from './compute'\n\nconst useLineGenerator = (interpolation: BumpInterpolation) =>\n    useMemo(\n        () =>\n            d3Line<[number, number | null]>()\n                .curve(interpolation === 'smooth' ? curveBasis : curveLinear)\n                .defined(d => d[0] !== null && d[1] !== null),\n\n        [interpolation]\n    )\n\nconst useSerieDerivedProp = <Target, Output extends string | number>(\n    instruction: ((target: Target) => Output) | Output\n): ((target: Target) => Output) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useSerieStyle = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    lineWidth,\n    activeLineWidth,\n    inactiveLineWidth,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    isInteractive,\n    activeSerieIds,\n}: {\n    lineWidth: BumpCommonProps<Datum, ExtraProps>['lineWidth']\n    activeLineWidth: BumpCommonProps<Datum, ExtraProps>['activeLineWidth']\n    inactiveLineWidth: BumpCommonProps<Datum, ExtraProps>['inactiveLineWidth']\n    opacity: BumpCommonProps<Datum, ExtraProps>['opacity']\n    activeOpacity: BumpCommonProps<Datum, ExtraProps>['activeOpacity']\n    inactiveOpacity: BumpCommonProps<Datum, ExtraProps>['inactiveOpacity']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Serie = Omit<BumpComputedSerie<Datum, ExtraProps>, 'color' | 'opacity' | 'lineWidth'>\n\n    const getLineWidth = useSerieDerivedProp<Serie, number>(lineWidth)\n    const getActiveLineWidth = useSerieDerivedProp<Serie, number>(activeLineWidth)\n    const getInactiveLineWidth = useSerieDerivedProp<Serie, number>(inactiveLineWidth)\n\n    const getOpacity = useSerieDerivedProp<Serie, number>(opacity)\n    const getActiveOpacity = useSerieDerivedProp<Serie, number>(activeOpacity)\n    const getInactiveOpacity = useSerieDerivedProp<Serie, number>(inactiveOpacity)\n\n    const getNormalStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getOpacity(serie),\n            lineWidth: getLineWidth(serie),\n        }),\n        [getLineWidth, getOpacity]\n    )\n    const getActiveStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getActiveOpacity(serie),\n            lineWidth: getActiveLineWidth(serie),\n        }),\n        [getActiveLineWidth, getActiveOpacity]\n    )\n    const getInactiveStyle = useCallback(\n        (serie: Serie) => ({\n            opacity: getInactiveOpacity(serie),\n            lineWidth: getInactiveLineWidth(serie),\n        }),\n        [getInactiveLineWidth, getInactiveOpacity]\n    )\n\n    return useCallback(\n        (serie: Serie) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(serie)\n            if (activeSerieIds.includes(serie.id)) return getActiveStyle(serie)\n            return getInactiveStyle(serie)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nconst usePointStyle = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    pointSize,\n    activePointSize,\n    inactivePointSize,\n    pointBorderWidth,\n    activePointBorderWidth,\n    inactivePointBorderWidth,\n    isInteractive,\n    activeSerieIds,\n}: {\n    pointSize: BumpCommonProps<Datum, ExtraProps>['pointSize']\n    activePointSize: BumpCommonProps<Datum, ExtraProps>['activePointSize']\n    inactivePointSize: BumpCommonProps<Datum, ExtraProps>['inactivePointSize']\n    pointBorderWidth: BumpCommonProps<Datum, ExtraProps>['pointBorderWidth']\n    activePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['activePointBorderWidth']\n    inactivePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['inactivePointBorderWidth']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Point = Omit<BumpPoint<Datum, ExtraProps>, 'size' | 'borderWidth'>\n\n    const getSize = useSerieDerivedProp(pointSize)\n    const getActiveSize = useSerieDerivedProp(activePointSize)\n    const getInactiveSize = useSerieDerivedProp(inactivePointSize)\n\n    const getBorderWidth = useSerieDerivedProp(pointBorderWidth)\n    const getActiveBorderWidth = useSerieDerivedProp(activePointBorderWidth)\n    const getInactiveBorderWidth = useSerieDerivedProp(inactivePointBorderWidth)\n\n    const getNormalStyle = useCallback(\n        (point: Point) => ({\n            size: getSize(point),\n            borderWidth: getBorderWidth(point),\n        }),\n        [getSize, getBorderWidth]\n    )\n    const getActiveStyle = useCallback(\n        (point: Point) => ({\n            size: getActiveSize(point),\n            borderWidth: getActiveBorderWidth(point),\n        }),\n        [getActiveSize, getActiveBorderWidth]\n    )\n    const getInactiveStyle = useCallback(\n        (point: Point) => ({\n            size: getInactiveSize(point),\n            borderWidth: getInactiveBorderWidth(point),\n        }),\n        [getInactiveSize, getInactiveBorderWidth]\n    )\n\n    return useCallback(\n        (point: Point) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(point)\n            if (activeSerieIds.includes(point.serie.id)) return getActiveStyle(point)\n            return getInactiveStyle(point)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nexport const useBump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>({\n    width,\n    height,\n    data,\n    interpolation,\n    xPadding,\n    xOuterPadding,\n    yOuterPadding,\n    lineWidth,\n    activeLineWidth,\n    inactiveLineWidth,\n    colors,\n    opacity,\n    activeOpacity,\n    inactiveOpacity,\n    pointSize,\n    activePointSize,\n    inactivePointSize,\n    pointColor,\n    pointBorderWidth,\n    activePointBorderWidth,\n    inactivePointBorderWidth,\n    pointBorderColor,\n    isInteractive,\n    defaultActiveSerieIds,\n}: {\n    width: number\n    height: number\n    data: BumpDataProps<Datum, ExtraProps>['data']\n    interpolation: BumpCommonProps<Datum, ExtraProps>['interpolation']\n    xPadding: BumpCommonProps<Datum, ExtraProps>['xPadding']\n    xOuterPadding: BumpCommonProps<Datum, ExtraProps>['xOuterPadding']\n    yOuterPadding: BumpCommonProps<Datum, ExtraProps>['yOuterPadding']\n    lineWidth: BumpCommonProps<Datum, ExtraProps>['lineWidth']\n    activeLineWidth: BumpCommonProps<Datum, ExtraProps>['activeLineWidth']\n    inactiveLineWidth: BumpCommonProps<Datum, ExtraProps>['inactiveLineWidth']\n    colors: BumpCommonProps<Datum, ExtraProps>['colors']\n    opacity: BumpCommonProps<Datum, ExtraProps>['opacity']\n    activeOpacity: BumpCommonProps<Datum, ExtraProps>['activeOpacity']\n    inactiveOpacity: BumpCommonProps<Datum, ExtraProps>['inactiveOpacity']\n    pointSize: BumpCommonProps<Datum, ExtraProps>['pointSize']\n    activePointSize: BumpCommonProps<Datum, ExtraProps>['activePointSize']\n    inactivePointSize: BumpCommonProps<Datum, ExtraProps>['inactivePointSize']\n    pointColor: BumpCommonProps<Datum, ExtraProps>['pointColor']\n    pointBorderWidth: BumpCommonProps<Datum, ExtraProps>['pointBorderWidth']\n    activePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['activePointBorderWidth']\n    inactivePointBorderWidth: BumpCommonProps<Datum, ExtraProps>['inactivePointBorderWidth']\n    pointBorderColor: BumpCommonProps<Datum, ExtraProps>['pointBorderColor']\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    defaultActiveSerieIds: string[]\n}) => {\n    const [activeSerieIds, setActiveSerieIds] = useState<string[]>(defaultActiveSerieIds)\n\n    const {\n        series: rawSeries,\n        xScale,\n        yScale,\n    } = useMemo(\n        () =>\n            computeSeries<Datum, ExtraProps>({\n                width,\n                height,\n                data,\n                xPadding,\n                xOuterPadding,\n                yOuterPadding,\n            }),\n        [width, height, data, xPadding, xOuterPadding, yOuterPadding]\n    )\n\n    const lineGenerator = useLineGenerator(interpolation)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getSerieStyle = useSerieStyle<Datum, ExtraProps>({\n        lineWidth,\n        activeLineWidth,\n        inactiveLineWidth,\n        opacity,\n        activeOpacity,\n        inactiveOpacity,\n        isInteractive,\n        activeSerieIds,\n    })\n\n    const series: BumpComputedSerie<Datum, ExtraProps>[] = useMemo(\n        () =>\n            rawSeries.map(serie => ({\n                ...serie,\n                color: getColor(serie.data),\n                ...getSerieStyle(serie),\n            })),\n        [rawSeries, getColor, getSerieStyle]\n    )\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const getPointStyle = usePointStyle<Datum, ExtraProps>({\n        pointSize,\n        activePointSize,\n        inactivePointSize,\n        pointBorderWidth,\n        activePointBorderWidth,\n        inactivePointBorderWidth,\n        isInteractive,\n        activeSerieIds,\n    })\n    const points: BumpPoint<Datum, ExtraProps>[] = useMemo(() => {\n        const pts: BumpPoint<Datum, ExtraProps>[] = []\n        series.forEach(serie => {\n            serie.points.forEach(rawPoint => {\n                // @ts-ignore\n                const point: BumpPoint<Datum, ExtraProps> = {\n                    ...rawPoint,\n                    serie,\n                    isActive: activeSerieIds.includes(serie.id),\n                    isInactive: activeSerieIds.length > 0 && !activeSerieIds.includes(serie.id),\n                }\n                point.color = getPointColor(point)\n                point.borderColor = getPointBorderColor(point)\n\n                pts.push({\n                    ...point,\n                    ...getPointStyle(point),\n                })\n            })\n        })\n\n        return pts\n    }, [series, getPointColor, getPointBorderColor, getPointStyle, activeSerieIds])\n\n    return {\n        xScale,\n        yScale,\n        series,\n        points,\n        lineGenerator,\n        activeSerieIds,\n        setActiveSerieIds,\n    }\n}\n\nexport const useBumpSerieHandlers = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n>({\n    serie,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: BumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: BumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: BumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: BumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: BumpCommonProps<Datum, ExtraProps>['tooltip']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            setActiveSerieIds([serie.id])\n            onMouseEnter && onMouseEnter(serie, event)\n        },\n        [serie, onMouseEnter, showTooltipFromEvent, setActiveSerieIds, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            onMouseMove && onMouseMove(serie, event)\n        },\n        [serie, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveSerieIds([])\n            onMouseLeave && onMouseLeave(serie, event)\n        },\n        [serie, onMouseLeave, hideTooltip, setActiveSerieIds]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            onClick && onClick(serie, event)\n        },\n        [serie, onClick]\n    )\n\n    return useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n        }),\n        [isInteractive, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useBumpSeriesLabels = <\n    Datum extends BumpDatum,\n    ExtraProps extends BumpSerieExtraProps\n>({\n    series,\n    position,\n    padding,\n    color,\n    getLabel,\n}: {\n    series: BumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n    getLabel: Exclude<BumpLabel<Datum, ExtraProps>, false>\n}) => {\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    return useMemo(() => {\n        let textAnchor: 'start' | 'end'\n        let signedPadding: number\n        if (position === 'start') {\n            textAnchor = 'end'\n            signedPadding = padding * -1\n        } else {\n            textAnchor = 'start'\n            signedPadding = padding\n        }\n\n        const labels: BumpLabelData<Datum, ExtraProps>[] = []\n        series.forEach(serie => {\n            let label = serie.id\n            if (typeof getLabel === 'function') {\n                label = getLabel(serie.data)\n            }\n\n            const point =\n                position === 'start'\n                    ? serie.linePoints[0]\n                    : serie.linePoints[serie.linePoints.length - 1]\n\n            // exclude labels for series having missing data at the beginning/end\n            if (point[0] === null || point[1] === null) {\n                return\n            }\n\n            labels.push({\n                id: serie.id,\n                label,\n                x: point[0] + signedPadding,\n                y: point[1],\n                color: getColor(serie),\n                opacity: serie.opacity,\n                serie,\n                textAnchor,\n            })\n        })\n\n        return labels\n    }, [series, position, padding, getColor, getLabel])\n}\n","import { SVGAttributes } from 'react'\nimport { useSpring, animated, to } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { BumpDatum, BumpPoint, BumpSerieExtraProps } from './types'\n\nconst pointStyle: SVGAttributes<SVGCircleElement>['style'] = { pointerEvents: 'none' }\n\ninterface PointProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    point: BumpPoint<Datum, ExtraProps>\n}\n\nexport const Point = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    point,\n}: PointProps<Datum, ExtraProps>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring<{\n        x: number\n        y: number\n        radius: number\n        color: string\n        borderWidth: number\n    }>({\n        x: point.x,\n        y: point.y,\n        radius: point.size / 2,\n        color: point.color,\n        borderWidth: point.borderWidth,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            data-testid={`point.${point.serie.id}.${point.data.x}`}\n            cx={animatedProps.x}\n            cy={animatedProps.y}\n            r={to(animatedProps.radius, v => Math.max(v, 0))}\n            fill={animatedProps.color}\n            strokeWidth={animatedProps.borderWidth}\n            stroke={point.borderColor}\n            style={pointStyle}\n        />\n    )\n}\n","import { MotionProps } from '@nivo/core'\nimport { LineTooltip } from './LineTooltip'\nimport { Point } from './Point'\nimport { BumpCommonProps, BumpPointComponent, DefaultBumpDatum } from './types'\n\nconst commonDefaultProps: Omit<\n    BumpCommonProps<DefaultBumpDatum, Record<string, unknown>>,\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'margin'\n    | 'theme'\n    | 'axisRight'\n    | 'renderWrapper'\n> = {\n    layers: ['grid', 'axes', 'labels', 'lines', 'points'],\n\n    interpolation: 'smooth',\n    xPadding: 0.6,\n    xOuterPadding: 0.5,\n    yOuterPadding: 0.5,\n\n    colors: { scheme: 'nivo' },\n    lineWidth: 2,\n    activeLineWidth: 4,\n    inactiveLineWidth: 1,\n    opacity: 1,\n    activeOpacity: 1,\n    inactiveOpacity: 0.3,\n\n    startLabel: false,\n    startLabelPadding: 16,\n    startLabelTextColor: { from: 'color' },\n    endLabel: true,\n    endLabelPadding: 16,\n    endLabelTextColor: { from: 'color' },\n\n    pointSize: 6,\n    activePointSize: 8,\n    inactivePointSize: 4,\n    pointColor: { from: 'serie.color' },\n    pointBorderWidth: 0,\n    activePointBorderWidth: 0,\n    inactivePointBorderWidth: 0,\n    pointBorderColor: { from: 'serie.color', modifiers: [['darker', 1.4]] },\n\n    enableGridX: true,\n    enableGridY: true,\n    axisTop: {},\n    axisBottom: {},\n    axisLeft: {},\n\n    isInteractive: true,\n    defaultActiveSerieIds: [],\n    tooltip: LineTooltip,\n\n    role: 'img',\n}\n\nexport const bumpSvgDefaultProps: typeof commonDefaultProps & {\n    pointComponent: BumpPointComponent<DefaultBumpDatum, Record<string, unknown>>\n    animate: boolean\n    motionConfig: MotionProps['motionConfig']\n} = {\n    ...commonDefaultProps,\n    pointComponent: Point,\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { BumpComputedSerie, BumpDatum, BumpSerieExtraProps } from './types'\n\ninterface LineTooltipProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n}\n\nexport const LineTooltip = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    serie,\n}: LineTooltipProps<Datum, ExtraProps>) => (\n    <BasicTooltip\n        data-testid={`tooltip.${serie.data.id}`}\n        id={serie.data.id}\n        enableChip={true}\n        color={serie.color}\n    />\n)\n","import { useSpring, animated } from '@react-spring/web'\nimport { Line as D3Line } from 'd3-shape'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { BumpCommonProps, BumpComputedSerie, BumpDatum, BumpSerieExtraProps } from './types'\nimport { useBumpSerieHandlers } from './hooks'\n\ninterface LineProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    serie: BumpComputedSerie<Datum, ExtraProps>\n    lineGenerator: D3Line<[number, number | null]>\n    yStep: number\n    isInteractive: BumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: BumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: BumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: BumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: BumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: BumpCommonProps<Datum, ExtraProps>['tooltip']\n}\n\nexport const Line = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    serie,\n    lineGenerator,\n    yStep,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: LineProps<Datum, ExtraProps>) => {\n    const handlers = useBumpSerieHandlers<Datum, ExtraProps>({\n        serie,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setActiveSerieIds,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const linePath = lineGenerator(serie.linePoints) || ''\n\n    const animatedPath = useAnimatedPath(linePath)\n    const animatedProps = useSpring<{\n        color: string\n        opacity: number\n        lineWidth: number\n    }>({\n        color: serie.color,\n        opacity: serie.opacity,\n        lineWidth: serie.lineWidth,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            <animated.path\n                data-testid={`line.${serie.id}`}\n                fill=\"none\"\n                d={animatedPath}\n                stroke={animatedProps.color}\n                strokeWidth={animatedProps.lineWidth}\n                strokeLinecap=\"round\"\n                strokeOpacity={animatedProps.opacity}\n                style={{ pointerEvents: 'none' }}\n            />\n            {isInteractive && (\n                <path\n                    data-testid={`line.${serie.id}.interactive`}\n                    fill=\"none\"\n                    stroke=\"red\"\n                    strokeOpacity={0}\n                    strokeWidth={yStep}\n                    d={linePath}\n                    strokeLinecap=\"butt\"\n                    onMouseEnter={handlers.onMouseEnter}\n                    onMouseMove={handlers.onMouseMove}\n                    onMouseLeave={handlers.onMouseLeave}\n                    onClick={handlers.onClick}\n                />\n            )}\n        </>\n    )\n}\n","import { useSprings, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport { BumpComputedSerie, BumpDatum, BumpLabel, BumpSerieExtraProps } from './types'\nimport { useBumpSeriesLabels } from './hooks'\n\ninterface LineLabelsProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    series: BumpComputedSerie<Datum, ExtraProps>[]\n    getLabel: Exclude<BumpLabel<Datum, ExtraProps>, false>\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<BumpComputedSerie<Datum, ExtraProps>>\n}\n\nexport const LinesLabels = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    series,\n    getLabel,\n    position,\n    padding,\n    color,\n}: LineLabelsProps<Datum, ExtraProps>) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useBumpSeriesLabels<Datum, ExtraProps>({\n        series,\n        getLabel,\n        position,\n        padding,\n        color,\n    })\n\n    const springs = useSprings<{\n        x: number\n        y: number\n        opacity: number\n    }>(\n        labels.length,\n        labels.map(label => ({\n            x: label.x,\n            y: label.y,\n            opacity: label.opacity,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return (\n                    <animated.text\n                        data-testid={`label.${position}.${label.serie.id}`}\n                        key={label.id}\n                        x={animatedProps.x}\n                        y={animatedProps.y}\n                        textAnchor={label.textAnchor}\n                        dominantBaseline=\"central\"\n                        opacity={animatedProps.opacity}\n                        style={{\n                            ...theme.labels.text,\n                            fill: label.color,\n                        }}\n                    >\n                        {label.label}\n                    </animated.text>\n                )\n            })}\n        </>\n    )\n}\n","import { createElement } from 'react'\nimport { BumpDatum, BumpPoint, BumpPointComponent, BumpSerieExtraProps } from './types'\n\ninterface PointsProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> {\n    points: BumpPoint<Datum, ExtraProps>[]\n    pointComponent: BumpPointComponent<Datum, ExtraProps>\n}\n\nexport const Points = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    points,\n    pointComponent,\n}: PointsProps<Datum, ExtraProps>) => (\n    <>\n        {points.map(point =>\n            createElement(pointComponent, {\n                key: point.id,\n                point,\n            })\n        )}\n    </>\n)\n","import { createElement, useMemo, Fragment, ReactNode } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport {\n    BumpCustomLayerProps,\n    BumpDatum,\n    BumpLayerId,\n    BumpSerieExtraProps,\n    BumpSvgProps,\n    DefaultBumpDatum,\n} from './types'\nimport { useBump } from './hooks'\nimport { bumpSvgDefaultProps } from './defaults'\nimport { Line } from './Line'\nimport { LinesLabels } from './LinesLabels'\nimport { Points } from './Points'\n\ntype InnerBumpProps<Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps> = Omit<\n    BumpSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerBump = <Datum extends BumpDatum, ExtraProps extends BumpSerieExtraProps>({\n    data,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    layers = bumpSvgDefaultProps.layers as NonNullable<BumpSvgProps<Datum, ExtraProps>['layers']>,\n\n    interpolation = bumpSvgDefaultProps.interpolation,\n    xPadding = bumpSvgDefaultProps.xPadding,\n    xOuterPadding = bumpSvgDefaultProps.xOuterPadding,\n    yOuterPadding = bumpSvgDefaultProps.yOuterPadding,\n\n    colors = bumpSvgDefaultProps.colors as NonNullable<BumpSvgProps<Datum, ExtraProps>['colors']>,\n    lineWidth = bumpSvgDefaultProps.lineWidth,\n    activeLineWidth = bumpSvgDefaultProps.activeLineWidth,\n    inactiveLineWidth = bumpSvgDefaultProps.inactiveLineWidth,\n    opacity = bumpSvgDefaultProps.opacity,\n    activeOpacity = bumpSvgDefaultProps.activeOpacity,\n    inactiveOpacity = bumpSvgDefaultProps.inactiveOpacity,\n\n    startLabel = bumpSvgDefaultProps.startLabel as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['startLabel']\n    >,\n    startLabelPadding = bumpSvgDefaultProps.startLabelPadding,\n    startLabelTextColor = bumpSvgDefaultProps.startLabelTextColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['startLabelTextColor']\n    >,\n    endLabel = bumpSvgDefaultProps.endLabel as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['endLabel']\n    >,\n    endLabelPadding = bumpSvgDefaultProps.endLabelPadding,\n    endLabelTextColor = bumpSvgDefaultProps.endLabelTextColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['endLabelTextColor']\n    >,\n\n    pointComponent = bumpSvgDefaultProps.pointComponent as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointComponent']\n    >,\n    pointSize = bumpSvgDefaultProps.pointSize,\n    activePointSize = bumpSvgDefaultProps.activePointSize,\n    inactivePointSize = bumpSvgDefaultProps.inactivePointSize,\n    pointColor = bumpSvgDefaultProps.pointColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointColor']\n    >,\n    pointBorderWidth = bumpSvgDefaultProps.pointBorderWidth,\n    activePointBorderWidth = bumpSvgDefaultProps.activePointBorderWidth,\n    inactivePointBorderWidth = bumpSvgDefaultProps.inactivePointBorderWidth,\n    pointBorderColor = bumpSvgDefaultProps.pointBorderColor as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['pointBorderColor']\n    >,\n\n    enableGridX = bumpSvgDefaultProps.enableGridX,\n    enableGridY = bumpSvgDefaultProps.enableGridY,\n    axisTop = bumpSvgDefaultProps.axisTop,\n    axisRight,\n    axisBottom = bumpSvgDefaultProps.axisBottom,\n    axisLeft = bumpSvgDefaultProps.axisLeft,\n\n    isInteractive = bumpSvgDefaultProps.isInteractive,\n    defaultActiveSerieIds = bumpSvgDefaultProps.defaultActiveSerieIds,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = bumpSvgDefaultProps.tooltip as NonNullable<\n        BumpSvgProps<Datum, ExtraProps>['tooltip']\n    >,\n    role = bumpSvgDefaultProps.role,\n}: InnerBumpProps<Datum, ExtraProps>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { series, points, xScale, yScale, lineGenerator, activeSerieIds, setActiveSerieIds } =\n        useBump<Datum, ExtraProps>({\n            width: innerWidth,\n            height: innerHeight,\n            data,\n            interpolation,\n            xPadding,\n            xOuterPadding,\n            yOuterPadding,\n            lineWidth,\n            activeLineWidth,\n            inactiveLineWidth,\n            colors,\n            opacity,\n            activeOpacity,\n            inactiveOpacity,\n            pointSize,\n            activePointSize,\n            inactivePointSize,\n            pointColor,\n            pointBorderWidth,\n            activePointBorderWidth,\n            inactivePointBorderWidth,\n            pointBorderColor,\n            isInteractive,\n            defaultActiveSerieIds,\n        })\n\n    const layerById: Record<BumpLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        labels: null,\n        lines: null,\n        points: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('lines')) {\n        layerById.lines = (\n            <Fragment key=\"lines\">\n                {series.map(serie => (\n                    <Line<Datum, ExtraProps>\n                        key={serie.id}\n                        serie={serie}\n                        setActiveSerieIds={setActiveSerieIds}\n                        lineGenerator={lineGenerator}\n                        yStep={yScale.step()}\n                        isInteractive={isInteractive}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                        tooltip={tooltip}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('points')) {\n        layerById.points = (\n            <Points<Datum, ExtraProps>\n                key=\"points\"\n                pointComponent={pointComponent}\n                points={points}\n            />\n        )\n    }\n\n    if (layers.includes('labels')) {\n        layerById.labels = (\n            <Fragment key=\"legends\">\n                {startLabel !== false && (\n                    <LinesLabels<Datum, ExtraProps>\n                        series={series}\n                        getLabel={startLabel}\n                        position=\"start\"\n                        padding={startLabelPadding}\n                        color={startLabelTextColor}\n                    />\n                )}\n                {endLabel !== false && (\n                    <LinesLabels<Datum, ExtraProps>\n                        series={series}\n                        getLabel={endLabel}\n                        position=\"end\"\n                        padding={endLabelPadding}\n                        color={endLabelTextColor}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    const customLayerProps: BumpCustomLayerProps<Datum, ExtraProps> = useMemo(\n        () => ({\n            innerHeight,\n            innerWidth,\n            lineGenerator,\n            points,\n            series,\n            xScale,\n            yScale,\n            activeSerieIds,\n            setActiveSerieIds,\n        }),\n        [\n            activeSerieIds,\n            setActiveSerieIds,\n            innerHeight,\n            innerWidth,\n            lineGenerator,\n            points,\n            series,\n            xScale,\n            yScale,\n        ]\n    )\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Bump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>({\n    isInteractive = bumpSvgDefaultProps.isInteractive,\n    animate = bumpSvgDefaultProps.animate,\n    motionConfig = bumpSvgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: BumpSvgProps<Datum, ExtraProps>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerBump<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { createElement, useMemo, useCallback, useState, MouseEvent } from 'react'\nimport { area as d3Area, curveBasis, curveLinear } from 'd3-shape'\nimport { useTheme } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor, InheritedColorConfig } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { computeSeries } from './compute'\nimport {\n    AreaBumpAreaPoint,\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDataProps,\n    AreaBumpDatum,\n    AreaBumpInterpolation,\n    AreaBumpLabel,\n    AreaBumpLabelData,\n    AreaBumpSerieExtraProps,\n    DefaultAreaBumpDatum,\n} from './types'\n\nconst useAreaBumpSeries = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n}) =>\n    useMemo(\n        () => computeSeries<Datum, ExtraProps>({ data, width, height, align, spacing, xPadding }),\n        [data, width, height, align, spacing, xPadding]\n    )\n\nconst useAreaGenerator = (interpolation: AreaBumpInterpolation) =>\n    useMemo(\n        () =>\n            d3Area<AreaBumpAreaPoint>()\n                .x(d => d.x)\n                .y0(d => d.y0)\n                .y1(d => d.y1)\n                .curve(interpolation === 'smooth' ? curveBasis : curveLinear),\n        [interpolation]\n    )\n\nconst useSerieDerivedProp = <Target, Output extends string | number>(\n    instruction: ((target: Target) => Output) | Output\n): ((target: Target) => Output) =>\n    useMemo(() => {\n        if (typeof instruction === 'function') return instruction\n        return () => instruction\n    }, [instruction])\n\nconst useSerieStyle = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    fillOpacity,\n    activeFillOpacity,\n    inactiveFillOpacity,\n    borderWidth,\n    activeBorderWidth,\n    inactiveBorderWidth,\n    borderColor,\n    borderOpacity,\n    activeBorderOpacity,\n    inactiveBorderOpacity,\n    isInteractive,\n    activeSerieIds,\n}: {\n    fillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['fillOpacity']\n    activeFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeFillOpacity']\n    inactiveFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveFillOpacity']\n    borderWidth: AreaBumpCommonProps<Datum, ExtraProps>['borderWidth']\n    activeBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderWidth']\n    inactiveBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderWidth']\n    borderColor: AreaBumpCommonProps<Datum, ExtraProps>['borderColor']\n    borderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['borderOpacity']\n    activeBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderOpacity']\n    inactiveBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderOpacity']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    activeSerieIds: string[]\n}) => {\n    type Serie = Omit<\n        AreaBumpComputedSerie<Datum, ExtraProps>,\n        'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n    >\n\n    const getFillOpacity = useSerieDerivedProp<Serie, number>(fillOpacity)\n    const getActiveFillOpacity = useSerieDerivedProp<Serie, number>(activeFillOpacity)\n    const getInactiveFillOpacity = useSerieDerivedProp<Serie, number>(inactiveFillOpacity)\n\n    const getBorderWidth = useSerieDerivedProp<Serie, number>(borderWidth)\n    const getActiveBorderWidth = useSerieDerivedProp<Serie, number>(activeBorderWidth)\n    const getInactiveBorderWidth = useSerieDerivedProp<Serie, number>(inactiveBorderWidth)\n\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n\n    const getBorderOpacity = useSerieDerivedProp<Serie, number>(borderOpacity)\n    const getActiveBorderOpacity = useSerieDerivedProp<Serie, number>(activeBorderOpacity)\n    const getInactiveBorderOpacity = useSerieDerivedProp<Serie, number>(inactiveBorderOpacity)\n\n    const getNormalStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getFillOpacity(serie),\n            borderWidth: getBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getBorderOpacity(serie),\n        }),\n        [getFillOpacity, getBorderWidth, getBorderColor, getBorderOpacity]\n    )\n    const getActiveStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getActiveFillOpacity(serie),\n            borderWidth: getActiveBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getActiveBorderOpacity(serie),\n        }),\n        [getActiveFillOpacity, getActiveBorderWidth, getBorderColor, getActiveBorderOpacity]\n    )\n    const getInactiveStyle = useCallback(\n        (serie: Serie) => ({\n            fillOpacity: getInactiveFillOpacity(serie),\n            borderWidth: getInactiveBorderWidth(serie),\n            borderColor: getBorderColor(serie),\n            borderOpacity: getInactiveBorderOpacity(serie),\n        }),\n        [getInactiveFillOpacity, getInactiveBorderWidth, getBorderColor, getInactiveBorderOpacity]\n    )\n\n    return useCallback(\n        (serie: Serie) => {\n            if (!isInteractive || activeSerieIds.length === 0) return getNormalStyle(serie)\n            if (activeSerieIds.includes(serie.id)) return getActiveStyle(serie)\n            return getInactiveStyle(serie)\n        },\n        [getNormalStyle, getActiveStyle, getInactiveStyle, isInteractive, activeSerieIds]\n    )\n}\n\nexport const useAreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n    interpolation,\n    colors,\n    fillOpacity,\n    activeFillOpacity,\n    inactiveFillOpacity,\n    borderWidth,\n    activeBorderWidth,\n    inactiveBorderWidth,\n    borderColor,\n    borderOpacity,\n    activeBorderOpacity,\n    inactiveBorderOpacity,\n    isInteractive,\n    defaultActiveSerieIds,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n    interpolation: AreaBumpCommonProps<Datum, ExtraProps>['interpolation']\n    colors: AreaBumpCommonProps<Datum, ExtraProps>['colors']\n    fillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['fillOpacity']\n    activeFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeFillOpacity']\n    inactiveFillOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveFillOpacity']\n    borderWidth: AreaBumpCommonProps<Datum, ExtraProps>['borderWidth']\n    activeBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderWidth']\n    inactiveBorderWidth: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderWidth']\n    borderColor: AreaBumpCommonProps<Datum, ExtraProps>['borderColor']\n    borderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['borderOpacity']\n    activeBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['activeBorderOpacity']\n    inactiveBorderOpacity: AreaBumpCommonProps<Datum, ExtraProps>['inactiveBorderOpacity']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    defaultActiveSerieIds: string[]\n}) => {\n    const [activeSerieIds, setActiveSerieIds] = useState<string[]>(defaultActiveSerieIds)\n\n    const {\n        series: rawSeries,\n        xScale,\n        heightScale,\n    } = useAreaBumpSeries<Datum, ExtraProps>({\n        data,\n        width,\n        height,\n        align,\n        spacing,\n        xPadding,\n    })\n\n    const areaGenerator = useAreaGenerator(interpolation)\n\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const getSerieStyle = useSerieStyle<Datum, ExtraProps>({\n        fillOpacity,\n        activeFillOpacity,\n        inactiveFillOpacity,\n        borderWidth,\n        activeBorderWidth,\n        inactiveBorderWidth,\n        borderColor,\n        borderOpacity,\n        activeBorderOpacity,\n        inactiveBorderOpacity,\n        isInteractive,\n        activeSerieIds,\n    })\n\n    const series: AreaBumpComputedSerie<Datum, ExtraProps>[] = useMemo(\n        () =>\n            rawSeries.map(serie => {\n                const serieWithColor = {\n                    ...serie,\n                    color: getColor(serie.data),\n                }\n\n                return {\n                    ...serieWithColor,\n                    ...getSerieStyle(serieWithColor),\n                }\n            }),\n        [rawSeries, getColor, getSerieStyle]\n    )\n\n    return {\n        series,\n        xScale,\n        heightScale,\n        areaGenerator,\n        activeSerieIds,\n        setActiveSerieIds,\n    }\n}\n\nexport const useAreaBumpSerieHandlers = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    serie,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: AreaBumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: AreaBumpCommonProps<Datum, ExtraProps>['tooltip']\n}) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            setActiveSerieIds([serie.id])\n            onMouseEnter && onMouseEnter(serie, event)\n        },\n        [serie, onMouseEnter, showTooltipFromEvent, setActiveSerieIds, tooltip]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            showTooltipFromEvent(createElement(tooltip, { serie }), event)\n            onMouseMove && onMouseMove(serie, event)\n        },\n        [serie, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            hideTooltip()\n            setActiveSerieIds([])\n            onMouseLeave && onMouseLeave(serie, event)\n        },\n        [serie, onMouseLeave, hideTooltip, setActiveSerieIds]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            onClick && onClick(serie, event)\n        },\n        [serie, onClick]\n    )\n\n    return useMemo(\n        () => ({\n            onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n            onMouseMove: isInteractive ? handleMouseMove : undefined,\n            onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n            onClick: isInteractive ? handleClick : undefined,\n        }),\n        [isInteractive, handleMouseEnter, handleMouseMove, handleMouseLeave, handleClick]\n    )\n}\n\nexport const useAreaBumpSeriesLabels = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    series,\n    position,\n    padding,\n    color,\n    getLabel,\n}: {\n    series: AreaBumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<AreaBumpComputedSerie<Datum, ExtraProps>>\n    getLabel: Exclude<AreaBumpLabel<Datum, ExtraProps>, false>\n}): AreaBumpLabelData<Datum, ExtraProps>[] => {\n    const theme = useTheme()\n    const getColor = useInheritedColor(color, theme)\n\n    return useMemo(() => {\n        let textAnchor: 'start' | 'end'\n        let signedPadding: number\n        if (position === 'start') {\n            textAnchor = 'end'\n            signedPadding = padding * -1\n        } else {\n            textAnchor = 'start'\n            signedPadding = padding\n        }\n\n        return series.map(serie => {\n            let label = serie.id\n            if (typeof getLabel === 'function') {\n                label = getLabel(serie.data)\n            }\n\n            const point =\n                position === 'start' ? serie.points[0] : serie.points[serie.points.length - 1]\n\n            return {\n                id: serie.id,\n                label,\n                x: point.x + signedPadding,\n                y: point.y,\n                color: getColor(serie),\n                opacity: serie.fillOpacity,\n                serie,\n                textAnchor,\n            }\n        })\n    }, [getLabel, series, position, padding, getColor])\n}\n","import { scalePoint, scaleLinear } from 'd3-scale'\nimport { castPointScale, castLinearScale, ScalePoint, ScaleLinear } from '@nivo/scales'\nimport {\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDataProps,\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n} from './types'\n\nexport const computeSeries = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    data,\n    width,\n    height,\n    align,\n    spacing,\n    xPadding,\n}: {\n    data: AreaBumpDataProps<Datum, ExtraProps>['data']\n    width: number\n    height: number\n    align: AreaBumpCommonProps<Datum, ExtraProps>['align']\n    spacing: AreaBumpCommonProps<Datum, ExtraProps>['spacing']\n    xPadding: AreaBumpCommonProps<Datum, ExtraProps>['xPadding']\n}): {\n    series: Omit<\n        AreaBumpComputedSerie<Datum, ExtraProps>,\n        'color' | 'fill' | 'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n    >[]\n    xScale: ScalePoint<Datum['x']>\n    heightScale: ScaleLinear<number>\n} => {\n    const slices = new Map<\n        Datum['x'],\n        {\n            id: Datum['x']\n            total: number\n            x: number\n            values: Map<\n                string,\n                {\n                    serieId: string\n                    value: number\n                    position: number\n                    height: number\n                    beforeHeight: number\n                }\n            >\n        }\n    >()\n\n    let maxSum: number\n    let maxValues: number\n\n    data.forEach(serie => {\n        serie.data.forEach(datum => {\n            if (!slices.has(datum.x)) {\n                slices.set(datum.x, {\n                    id: datum.x,\n                    total: 0,\n                    values: new Map(),\n                    x: 0,\n                })\n            }\n\n            const slice = slices.get(datum.x)!\n\n            const total = slice.total + datum.y\n            slice.total = total\n\n            slice.values.set(serie.id, {\n                serieId: serie.id,\n                value: datum.y,\n                position: 0,\n                height: 0,\n                beforeHeight: 0,\n            })\n\n            if (maxSum === undefined || total > maxSum) {\n                maxSum = total\n            }\n            if (maxValues === undefined || slice.values.size > maxValues) {\n                maxValues = slice.values.size\n            }\n        })\n    })\n\n    const xScale = castPointScale<Datum['x']>(\n        scalePoint<Datum['x']>().domain(Array.from(slices.keys())).range([0, width])\n    )\n\n    const heightScale = castLinearScale<number, number>(\n        scaleLinear<number, number>()\n            .domain([0, maxSum!])\n            .range([0, height - maxValues! * spacing])\n    )\n\n    slices.forEach((slice, x) => {\n        slice.x = xScale(x)!\n        const sliceHeight = heightScale(slice.total) + slice.values.size * spacing\n\n        let offset = 0\n        if (align === 'middle') {\n            offset = (height - sliceHeight) / 2\n        } else if (align === 'end') {\n            offset = height - sliceHeight\n        }\n\n        Array.from(slice.values.values())\n            .sort((a, b) => b.value - a.value)\n            .forEach((value, position, all) => {\n                const previousValues = all.filter((_i, pos) => pos < position)\n                const beforeValue = previousValues.reduce((t, v) => t + v.value, 0)\n\n                const sliceValue = slice.values.get(value.serieId)!\n                sliceValue.position = position\n                sliceValue.height = heightScale(value.value)\n                sliceValue.beforeHeight =\n                    heightScale(beforeValue) + offset + spacing * (previousValues.length + 0.5)\n            })\n    })\n\n    const areaPointPadding = xScale.step() * Math.min(xPadding * 0.5, 0.5)\n\n    const series = data.map(serie => {\n        const computedSerie: Omit<\n            AreaBumpComputedSerie<Datum, ExtraProps>,\n            'color' | 'fill' | 'fillOpacity' | 'borderWidth' | 'borderColor' | 'borderOpacity'\n        > = {\n            id: serie.id,\n            data: serie,\n            points: [],\n            areaPoints: [],\n        }\n\n        serie.data.forEach((datum, i) => {\n            const slice = slices.get(datum.x)!\n            const position = slice.values.get(serie.id)!\n\n            const x = slice.x\n            const { beforeHeight, height } = position\n            const y = beforeHeight + height / 2\n            const y0 = beforeHeight\n            const y1 = beforeHeight + height\n\n            computedSerie.points.push({\n                x,\n                y,\n                height,\n                data: { ...datum },\n            })\n            if (i > 0) {\n                computedSerie.areaPoints.push({ x: x - areaPointPadding, y0, y1 })\n            }\n            computedSerie.areaPoints.push({ x, y0, y1 })\n            if (i < serie.data.length - 1) {\n                computedSerie.areaPoints.push({ x: x + areaPointPadding, y0, y1 })\n            }\n        })\n\n        return computedSerie\n    })\n\n    return {\n        series,\n        xScale,\n        heightScale,\n    }\n}\n","import { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { useAreaBumpSerieHandlers } from './hooks'\nimport {\n    AreaBumpAreaGenerator,\n    AreaBumpCommonProps,\n    AreaBumpComputedSerie,\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n} from './types'\n\ninterface AreaProps<Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps> {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n    areaGenerator: AreaBumpAreaGenerator\n    blendMode: AreaBumpCommonProps<Datum, ExtraProps>['blendMode']\n    isInteractive: AreaBumpCommonProps<Datum, ExtraProps>['isInteractive']\n    onMouseEnter?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseEnter']\n    onMouseMove?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseMove']\n    onMouseLeave?: AreaBumpCommonProps<Datum, ExtraProps>['onMouseLeave']\n    onClick?: AreaBumpCommonProps<Datum, ExtraProps>['onClick']\n    setActiveSerieIds: (serieIds: string[]) => void\n    tooltip: AreaBumpCommonProps<Datum, ExtraProps>['tooltip']\n}\n\nexport const Area = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    serie,\n    areaGenerator,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    setActiveSerieIds,\n    tooltip,\n}: AreaProps<Datum, ExtraProps>) => {\n    const handlers = useAreaBumpSerieHandlers<Datum, ExtraProps>({\n        serie,\n        isInteractive,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n        setActiveSerieIds,\n        tooltip,\n    })\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(areaGenerator(serie.areaPoints) || '')\n    const animatedProps = useSpring<{\n        color: string\n        fillOpacity: number\n        stroke: string\n        strokeOpacity: number\n    }>({\n        color: serie.color,\n        fillOpacity: serie.fillOpacity,\n        stroke: serie.borderColor,\n        strokeOpacity: serie.borderOpacity,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            data-testid={`area.${serie.id}`}\n            d={animatedPath}\n            fill={serie.fill ? serie.fill : animatedProps.color}\n            fillOpacity={animatedProps.fillOpacity}\n            stroke={animatedProps.stroke}\n            strokeWidth={serie.borderWidth}\n            strokeOpacity={animatedProps.strokeOpacity}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={handlers.onMouseEnter}\n            onMouseMove={handlers.onMouseMove}\n            onMouseLeave={handlers.onMouseLeave}\n            onClick={handlers.onClick}\n        />\n    )\n}\n","import { useSprings, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { InheritedColorConfig } from '@nivo/colors'\nimport {\n    AreaBumpComputedSerie,\n    AreaBumpDatum,\n    AreaBumpLabel,\n    AreaBumpSerieExtraProps,\n} from './types'\nimport { useAreaBumpSeriesLabels } from './hooks'\n\ninterface AreaLabelsProps<Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps> {\n    getLabel: Exclude<AreaBumpLabel<Datum, ExtraProps>, false>\n    series: AreaBumpComputedSerie<Datum, ExtraProps>[]\n    position: 'start' | 'end'\n    padding: number\n    color: InheritedColorConfig<AreaBumpComputedSerie<Datum, ExtraProps>>\n}\n\nexport const AreasLabels = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    getLabel,\n    series,\n    position,\n    padding,\n    color,\n}: AreaLabelsProps<Datum, ExtraProps>) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useAreaBumpSeriesLabels<Datum, ExtraProps>({\n        getLabel,\n        series,\n        position,\n        padding,\n        color,\n    })\n\n    const springs = useSprings<{\n        x: number\n        y: number\n        opacity: number\n    }>(\n        labels.length,\n        labels.map(label => ({\n            x: label.x,\n            y: label.y,\n            opacity: label.opacity,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return (\n                    <animated.text\n                        data-testid={`label.${position}.${label.serie.id}`}\n                        key={label.id}\n                        x={animatedProps.x}\n                        y={animatedProps.y}\n                        textAnchor={label.textAnchor}\n                        dominantBaseline=\"central\"\n                        opacity={animatedProps.opacity}\n                        style={{\n                            ...theme.labels.text,\n                            fill: label.color,\n                        }}\n                    >\n                        {label.label}\n                    </animated.text>\n                )\n            })}\n        </>\n    )\n}\n","import { MotionProps, SvgDefsAndFill } from '@nivo/core'\nimport { AreaBumpCommonProps, AreaBumpComputedSerie, DefaultAreaBumpDatum } from './types'\nimport { AreaTooltip } from './AreaTooltip'\n\nconst commonDefaultProps: Omit<\n    AreaBumpCommonProps<DefaultAreaBumpDatum, Record<string, unknown>>,\n    | 'onMouseEnter'\n    | 'onMouseMove'\n    | 'onMouseLeave'\n    | 'onClick'\n    | 'margin'\n    | 'theme'\n    | 'renderWrapper'\n> = {\n    align: 'middle',\n\n    layers: ['grid', 'axes', 'labels', 'areas'],\n\n    interpolation: 'smooth',\n    spacing: 0,\n    xPadding: 0.6,\n\n    colors: { scheme: 'nivo' },\n    blendMode: 'normal',\n    fillOpacity: 0.8,\n    activeFillOpacity: 1,\n    inactiveFillOpacity: 0.15,\n    borderWidth: 1,\n    activeBorderWidth: 1,\n    inactiveBorderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 0.4]] },\n    borderOpacity: 1,\n    activeBorderOpacity: 1,\n    inactiveBorderOpacity: 0,\n\n    startLabel: false,\n    startLabelPadding: 12,\n    startLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n    endLabel: true,\n    endLabelPadding: 12,\n    endLabelTextColor: { from: 'color', modifiers: [['darker', 1]] },\n\n    enableGridX: true,\n    axisTop: {},\n    axisBottom: {},\n\n    isInteractive: true,\n    defaultActiveSerieIds: [],\n    tooltip: AreaTooltip,\n\n    role: 'img',\n}\n\nexport const areaBumpSvgDefaultProps: typeof commonDefaultProps &\n    SvgDefsAndFill<AreaBumpComputedSerie<DefaultAreaBumpDatum, Record<string, unknown>>> & {\n        animate: boolean\n        motionConfig: MotionProps['motionConfig']\n    } = {\n    ...commonDefaultProps,\n    defs: [],\n    fill: [],\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { AreaBumpDatum, AreaBumpComputedSerie, AreaBumpSerieExtraProps } from './types'\n\ninterface AreaTooltipProps<\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n> {\n    serie: AreaBumpComputedSerie<Datum, ExtraProps>\n}\n\nexport const AreaTooltip = <\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n>({\n    serie,\n}: AreaTooltipProps<Datum, ExtraProps>) => (\n    <BasicTooltip id={serie.id} enableChip={true} color={serie.color} />\n)\n","import { Fragment, useMemo, ReactNode, createElement } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    SvgWrapper,\n    Container,\n} from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { useAreaBump } from './hooks'\nimport { Area } from './Area'\nimport { AreasLabels } from './AreasLabels'\nimport {\n    AreaBumpSvgProps,\n    AreaBumpDatum,\n    DefaultAreaBumpDatum,\n    AreaBumpLayerId,\n    AreaBumpCustomLayerProps,\n    AreaBumpSerieExtraProps,\n} from './types'\nimport { areaBumpSvgDefaultProps } from './defaults'\n\ntype InnerAreaBumpProps<\n    Datum extends AreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps\n> = Omit<\n    AreaBumpSvgProps<Datum, ExtraProps>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerAreaBump = <Datum extends AreaBumpDatum, ExtraProps extends AreaBumpSerieExtraProps>({\n    data,\n    align = areaBumpSvgDefaultProps.align,\n\n    width,\n    height,\n    margin: partialMargin,\n\n    layers = areaBumpSvgDefaultProps.layers as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['layers']\n    >,\n\n    interpolation = areaBumpSvgDefaultProps.interpolation,\n    spacing = areaBumpSvgDefaultProps.spacing,\n    xPadding = areaBumpSvgDefaultProps.xPadding,\n\n    colors = areaBumpSvgDefaultProps.colors as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['colors']\n    >,\n    blendMode = areaBumpSvgDefaultProps.blendMode,\n    fillOpacity = areaBumpSvgDefaultProps.fillOpacity,\n    activeFillOpacity = areaBumpSvgDefaultProps.activeFillOpacity,\n    inactiveFillOpacity = areaBumpSvgDefaultProps.inactiveFillOpacity,\n    defs = areaBumpSvgDefaultProps.defs,\n    fill = areaBumpSvgDefaultProps.fill as NonNullable<AreaBumpSvgProps<Datum, ExtraProps>['fill']>,\n    borderWidth = areaBumpSvgDefaultProps.borderWidth,\n    activeBorderWidth = areaBumpSvgDefaultProps.activeBorderWidth,\n    inactiveBorderWidth = areaBumpSvgDefaultProps.inactiveBorderWidth,\n    borderColor = areaBumpSvgDefaultProps.borderColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['borderColor']\n    >,\n    borderOpacity = areaBumpSvgDefaultProps.borderOpacity,\n    activeBorderOpacity = areaBumpSvgDefaultProps.activeBorderOpacity,\n    inactiveBorderOpacity = areaBumpSvgDefaultProps.inactiveBorderOpacity,\n\n    startLabel = areaBumpSvgDefaultProps.startLabel as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['startLabel']\n    >,\n    startLabelPadding = areaBumpSvgDefaultProps.startLabelPadding,\n    startLabelTextColor = areaBumpSvgDefaultProps.startLabelTextColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['startLabelTextColor']\n    >,\n    endLabel = areaBumpSvgDefaultProps.endLabel as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['endLabel']\n    >,\n    endLabelPadding = areaBumpSvgDefaultProps.endLabelPadding,\n    endLabelTextColor = areaBumpSvgDefaultProps.endLabelTextColor as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['endLabelTextColor']\n    >,\n\n    enableGridX = areaBumpSvgDefaultProps.enableGridX,\n    axisTop = areaBumpSvgDefaultProps.axisTop,\n    axisBottom = areaBumpSvgDefaultProps.axisBottom,\n\n    isInteractive = areaBumpSvgDefaultProps.isInteractive,\n    defaultActiveSerieIds = areaBumpSvgDefaultProps.defaultActiveSerieIds,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = areaBumpSvgDefaultProps.tooltip as NonNullable<\n        AreaBumpSvgProps<Datum, ExtraProps>['tooltip']\n    >,\n    role = areaBumpSvgDefaultProps.role,\n}: InnerAreaBumpProps<Datum, ExtraProps>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { series, xScale, heightScale, areaGenerator, setActiveSerieIds } = useAreaBump<\n        Datum,\n        ExtraProps\n    >({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        align,\n        spacing,\n        xPadding,\n        interpolation,\n        colors,\n        fillOpacity,\n        activeFillOpacity,\n        inactiveFillOpacity,\n        borderWidth,\n        activeBorderWidth,\n        inactiveBorderWidth,\n        borderColor,\n        borderOpacity,\n        activeBorderOpacity,\n        inactiveBorderOpacity,\n        isInteractive,\n        defaultActiveSerieIds,\n    })\n\n    const boundDefs = useMemo(\n        () => bindDefs(defs, series, fill, { targetKey: 'fill' }),\n        [defs, series, fill]\n    )\n\n    const layerById: Record<AreaBumpLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        labels: null,\n        areas: null,\n    }\n\n    if (layers.includes('grid') && enableGridX) {\n        layerById.grid = <Grid key=\"grid\" width={innerWidth} height={innerHeight} xScale={xScale} />\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={heightScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                bottom={axisBottom}\n            />\n        )\n    }\n\n    if (layers.includes('areas')) {\n        layerById.areas = (\n            <Fragment key=\"areas\">\n                {series.map(serie => (\n                    <Area<Datum, ExtraProps>\n                        key={serie.id}\n                        areaGenerator={areaGenerator}\n                        serie={serie}\n                        blendMode={blendMode}\n                        isInteractive={isInteractive}\n                        setActiveSerieIds={setActiveSerieIds}\n                        onMouseEnter={onMouseEnter}\n                        onMouseMove={onMouseMove}\n                        onMouseLeave={onMouseLeave}\n                        onClick={onClick}\n                        tooltip={tooltip}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    if (layers.includes('labels')) {\n        layerById.labels = (\n            <Fragment key=\"labels\">\n                {startLabel !== false && (\n                    <AreasLabels<Datum, ExtraProps>\n                        getLabel={startLabel}\n                        series={series}\n                        position=\"start\"\n                        padding={startLabelPadding}\n                        color={startLabelTextColor}\n                    />\n                )}\n                {endLabel !== false && (\n                    <AreasLabels<Datum, ExtraProps>\n                        getLabel={endLabel}\n                        series={series}\n                        position=\"end\"\n                        padding={endLabelPadding}\n                        color={endLabelTextColor}\n                    />\n                )}\n            </Fragment>\n        )\n    }\n\n    const customLayerProps: AreaBumpCustomLayerProps<Datum, ExtraProps> = useMemo(\n        () => ({\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n            series,\n            xScale,\n            areaGenerator,\n        }),\n        [innerWidth, innerHeight, outerWidth, outerHeight, series, xScale, areaGenerator]\n    )\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const AreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>({\n    isInteractive = areaBumpSvgDefaultProps.isInteractive,\n    animate = areaBumpSvgDefaultProps.animate,\n    motionConfig = areaBumpSvgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: AreaBumpSvgProps<Datum, ExtraProps>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerAreaBump<Datum, ExtraProps> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport {\n    AreaBumpDatum,\n    AreaBumpSerieExtraProps,\n    AreaBumpSvgProps,\n    DefaultAreaBumpDatum,\n} from './types'\nimport { AreaBump } from './AreaBump'\n\nexport const ResponsiveAreaBump = <\n    Datum extends AreaBumpDatum = DefaultAreaBumpDatum,\n    ExtraProps extends AreaBumpSerieExtraProps = Record<string, unknown>\n>(\n    props: Omit<AreaBumpSvgProps<Datum, ExtraProps>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <AreaBump<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { BumpDatum, BumpSerieExtraProps, BumpSvgProps, DefaultBumpDatum } from './types'\nimport { Bump } from './Bump'\n\nexport const ResponsiveBump = <\n    Datum extends BumpDatum = DefaultBumpDatum,\n    ExtraProps extends BumpSerieExtraProps = Record<string, never>\n>(\n    props: Omit<BumpSvgProps<Datum, ExtraProps>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => (\n            <Bump<Datum, ExtraProps> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["useSerieDerivedProp","instruction","useMemo","useBump","_ref3","width","height","data","interpolation","xPadding","xOuterPadding","yOuterPadding","lineWidth","activeLineWidth","inactiveLineWidth","colors","opacity","activeOpacity","inactiveOpacity","pointSize","activePointSize","inactivePointSize","pointColor","pointBorderWidth","activePointBorderWidth","inactivePointBorderWidth","pointBorderColor","isInteractive","defaultActiveSerieIds","_useState","useState","activeSerieIds","setActiveSerieIds","_useMemo","_ref","xValuesSet","Set","yValuesSet","forEach","serie","datum","add","x","y","xValues","Array","from","xScale","castPointScale","scalePoint","domain","range","padding","yValues","sort","a","b","yScale","linePointPadding","step","Math","min","series","map","rawSerie","id","points","linePoints","i","point","push","length","filter","computeSeries","rawSeries","lineGenerator","d3Line","line","curve","curveBasis","curveLinear","defined","d","useLineGenerator","getColor","useOrdinalColorScale","getSerieStyle","getLineWidth","getActiveLineWidth","getInactiveLineWidth","getOpacity","getActiveOpacity","getInactiveOpacity","getNormalStyle","useCallback","getActiveStyle","getInactiveStyle","includes","useSerieStyle","_extends","color","theme","useTheme","getPointColor","useInheritedColor","getPointBorderColor","getPointStyle","_ref2","getSize","getActiveSize","getInactiveSize","getBorderWidth","getActiveBorderWidth","getInactiveBorderWidth","size","borderWidth","usePointStyle","pts","rawPoint","isActive","isInactive","borderColor","useBumpSerieHandlers","_ref4","onMouseEnter","onMouseMove","onMouseLeave","onClick","tooltip","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","event","createElement","handleMouseMove","handleMouseLeave","handleClick","undefined","useBumpSeriesLabels","_ref5","position","getLabel","textAnchor","signedPadding","labels","label","pointStyle","pointerEvents","bumpSvgDefaultProps","layers","scheme","startLabel","startLabelPadding","startLabelTextColor","endLabel","endLabelPadding","endLabelTextColor","modifiers","enableGridX","enableGridY","axisTop","axisBottom","axisLeft","_jsx","BasicTooltip","enableChip","role","pointComponent","_useMotionConfig","useMotionConfig","animate","springConfig","config","animatedProps","useSpring","radius","immediate","jsx","animated","circle","cx","cy","r","to","v","max","fill","strokeWidth","stroke","style","motionConfig","Line","yStep","handlers","linePath","animatedPath","useAnimatedPath","_jsxs","_Fragment","children","path","strokeLinecap","strokeOpacity","LinesLabels","springs","useSprings","index","text","dominantBaseline","Points","key","InnerBump","partialMargin","margin","_ref$layers","_ref$interpolation","_ref$xPadding","_ref$xOuterPadding","_ref$yOuterPadding","_ref$colors","_ref$lineWidth","_ref$activeLineWidth","_ref$inactiveLineWidt","_ref$opacity","_ref$activeOpacity","_ref$inactiveOpacity","_ref$startLabel","_ref$startLabelPaddin","_ref$startLabelTextCo","_ref$endLabel","_ref$endLabelPadding","_ref$endLabelTextColo","_ref$pointComponent","_ref$pointSize","_ref$activePointSize","_ref$inactivePointSiz","_ref$pointColor","_ref$pointBorderWidth","_ref$activePointBorde","_ref$inactivePointBor","_ref$pointBorderColor","_ref$enableGridX","_ref$enableGridY","_ref$axisTop","axisRight","_ref$axisBottom","_ref$axisLeft","_ref$isInteractive","_ref$defaultActiveSer","_ref$tooltip","_ref$role","_useDimensions","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","_useBump","layerById","grid","axes","lines","Grid","Axes","top","right","bottom","left","Fragment","jsxs","customLayerProps","SvgWrapper","layer","_layerById$layer","Bump","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","useAreaBumpSeries","align","spacing","maxSum","maxValues","slices","Map","has","set","total","values","slice","get","serieId","value","beforeHeight","keys","heightScale","castLinearScale","scaleLinear","sliceHeight","offset","all","previousValues","_i","pos","beforeValue","reduce","t","sliceValue","areaPointPadding","computedSerie","areaPoints","y0","y1","useAreaBump","fillOpacity","activeFillOpacity","inactiveFillOpacity","activeBorderWidth","inactiveBorderWidth","borderOpacity","activeBorderOpacity","inactiveBorderOpacity","_useAreaBumpSeries","areaGenerator","d3Area","useAreaGenerator","getFillOpacity","getActiveFillOpacity","getInactiveFillOpacity","getBorderColor","getBorderOpacity","getActiveBorderOpacity","getInactiveBorderOpacity","serieWithColor","useAreaBumpSerieHandlers","useAreaBumpSeriesLabels","Area","blendMode","mixBlendMode","AreasLabels","areaBumpSvgDefaultProps","defs","InnerAreaBump","_ref$align","_ref$spacing","_ref$blendMode","_ref$fillOpacity","_ref$activeFillOpacit","_ref$inactiveFillOpac","_ref$defs","_ref$fill","_ref$borderWidth","_ref$activeBorderWidt","_ref$inactiveBorderWi","_ref$borderColor","_ref$borderOpacity","_ref$activeBorderOpac","_ref$inactiveBorderOp","_useAreaBump","boundDefs","bindDefs","targetKey","areas","AreaBump","props","ResponsiveWrapper"],"mappings":"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"}