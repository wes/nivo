{"version":3,"file":"nivo-marimekko.cjs.js","sources":["../src/props.ts","../src/types.ts","../src/hooks.ts","../src/Bar.tsx","../src/Bars.tsx","../src/BarTooltip.tsx","../src/Marimekko.tsx","../src/ResponsiveMarimekko.tsx"],"sourcesContent":["import { LayerId, Layout, OffsetId } from './types'\n\nexport const defaultProps = {\n    layout: 'vertical' as Layout,\n    offset: 'none' as OffsetId,\n    outerPadding: 0,\n    innerPadding: 3,\n\n    layers: ['grid', 'axes', 'bars', 'legends'] as LayerId[],\n\n    enableGridX: false,\n    enableGridY: true,\n\n    colors: { scheme: 'nivo' },\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import * as React from 'react'\nimport {\n    stackOffsetDiverging,\n    stackOffsetExpand,\n    stackOffsetNone,\n    stackOffsetSilhouette,\n    stackOffsetWiggle,\n} from 'd3-shape'\nimport { ScaleLinear } from '@nivo/scales'\nimport { Box, Dimensions, Theme, SvgDefsAndFill, MotionProps, ValueFormat } from '@nivo/core'\nimport { AxisProps } from '@nivo/axes'\nimport { OrdinalColorScaleConfig, InheritedColorConfig } from '@nivo/colors'\nimport { LegendProps } from '@nivo/legends'\n\nexport type DatumId = string | number\nexport type DatumValue = number\nexport type DatumFormattedValue = string | number\n\nexport type DatumPropertyAccessor<RawDatum, T> = (datum: RawDatum) => T\n\nexport interface DataProps<RawDatum> {\n    data: RawDatum[]\n    id: string | number | DatumPropertyAccessor<RawDatum, DatumId>\n    value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    dimensions: {\n        id: string\n        value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    }[]\n    valueFormat?: ValueFormat<number>\n}\n\nexport interface NormalizedDatum<RawDatum> {\n    index: number\n    id: DatumId\n    value: DatumValue\n    data: RawDatum\n}\n\nexport interface DimensionDatum<RawDatum> {\n    id: string\n    value: number\n    formattedValue: string | number\n    color: string\n    x: number\n    y: number\n    width: number\n    height: number\n    datum: ComputedDatum<RawDatum>\n}\n\nexport interface ComputedDatum<RawDatum> extends NormalizedDatum<RawDatum> {\n    x: number\n    y: number\n    width: number\n    height: number\n    dimensions: DimensionDatum<RawDatum>[]\n}\n\nexport interface BarDatum<RawDatum> extends DimensionDatum<RawDatum> {\n    key: string\n    fill?: string\n    borderColor: string\n    borderWidth: number\n}\n\nexport type LabelAccessorFunction<RawDatum> = (datum: ComputedDatum<RawDatum>) => string | number\n\nexport type LayerId = 'grid' | 'axes' | 'bars' | 'legends'\n\nexport interface CustomLayerProps<RawDatum> {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number>\n    dimensionsScale: ScaleLinear<number>\n}\n\nexport type CustomLayer<RawDatum> = React.FC<CustomLayerProps<RawDatum>>\n\nexport type Layer<RawDatum> = LayerId | CustomLayer<RawDatum>\n\nexport interface TooltipProps<RawDatum> {\n    bar: BarDatum<RawDatum>\n}\n\nexport type BarTooltipType<RawDatum> = (props: TooltipProps<RawDatum>) => JSX.Element\n\nexport type Layout = 'horizontal' | 'vertical'\n\nexport const offsetById = {\n    // Applies a zero baseline and normalizes the values\n    // for each point such that the topline is always one.\n    expand: stackOffsetExpand,\n    // Positive values are stacked above zero, negative values\n    // are stacked below zero, and zero values are stacked at zero.\n    diverging: stackOffsetDiverging,\n    // Applies a zero baseline.\n    none: stackOffsetNone,\n    // Shifts the baseline down such that the center of the streamgraph\n    // is always at zero.\n    silouhette: stackOffsetSilhouette,\n    // Shifts the baseline so as to minimize the weighted wiggle of layers.\n    // This offset is recommended for streamgraphs in conjunction with the inside-out order.\n    // See Stacked Graphsâ€”Geometry & Aesthetics by Bryon & Wattenberg for more information.\n    wiggle: stackOffsetWiggle,\n}\n\nexport type OffsetId = keyof typeof offsetById\n\nexport type CommonProps<RawDatum> = {\n    margin: Box\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n\n    // axes and grid\n    axisTop?: AxisProps | null\n    axisRight?: AxisProps | null\n    axisBottom?: AxisProps | null\n    axisLeft?: AxisProps | null\n    enableGridX: boolean\n    gridXValues?: number[]\n    enableGridY: boolean\n    gridYValues?: number[]\n\n    // colors, theme and border\n    colors: OrdinalColorScaleConfig<Omit<DimensionDatum<RawDatum>, 'color' | 'fill'>>\n    theme: Theme\n    borderWidth: number\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // labels\n    enableLabels: boolean\n    label: string | LabelAccessorFunction<RawDatum>\n    labelSkipWidth: number\n    labelSkipHeight: number\n    labelTextColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // interactivity\n    isInteractive: boolean\n    tooltip: BarTooltipType<RawDatum>\n\n    legends: LegendProps[]\n\n    role: string\n}\n\nexport type MouseEventHandler<RawDatum, ElementType> = (\n    datum: BarDatum<RawDatum>,\n    event: React.MouseEvent<ElementType>\n) => void\n\nexport type MouseEventHandlers<RawDatum, ElementType> = Partial<{\n    onClick: MouseEventHandler<RawDatum, ElementType>\n    onMouseEnter: MouseEventHandler<RawDatum, ElementType>\n    onMouseMove: MouseEventHandler<RawDatum, ElementType>\n    onMouseLeave: MouseEventHandler<RawDatum, ElementType>\n}>\n\nexport type SvgProps<RawDatum> = DataProps<RawDatum> &\n    Dimensions &\n    Partial<CommonProps<RawDatum>> &\n    MotionProps &\n    SvgDefsAndFill<BarDatum<RawDatum>> &\n    MouseEventHandlers<RawDatum, SVGRectElement> & {\n        layers?: Layer<RawDatum>[]\n    }\n","import { useMemo } from 'react'\nimport get from 'lodash/get'\nimport { stack as d3Stack, Stack, Series } from 'd3-shape'\nimport { useValueFormatter, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { createLinearScale, ScaleLinear } from '@nivo/scales'\nimport {\n    NormalizedDatum,\n    ComputedDatum,\n    DataProps,\n    DatumPropertyAccessor,\n    Layout,\n    DimensionDatum,\n    CommonProps,\n    CustomLayerProps,\n    BarDatum,\n    OffsetId,\n    offsetById,\n} from './types'\n\n// d3 stack does not support defining `.keys()` using\n// a mix of keys and custom value accessors, so we're\n// building a map of accessors in any case, we're gonna\n// use it later for `stack.value()`.\nexport const useDataDimensions = <RawDatum>(rawDimensions: DataProps<RawDatum>['dimensions']) =>\n    useMemo(() => {\n        const dimensions: Record<string, (datum: RawDatum) => number> = {}\n        const dimensionIds: string[] = []\n        rawDimensions.forEach(dimension => {\n            dimensionIds.push(dimension.id)\n            dimensions[dimension.id] =\n                typeof dimension.value === 'function'\n                    ? dimension.value\n                    : (datum: RawDatum) => get(datum, dimension.value as string, 0)\n        })\n\n        return { dimensionIds, dimensions }\n    }, [rawDimensions])\n\nexport const useStack = <RawDatum>(\n    dimensionIds: string[],\n    dimensions: Record<string, (datum: RawDatum) => number>,\n    offset: OffsetId\n) =>\n    useMemo(() => {\n        const offsetFunction = offsetById[offset]\n\n        return d3Stack<RawDatum>()\n            .keys(dimensionIds)\n            .value((datum, key) => dimensions[key](datum))\n            .offset(offsetFunction)\n    }, [dimensionIds, dimensions, offset])\n\nexport const useStackedData = <RawDatum>(\n    stack: Stack<any, RawDatum, string>,\n    data: DataProps<RawDatum>['data']\n) =>\n    useMemo(() => {\n        const stacked = stack(data)\n\n        const allValues: number[] = []\n        stacked.forEach(dimension => {\n            dimension.forEach(datum => {\n                allValues.push(datum[0])\n                allValues.push(datum[1])\n            })\n        })\n\n        const min = Math.min(...allValues)\n        const max = Math.max(...allValues)\n\n        return {\n            stacked,\n            min,\n            max,\n        }\n    }, [stack, data])\n\nexport const useDimensionsScale = (\n    min: number,\n    max: number,\n    width: number,\n    height: number,\n    layout: Layout\n) =>\n    useMemo(() => {\n        const scaleData = { all: [min, max], min, max }\n        const size = layout === 'vertical' ? height : width\n        const axis = layout === 'vertical' ? 'y' : 'x'\n        // here 'axis' determines whether the domain should be reversed or not\n        return createLinearScale({ type: 'linear', min, max }, scaleData, size, axis)\n    }, [min, max, width, height, layout])\n\nexport const useNormalizedData = <RawDatum>(\n    data: DataProps<RawDatum>['data'],\n    id: DataProps<RawDatum>['id'],\n    value: DataProps<RawDatum>['value']\n) => {\n    const getId: DatumPropertyAccessor<RawDatum, string | number> =\n        typeof id === 'function' ? id : (datum: RawDatum) => get(datum, id)\n    const getValue: DatumPropertyAccessor<RawDatum, number> =\n        typeof value === 'function' ? value : (datum: RawDatum) => get(datum, value, 0)\n\n    return useMemo(() => {\n        const normalized: NormalizedDatum<RawDatum>[] = []\n        data.forEach((datum, index) => {\n            const datumId = getId(datum)\n            const datumValue = getValue(datum)\n\n            normalized.push({\n                index,\n                id: datumId,\n                value: datumValue,\n                data: datum,\n            })\n        })\n\n        return normalized\n    }, [data, getId, getValue])\n}\n\nexport const useThicknessScale = <RawDatum>({\n    data,\n    width,\n    height,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    width: number\n    height: number\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) =>\n    useMemo(() => {\n        const totalValue = data.reduce((acc, datum) => acc + datum.value, 0)\n        const scaleData = { all: [0, totalValue], min: 0, max: totalValue }\n        const totalPadding = 2 * outerPadding + (data.length - 1) * innerPadding\n        const size = layout === 'vertical' ? width - totalPadding : height - totalPadding\n        // here 'axis' means that the scale will be going forward, i.e. not reversed\n        return createLinearScale({ type: 'linear' }, scaleData, size, 'x')\n    }, [data, width, height, layout])\n\nexport const useComputedData = <RawDatum>({\n    data,\n    stacked,\n    dimensionIds,\n    valueFormat,\n    thicknessScale,\n    dimensionsScale,\n    colors,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    stacked: Series<RawDatum, string>[]\n    dimensionIds: string[]\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    thicknessScale: ScaleLinear<number>\n    dimensionsScale: ScaleLinear<number>\n    colors: CommonProps<RawDatum>['colors']\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) => {\n    const getColor = useOrdinalColorScale<Omit<DimensionDatum<RawDatum>, 'color'>>(colors, 'id')\n\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    return useMemo(() => {\n        const computedData: ComputedDatum<RawDatum>[] = []\n\n        let position = outerPadding\n\n        data.forEach(datum => {\n            const thickness = thicknessScale(datum.value)\n\n            const computedDatum: ComputedDatum<RawDatum> = {\n                ...datum,\n                x: layout === 'vertical' ? position : 0,\n                y: layout === 'vertical' ? 0 : position,\n                width: layout === 'vertical' ? thickness : 0,\n                height: layout === 'vertical' ? 0 : thickness,\n                dimensions: [],\n            }\n\n            const allPositions: number[] = []\n            let totalSize = 0\n\n            position += thickness + innerPadding\n\n            dimensionIds.forEach(dimensionId => {\n                const dimension = stacked.find(stack => stack.key === dimensionId)\n                if (dimension) {\n                    const dimensionPoint = dimension[datum.index]\n                    const dimensionDatum: DimensionDatum<RawDatum> = {\n                        id: dimensionId,\n                        datum: computedDatum,\n                        value: dimensionPoint[1] - dimensionPoint[0],\n                        formattedValue: formatValue(dimensionPoint[1] - dimensionPoint[0]),\n                        color: 'rgba(0, 0, 0, 0)',\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    }\n\n                    const position0 = dimensionsScale(dimensionPoint[0])\n                    const position1 = dimensionsScale(dimensionPoint[1])\n\n                    if (layout === 'vertical') {\n                        dimensionDatum.x = computedDatum.x\n                        dimensionDatum.y = Math.min(position0, position1)\n                        dimensionDatum.width = computedDatum.width\n                        dimensionDatum.height = Math.max(position0, position1) - dimensionDatum.y\n\n                        allPositions.push(dimensionDatum.y)\n                        totalSize += dimensionDatum.height\n                    } else {\n                        dimensionDatum.x = Math.min(position0, position1)\n                        dimensionDatum.y = computedDatum.y\n                        dimensionDatum.width = Math.max(position0, position1) - dimensionDatum.x\n                        dimensionDatum.height = computedDatum.height\n\n                        allPositions.push(dimensionDatum.x)\n                        totalSize += dimensionDatum.width\n                    }\n\n                    dimensionDatum.color = getColor(dimensionDatum)\n\n                    computedDatum.dimensions.push(dimensionDatum)\n                }\n\n                if (layout === 'vertical') {\n                    computedDatum.y = Math.min(...allPositions)\n                    computedDatum.height = totalSize\n                } else {\n                    computedDatum.x = Math.min(...allPositions)\n                    computedDatum.width = totalSize\n                }\n            })\n\n            computedData.push(computedDatum)\n        })\n\n        return computedData\n    }, [\n        data,\n        stacked,\n        dimensionIds,\n        thicknessScale,\n        dimensionsScale,\n        layout,\n        outerPadding,\n        innerPadding,\n        getColor,\n        formatValue,\n    ])\n}\n\nexport const useBars = <RawDatum>(\n    data: ComputedDatum<RawDatum>[],\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>,\n    borderWidth: number\n) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<DimensionDatum<RawDatum>>(borderColor, theme)\n\n    return useMemo(() => {\n        const all: BarDatum<RawDatum>[] = []\n        data.forEach(datum => {\n            datum.dimensions.forEach(dimension => {\n                all.push({\n                    key: `${datum.id}-${dimension.id}`,\n                    ...dimension,\n                    borderColor: getBorderColor(dimension),\n                    borderWidth,\n                })\n            })\n        })\n\n        return all\n    }, [data, borderWidth, getBorderColor])\n}\n\nexport const useMarimekko = <RawDatum>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions: rawDimensions,\n    layout,\n    offset,\n    outerPadding,\n    innerPadding,\n    colors,\n    borderColor,\n    borderWidth,\n    width,\n    height,\n}: {\n    data: DataProps<RawDatum>['data']\n    id: DataProps<RawDatum>['id']\n    value: DataProps<RawDatum>['value']\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    dimensions: DataProps<RawDatum>['dimensions']\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n    colors: CommonProps<RawDatum>['colors']\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n    borderWidth: number\n    width: number\n    height: number\n}) => {\n    const { dimensionIds, dimensions } = useDataDimensions<RawDatum>(rawDimensions)\n    const stack = useStack<RawDatum>(dimensionIds, dimensions, offset)\n    const { stacked, min, max } = useStackedData<RawDatum>(stack, data)\n    const normalizedData = useNormalizedData<RawDatum>(data, id, value)\n    const thicknessScale = useThicknessScale({\n        data: normalizedData,\n        width,\n        height,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const dimensionsScale = useDimensionsScale(min, max, width, height, layout)\n    const computedData = useComputedData<RawDatum>({\n        data: normalizedData,\n        stacked,\n        dimensionIds,\n        valueFormat,\n        thicknessScale,\n        dimensionsScale,\n        colors,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const bars = useBars<RawDatum>(computedData, borderColor, borderWidth)\n\n    return {\n        computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n        dimensionIds,\n    }\n}\n\nexport const useLayerContext = <RawDatum>({\n    data,\n    bars,\n    thicknessScale,\n    dimensionsScale,\n}: {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number>\n    dimensionsScale: ScaleLinear<number>\n}): CustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            data,\n            bars,\n            thicknessScale,\n            dimensionsScale,\n        }),\n        [data, bars, thicknessScale, dimensionsScale]\n    )\n\nexport const useLegendData = <RawDatum>(dimensionIds: string[], bars: BarDatum<RawDatum>[]) => {\n    const legendData: {\n        id: string\n        label: string\n        color: string\n        fill?: string\n    }[] = []\n\n    dimensionIds.forEach(dimensionId => {\n        const bar = bars.find(bar => bar.id === dimensionId)\n        if (bar) {\n            legendData.push({\n                id: dimensionId,\n                label: dimensionId,\n                color: bar.color,\n                fill: bar.fill,\n            })\n        }\n    })\n\n    return legendData\n}\n","import { createElement, useCallback, MouseEvent } from 'react'\nimport { animated, SpringValues, to } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\n\ninterface BarProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    bar: BarDatum<RawDatum>\n    animatedProps: SpringValues<{\n        x: number\n        y: number\n        width: number\n        height: number\n        opacity: number\n        color: string\n        borderColor: string\n    }>\n    isInteractive: boolean\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bar = <RawDatum,>({\n    bar,\n    animatedProps,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) =>\n            showTooltipFromEvent(createElement(tooltip, { bar }), event),\n        [showTooltipFromEvent, tooltip, bar]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.(bar, event)\n        },\n        [onClick, bar]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseMove?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(bar, event)\n            hideTooltip()\n        },\n        [onMouseLeave, bar, hideTooltip]\n    )\n\n    return (\n        <animated.rect\n            x={animatedProps.x}\n            y={animatedProps.y}\n            width={to(animatedProps.width, value => Math.max(value, 0))}\n            height={to(animatedProps.height, value => Math.max(value, 0))}\n            fill={bar.fill ?? animatedProps.color}\n            stroke={animatedProps.borderColor}\n            strokeWidth={bar.borderWidth}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\nimport { Bar } from './Bar'\n\ninterface BarsProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    isInteractive: boolean\n    bars: BarDatum<RawDatum>[]\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bars = <RawDatum,>({\n    bars,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarsProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<\n        BarDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            width: number\n            height: number\n            color: string\n            opacity: number\n            borderColor: string\n        }\n    >(bars, {\n        keys: bar => bar.key,\n        initial: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        from: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 0,\n            borderColor: bar.borderColor,\n        }),\n        enter: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        update: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        leave: bar => ({\n            opacity: 0,\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, bar) => (\n                <Bar<RawDatum>\n                    key={bar.key}\n                    bar={bar}\n                    animatedProps={style}\n                    isInteractive={isInteractive}\n                    tooltip={tooltip}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                />\n            ))}\n        </>\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { BarDatum } from './types'\n\nexport const BarTooltip = <RawDatum,>({ bar }: { bar: BarDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={`${bar.datum.id} - ${bar.id}`}\n        value={bar.formattedValue}\n        enableChip={true}\n        color={bar.color}\n    />\n)\n","import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    Container,\n    SvgWrapper,\n    useDimensions,\n} from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { SvgProps, LayerId, DimensionDatum } from './types'\nimport { defaultProps } from './props'\nimport { useMarimekko, useLayerContext, useLegendData } from './hooks'\nimport { Bars } from './Bars'\nimport { BarTooltip } from './BarTooltip'\n\nconst InnerMarimekko = <RawDatum,>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions,\n    width,\n    height,\n    margin: partialMargin,\n    layout = defaultProps.layout,\n    offset = defaultProps.offset,\n    outerPadding = defaultProps.outerPadding,\n    innerPadding = defaultProps.innerPadding,\n    layers = defaultProps.layers,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n    enableGridX = defaultProps.enableGridX,\n    gridXValues,\n    enableGridY = defaultProps.enableGridY,\n    gridYValues,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<DimensionDatum<RawDatum>, 'color'>\n    >,\n    defs = [],\n    fill = [],\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<DimensionDatum<RawDatum>>,\n    isInteractive = defaultProps.isInteractive,\n    tooltip = BarTooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    legends = [],\n    role,\n}: SvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { computedData, bars, thicknessScale, dimensionsScale, dimensionIds } =\n        useMarimekko<RawDatum>({\n            data,\n            id,\n            value,\n            dimensions,\n            valueFormat,\n            layout,\n            offset,\n            outerPadding,\n            innerPadding,\n            colors,\n            borderColor,\n            borderWidth,\n            width: innerWidth,\n            height: innerHeight,\n        })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        bars: null,\n        legends: null,\n    }\n\n    const boundDefs = bindDefs(defs, bars, fill)\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Bars<RawDatum>\n                key=\"bars\"\n                bars={bars}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n            />\n        )\n    }\n\n    const xScale = layout === 'vertical' ? thicknessScale : dimensionsScale\n    const yScale = layout === 'vertical' ? dimensionsScale : thicknessScale\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                xScale={enableGridX ? xScale : undefined}\n                yScale={enableGridY ? yScale : undefined}\n                width={innerWidth}\n                height={innerHeight}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    const legendData = useLegendData<RawDatum>(dimensionIds, bars)\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <g key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </g>\n        )\n    }\n\n    const layerContext = useLayerContext<RawDatum>({\n        data: computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as LayerId] !== undefined) {\n                    return layerById[layer as LayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Marimekko = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    ...otherProps\n}: SvgProps<RawDatum>) => (\n    <Container\n        theme={otherProps.theme}\n        isInteractive={isInteractive}\n        animate={animate}\n        motionConfig={motionConfig}\n    >\n        <InnerMarimekko<RawDatum>\n            isInteractive={isInteractive}\n            animate={animate}\n            motionConfig={motionConfig}\n            {...otherProps}\n        />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Marimekko } from './Marimekko'\nimport { SvgProps } from './types'\n\nexport const ResponsiveMarimekko = <RawDatum,>(\n    props: Omit<SvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Marimekko<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["defaultProps","layout","offset","outerPadding","innerPadding","layers","enableGridX","enableGridY","colors","scheme","borderWidth","borderColor","from","modifiers","isInteractive","animate","motionConfig","offsetById","expand","stackOffsetExpand","diverging","stackOffsetDiverging","none","stackOffsetNone","silouhette","stackOffsetSilhouette","wiggle","stackOffsetWiggle","useComputedData","_ref2","data","stacked","dimensionIds","valueFormat","thicknessScale","dimensionsScale","getColor","useOrdinalColorScale","formatValue","useValueFormatter","useMemo","computedData","position","forEach","datum","thickness","value","computedDatum","_extends","x","y","width","height","dimensions","allPositions","totalSize","dimensionId","dimension","find","stack","key","dimensionPoint","index","dimensionDatum","id","formattedValue","color","position0","position1","Math","min","max","push","apply","useBars","theme","useTheme","getBorderColor","useInheritedColor","all","useMarimekko","_ref3","rawDimensions","_useDataDimensions","get","useDataDimensions","offsetFunction","d3Stack","keys","useStack","_useStackedData","allValues","useStackedData","normalizedData","getId","getValue","normalized","datumId","datumValue","useNormalizedData","_ref","totalValue","reduce","acc","scaleData","totalPadding","length","size","createLinearScale","type","useThicknessScale","axis","useDimensionsScale","bars","Bar","_bar$fill","bar","animatedProps","tooltip","onClick","onMouseEnter","onMouseMove","onMouseLeave","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","showTooltip","useCallback","event","createElement","handleClick","handleMouseEnter","handleMouseMove","handleMouseLeave","_jsx","jsx","animated","rect","to","fill","stroke","strokeWidth","undefined","Bars","_useMotionConfig","useMotionConfig","springConfig","config","transition","useTransition","initial","opacity","enter","update","leave","immediate","_Fragment","children","style","BarTooltip","BasicTooltip","enableChip","InnerMarimekko","partialMargin","margin","_ref$layout","_ref$offset","_ref$outerPadding","_ref$innerPadding","_ref$layers","axisTop","axisRight","axisBottom","axisLeft","_ref$enableGridX","gridXValues","_ref$enableGridY","gridYValues","_ref$colors","_ref$defs","defs","_ref$fill","_ref$borderWidth","_ref$borderColor","_ref$isInteractive","_ref$tooltip","_ref$legends","legends","role","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","_useMarimekko","layerById","grid","axes","boundDefs","bindDefs","includes","xScale","yScale","Grid","xValues","yValues","Axes","top","right","bottom","left","legendData","label","useLegendData","map","legend","i","BoxLegendSvg","containerWidth","containerHeight","layerContext","_ref4","useLayerContext","SvgWrapper","layer","Fragment","Marimekko","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","props","ResponsiveWrapper"],"mappings":"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"}