{"version":3,"file":"nivo-marimekko.es.js","sources":["../src/props.ts","../src/types.ts","../src/hooks.ts","../src/Bar.tsx","../src/Bars.tsx","../src/BarTooltip.tsx","../src/Marimekko.tsx","../src/ResponsiveMarimekko.tsx"],"sourcesContent":["import { LayerId, Layout, OffsetId } from './types'\n\nexport const defaultProps = {\n    layout: 'vertical' as Layout,\n    offset: 'none' as OffsetId,\n    outerPadding: 0,\n    innerPadding: 3,\n\n    layers: ['grid', 'axes', 'bars', 'legends'] as LayerId[],\n\n    enableGridX: false,\n    enableGridY: true,\n\n    colors: { scheme: 'nivo' },\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 1]],\n    },\n\n    isInteractive: true,\n\n    animate: true,\n    motionConfig: 'gentle',\n}\n","import * as React from 'react'\nimport {\n    stackOffsetDiverging,\n    stackOffsetExpand,\n    stackOffsetNone,\n    stackOffsetSilhouette,\n    stackOffsetWiggle,\n} from 'd3-shape'\nimport { ScaleLinear } from '@nivo/scales'\nimport { Box, Dimensions, Theme, SvgDefsAndFill, MotionProps, ValueFormat } from '@nivo/core'\nimport { AxisProps } from '@nivo/axes'\nimport { OrdinalColorScaleConfig, InheritedColorConfig } from '@nivo/colors'\nimport { LegendProps } from '@nivo/legends'\n\nexport type DatumId = string | number\nexport type DatumValue = number\nexport type DatumFormattedValue = string | number\n\nexport type DatumPropertyAccessor<RawDatum, T> = (datum: RawDatum) => T\n\nexport interface DataProps<RawDatum> {\n    data: RawDatum[]\n    id: string | number | DatumPropertyAccessor<RawDatum, DatumId>\n    value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    dimensions: {\n        id: string\n        value: string | number | DatumPropertyAccessor<RawDatum, DatumValue>\n    }[]\n    valueFormat?: ValueFormat<number>\n}\n\nexport interface NormalizedDatum<RawDatum> {\n    index: number\n    id: DatumId\n    value: DatumValue\n    data: RawDatum\n}\n\nexport interface DimensionDatum<RawDatum> {\n    id: string\n    value: number\n    formattedValue: string | number\n    color: string\n    x: number\n    y: number\n    width: number\n    height: number\n    datum: ComputedDatum<RawDatum>\n}\n\nexport interface ComputedDatum<RawDatum> extends NormalizedDatum<RawDatum> {\n    x: number\n    y: number\n    width: number\n    height: number\n    dimensions: DimensionDatum<RawDatum>[]\n}\n\nexport interface BarDatum<RawDatum> extends DimensionDatum<RawDatum> {\n    key: string\n    fill?: string\n    borderColor: string\n    borderWidth: number\n}\n\nexport type LabelAccessorFunction<RawDatum> = (datum: ComputedDatum<RawDatum>) => string | number\n\nexport type LayerId = 'grid' | 'axes' | 'bars' | 'legends'\n\nexport interface CustomLayerProps<RawDatum> {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number>\n    dimensionsScale: ScaleLinear<number>\n}\n\nexport type CustomLayer<RawDatum> = React.FC<CustomLayerProps<RawDatum>>\n\nexport type Layer<RawDatum> = LayerId | CustomLayer<RawDatum>\n\nexport interface TooltipProps<RawDatum> {\n    bar: BarDatum<RawDatum>\n}\n\nexport type BarTooltipType<RawDatum> = (props: TooltipProps<RawDatum>) => JSX.Element\n\nexport type Layout = 'horizontal' | 'vertical'\n\nexport const offsetById = {\n    // Applies a zero baseline and normalizes the values\n    // for each point such that the topline is always one.\n    expand: stackOffsetExpand,\n    // Positive values are stacked above zero, negative values\n    // are stacked below zero, and zero values are stacked at zero.\n    diverging: stackOffsetDiverging,\n    // Applies a zero baseline.\n    none: stackOffsetNone,\n    // Shifts the baseline down such that the center of the streamgraph\n    // is always at zero.\n    silouhette: stackOffsetSilhouette,\n    // Shifts the baseline so as to minimize the weighted wiggle of layers.\n    // This offset is recommended for streamgraphs in conjunction with the inside-out order.\n    // See Stacked Graphsâ€”Geometry & Aesthetics by Bryon & Wattenberg for more information.\n    wiggle: stackOffsetWiggle,\n}\n\nexport type OffsetId = keyof typeof offsetById\n\nexport type CommonProps<RawDatum> = {\n    margin: Box\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n\n    // axes and grid\n    axisTop?: AxisProps | null\n    axisRight?: AxisProps | null\n    axisBottom?: AxisProps | null\n    axisLeft?: AxisProps | null\n    enableGridX: boolean\n    gridXValues?: number[]\n    enableGridY: boolean\n    gridYValues?: number[]\n\n    // colors, theme and border\n    colors: OrdinalColorScaleConfig<Omit<DimensionDatum<RawDatum>, 'color' | 'fill'>>\n    theme: Theme\n    borderWidth: number\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // labels\n    enableLabels: boolean\n    label: string | LabelAccessorFunction<RawDatum>\n    labelSkipWidth: number\n    labelSkipHeight: number\n    labelTextColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n\n    // interactivity\n    isInteractive: boolean\n    tooltip: BarTooltipType<RawDatum>\n\n    legends: LegendProps[]\n\n    role: string\n}\n\nexport type MouseEventHandler<RawDatum, ElementType> = (\n    datum: BarDatum<RawDatum>,\n    event: React.MouseEvent<ElementType>\n) => void\n\nexport type MouseEventHandlers<RawDatum, ElementType> = Partial<{\n    onClick: MouseEventHandler<RawDatum, ElementType>\n    onMouseEnter: MouseEventHandler<RawDatum, ElementType>\n    onMouseMove: MouseEventHandler<RawDatum, ElementType>\n    onMouseLeave: MouseEventHandler<RawDatum, ElementType>\n}>\n\nexport type SvgProps<RawDatum> = DataProps<RawDatum> &\n    Dimensions &\n    Partial<CommonProps<RawDatum>> &\n    MotionProps &\n    SvgDefsAndFill<BarDatum<RawDatum>> &\n    MouseEventHandlers<RawDatum, SVGRectElement> & {\n        layers?: Layer<RawDatum>[]\n    }\n","import { useMemo } from 'react'\nimport get from 'lodash/get'\nimport { stack as d3Stack, Stack, Series } from 'd3-shape'\nimport { useValueFormatter, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport { createLinearScale, ScaleLinear } from '@nivo/scales'\nimport {\n    NormalizedDatum,\n    ComputedDatum,\n    DataProps,\n    DatumPropertyAccessor,\n    Layout,\n    DimensionDatum,\n    CommonProps,\n    CustomLayerProps,\n    BarDatum,\n    OffsetId,\n    offsetById,\n} from './types'\n\n// d3 stack does not support defining `.keys()` using\n// a mix of keys and custom value accessors, so we're\n// building a map of accessors in any case, we're gonna\n// use it later for `stack.value()`.\nexport const useDataDimensions = <RawDatum>(rawDimensions: DataProps<RawDatum>['dimensions']) =>\n    useMemo(() => {\n        const dimensions: Record<string, (datum: RawDatum) => number> = {}\n        const dimensionIds: string[] = []\n        rawDimensions.forEach(dimension => {\n            dimensionIds.push(dimension.id)\n            dimensions[dimension.id] =\n                typeof dimension.value === 'function'\n                    ? dimension.value\n                    : (datum: RawDatum) => get(datum, dimension.value as string, 0)\n        })\n\n        return { dimensionIds, dimensions }\n    }, [rawDimensions])\n\nexport const useStack = <RawDatum>(\n    dimensionIds: string[],\n    dimensions: Record<string, (datum: RawDatum) => number>,\n    offset: OffsetId\n) =>\n    useMemo(() => {\n        const offsetFunction = offsetById[offset]\n\n        return d3Stack<RawDatum>()\n            .keys(dimensionIds)\n            .value((datum, key) => dimensions[key](datum))\n            .offset(offsetFunction)\n    }, [dimensionIds, dimensions, offset])\n\nexport const useStackedData = <RawDatum>(\n    stack: Stack<any, RawDatum, string>,\n    data: DataProps<RawDatum>['data']\n) =>\n    useMemo(() => {\n        const stacked = stack(data)\n\n        const allValues: number[] = []\n        stacked.forEach(dimension => {\n            dimension.forEach(datum => {\n                allValues.push(datum[0])\n                allValues.push(datum[1])\n            })\n        })\n\n        const min = Math.min(...allValues)\n        const max = Math.max(...allValues)\n\n        return {\n            stacked,\n            min,\n            max,\n        }\n    }, [stack, data])\n\nexport const useDimensionsScale = (\n    min: number,\n    max: number,\n    width: number,\n    height: number,\n    layout: Layout\n) =>\n    useMemo(() => {\n        const scaleData = { all: [min, max], min, max }\n        const size = layout === 'vertical' ? height : width\n        const axis = layout === 'vertical' ? 'y' : 'x'\n        // here 'axis' determines whether the domain should be reversed or not\n        return createLinearScale({ type: 'linear', min, max }, scaleData, size, axis)\n    }, [min, max, width, height, layout])\n\nexport const useNormalizedData = <RawDatum>(\n    data: DataProps<RawDatum>['data'],\n    id: DataProps<RawDatum>['id'],\n    value: DataProps<RawDatum>['value']\n) => {\n    const getId: DatumPropertyAccessor<RawDatum, string | number> =\n        typeof id === 'function' ? id : (datum: RawDatum) => get(datum, id)\n    const getValue: DatumPropertyAccessor<RawDatum, number> =\n        typeof value === 'function' ? value : (datum: RawDatum) => get(datum, value, 0)\n\n    return useMemo(() => {\n        const normalized: NormalizedDatum<RawDatum>[] = []\n        data.forEach((datum, index) => {\n            const datumId = getId(datum)\n            const datumValue = getValue(datum)\n\n            normalized.push({\n                index,\n                id: datumId,\n                value: datumValue,\n                data: datum,\n            })\n        })\n\n        return normalized\n    }, [data, getId, getValue])\n}\n\nexport const useThicknessScale = <RawDatum>({\n    data,\n    width,\n    height,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    width: number\n    height: number\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) =>\n    useMemo(() => {\n        const totalValue = data.reduce((acc, datum) => acc + datum.value, 0)\n        const scaleData = { all: [0, totalValue], min: 0, max: totalValue }\n        const totalPadding = 2 * outerPadding + (data.length - 1) * innerPadding\n        const size = layout === 'vertical' ? width - totalPadding : height - totalPadding\n        // here 'axis' means that the scale will be going forward, i.e. not reversed\n        return createLinearScale({ type: 'linear' }, scaleData, size, 'x')\n    }, [data, width, height, layout])\n\nexport const useComputedData = <RawDatum>({\n    data,\n    stacked,\n    dimensionIds,\n    valueFormat,\n    thicknessScale,\n    dimensionsScale,\n    colors,\n    layout,\n    outerPadding,\n    innerPadding,\n}: {\n    data: NormalizedDatum<RawDatum>[]\n    stacked: Series<RawDatum, string>[]\n    dimensionIds: string[]\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    thicknessScale: ScaleLinear<number>\n    dimensionsScale: ScaleLinear<number>\n    colors: CommonProps<RawDatum>['colors']\n    layout: Layout\n    outerPadding: number\n    innerPadding: number\n}) => {\n    const getColor = useOrdinalColorScale<Omit<DimensionDatum<RawDatum>, 'color'>>(colors, 'id')\n\n    const formatValue = useValueFormatter<number>(valueFormat)\n\n    return useMemo(() => {\n        const computedData: ComputedDatum<RawDatum>[] = []\n\n        let position = outerPadding\n\n        data.forEach(datum => {\n            const thickness = thicknessScale(datum.value)\n\n            const computedDatum: ComputedDatum<RawDatum> = {\n                ...datum,\n                x: layout === 'vertical' ? position : 0,\n                y: layout === 'vertical' ? 0 : position,\n                width: layout === 'vertical' ? thickness : 0,\n                height: layout === 'vertical' ? 0 : thickness,\n                dimensions: [],\n            }\n\n            const allPositions: number[] = []\n            let totalSize = 0\n\n            position += thickness + innerPadding\n\n            dimensionIds.forEach(dimensionId => {\n                const dimension = stacked.find(stack => stack.key === dimensionId)\n                if (dimension) {\n                    const dimensionPoint = dimension[datum.index]\n                    const dimensionDatum: DimensionDatum<RawDatum> = {\n                        id: dimensionId,\n                        datum: computedDatum,\n                        value: dimensionPoint[1] - dimensionPoint[0],\n                        formattedValue: formatValue(dimensionPoint[1] - dimensionPoint[0]),\n                        color: 'rgba(0, 0, 0, 0)',\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    }\n\n                    const position0 = dimensionsScale(dimensionPoint[0])\n                    const position1 = dimensionsScale(dimensionPoint[1])\n\n                    if (layout === 'vertical') {\n                        dimensionDatum.x = computedDatum.x\n                        dimensionDatum.y = Math.min(position0, position1)\n                        dimensionDatum.width = computedDatum.width\n                        dimensionDatum.height = Math.max(position0, position1) - dimensionDatum.y\n\n                        allPositions.push(dimensionDatum.y)\n                        totalSize += dimensionDatum.height\n                    } else {\n                        dimensionDatum.x = Math.min(position0, position1)\n                        dimensionDatum.y = computedDatum.y\n                        dimensionDatum.width = Math.max(position0, position1) - dimensionDatum.x\n                        dimensionDatum.height = computedDatum.height\n\n                        allPositions.push(dimensionDatum.x)\n                        totalSize += dimensionDatum.width\n                    }\n\n                    dimensionDatum.color = getColor(dimensionDatum)\n\n                    computedDatum.dimensions.push(dimensionDatum)\n                }\n\n                if (layout === 'vertical') {\n                    computedDatum.y = Math.min(...allPositions)\n                    computedDatum.height = totalSize\n                } else {\n                    computedDatum.x = Math.min(...allPositions)\n                    computedDatum.width = totalSize\n                }\n            })\n\n            computedData.push(computedDatum)\n        })\n\n        return computedData\n    }, [\n        data,\n        stacked,\n        dimensionIds,\n        thicknessScale,\n        dimensionsScale,\n        layout,\n        outerPadding,\n        innerPadding,\n        getColor,\n        formatValue,\n    ])\n}\n\nexport const useBars = <RawDatum>(\n    data: ComputedDatum<RawDatum>[],\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>,\n    borderWidth: number\n) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<DimensionDatum<RawDatum>>(borderColor, theme)\n\n    return useMemo(() => {\n        const all: BarDatum<RawDatum>[] = []\n        data.forEach(datum => {\n            datum.dimensions.forEach(dimension => {\n                all.push({\n                    key: `${datum.id}-${dimension.id}`,\n                    ...dimension,\n                    borderColor: getBorderColor(dimension),\n                    borderWidth,\n                })\n            })\n        })\n\n        return all\n    }, [data, borderWidth, getBorderColor])\n}\n\nexport const useMarimekko = <RawDatum>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions: rawDimensions,\n    layout,\n    offset,\n    outerPadding,\n    innerPadding,\n    colors,\n    borderColor,\n    borderWidth,\n    width,\n    height,\n}: {\n    data: DataProps<RawDatum>['data']\n    id: DataProps<RawDatum>['id']\n    value: DataProps<RawDatum>['value']\n    valueFormat: DataProps<RawDatum>['valueFormat']\n    dimensions: DataProps<RawDatum>['dimensions']\n    layout: Layout\n    offset: OffsetId\n    outerPadding: number\n    innerPadding: number\n    colors: CommonProps<RawDatum>['colors']\n    borderColor: InheritedColorConfig<DimensionDatum<RawDatum>>\n    borderWidth: number\n    width: number\n    height: number\n}) => {\n    const { dimensionIds, dimensions } = useDataDimensions<RawDatum>(rawDimensions)\n    const stack = useStack<RawDatum>(dimensionIds, dimensions, offset)\n    const { stacked, min, max } = useStackedData<RawDatum>(stack, data)\n    const normalizedData = useNormalizedData<RawDatum>(data, id, value)\n    const thicknessScale = useThicknessScale({\n        data: normalizedData,\n        width,\n        height,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const dimensionsScale = useDimensionsScale(min, max, width, height, layout)\n    const computedData = useComputedData<RawDatum>({\n        data: normalizedData,\n        stacked,\n        dimensionIds,\n        valueFormat,\n        thicknessScale,\n        dimensionsScale,\n        colors,\n        layout,\n        outerPadding,\n        innerPadding,\n    })\n    const bars = useBars<RawDatum>(computedData, borderColor, borderWidth)\n\n    return {\n        computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n        dimensionIds,\n    }\n}\n\nexport const useLayerContext = <RawDatum>({\n    data,\n    bars,\n    thicknessScale,\n    dimensionsScale,\n}: {\n    data: ComputedDatum<RawDatum>[]\n    bars: BarDatum<RawDatum>[]\n    thicknessScale: ScaleLinear<number>\n    dimensionsScale: ScaleLinear<number>\n}): CustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            data,\n            bars,\n            thicknessScale,\n            dimensionsScale,\n        }),\n        [data, bars, thicknessScale, dimensionsScale]\n    )\n\nexport const useLegendData = <RawDatum>(dimensionIds: string[], bars: BarDatum<RawDatum>[]) => {\n    const legendData: {\n        id: string\n        label: string\n        color: string\n        fill?: string\n    }[] = []\n\n    dimensionIds.forEach(dimensionId => {\n        const bar = bars.find(bar => bar.id === dimensionId)\n        if (bar) {\n            legendData.push({\n                id: dimensionId,\n                label: dimensionId,\n                color: bar.color,\n                fill: bar.fill,\n            })\n        }\n    })\n\n    return legendData\n}\n","import { createElement, useCallback, MouseEvent } from 'react'\nimport { animated, SpringValues, to } from '@react-spring/web'\nimport { useTooltip } from '@nivo/tooltip'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\n\ninterface BarProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    bar: BarDatum<RawDatum>\n    animatedProps: SpringValues<{\n        x: number\n        y: number\n        width: number\n        height: number\n        opacity: number\n        color: string\n        borderColor: string\n    }>\n    isInteractive: boolean\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bar = <RawDatum,>({\n    bar,\n    animatedProps,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const showTooltip = useCallback(\n        (event: MouseEvent<SVGRectElement>) =>\n            showTooltipFromEvent(createElement(tooltip, { bar }), event),\n        [showTooltipFromEvent, tooltip, bar]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onClick?.(bar, event)\n        },\n        [onClick, bar]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseEnter?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseMove?.(bar, event)\n            showTooltip(event)\n        },\n        [showTooltip, bar]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGRectElement>) => {\n            onMouseLeave?.(bar, event)\n            hideTooltip()\n        },\n        [onMouseLeave, bar, hideTooltip]\n    )\n\n    return (\n        <animated.rect\n            x={animatedProps.x}\n            y={animatedProps.y}\n            width={to(animatedProps.width, value => Math.max(value, 0))}\n            height={to(animatedProps.height, value => Math.max(value, 0))}\n            fill={bar.fill ?? animatedProps.color}\n            stroke={animatedProps.borderColor}\n            strokeWidth={bar.borderWidth}\n            onClick={isInteractive ? handleClick : undefined}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n        />\n    )\n}\n","import { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { BarDatum, CommonProps, MouseEventHandlers } from './types'\nimport { Bar } from './Bar'\n\ninterface BarsProps<RawDatum> extends MouseEventHandlers<RawDatum, SVGRectElement> {\n    isInteractive: boolean\n    bars: BarDatum<RawDatum>[]\n    tooltip: CommonProps<RawDatum>['tooltip']\n}\n\nexport const Bars = <RawDatum,>({\n    bars,\n    isInteractive,\n    tooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n}: BarsProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<\n        BarDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            width: number\n            height: number\n            color: string\n            opacity: number\n            borderColor: string\n        }\n    >(bars, {\n        keys: bar => bar.key,\n        initial: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        from: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 0,\n            borderColor: bar.borderColor,\n        }),\n        enter: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        update: bar => ({\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n            opacity: 1,\n            borderColor: bar.borderColor,\n        }),\n        leave: bar => ({\n            opacity: 0,\n            x: bar.x,\n            y: bar.y,\n            width: bar.width,\n            height: bar.height,\n            color: bar.color,\n        }),\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((style, bar) => (\n                <Bar<RawDatum>\n                    key={bar.key}\n                    bar={bar}\n                    animatedProps={style}\n                    isInteractive={isInteractive}\n                    tooltip={tooltip}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseMove={onMouseMove}\n                    onMouseLeave={onMouseLeave}\n                />\n            ))}\n        </>\n    )\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { BarDatum } from './types'\n\nexport const BarTooltip = <RawDatum,>({ bar }: { bar: BarDatum<RawDatum> }) => (\n    <BasicTooltip\n        id={`${bar.datum.id} - ${bar.id}`}\n        value={bar.formattedValue}\n        enableChip={true}\n        color={bar.color}\n    />\n)\n","import { createElement, Fragment, ReactNode } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    Container,\n    SvgWrapper,\n    useDimensions,\n} from '@nivo/core'\nimport { Grid, Axes } from '@nivo/axes'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { SvgProps, LayerId, DimensionDatum } from './types'\nimport { defaultProps } from './props'\nimport { useMarimekko, useLayerContext, useLegendData } from './hooks'\nimport { Bars } from './Bars'\nimport { BarTooltip } from './BarTooltip'\n\nconst InnerMarimekko = <RawDatum,>({\n    data,\n    id,\n    value,\n    valueFormat,\n    dimensions,\n    width,\n    height,\n    margin: partialMargin,\n    layout = defaultProps.layout,\n    offset = defaultProps.offset,\n    outerPadding = defaultProps.outerPadding,\n    innerPadding = defaultProps.innerPadding,\n    layers = defaultProps.layers,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n    enableGridX = defaultProps.enableGridX,\n    gridXValues,\n    enableGridY = defaultProps.enableGridY,\n    gridYValues,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<DimensionDatum<RawDatum>, 'color'>\n    >,\n    defs = [],\n    fill = [],\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<DimensionDatum<RawDatum>>,\n    isInteractive = defaultProps.isInteractive,\n    tooltip = BarTooltip,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    legends = [],\n    role,\n}: SvgProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { computedData, bars, thicknessScale, dimensionsScale, dimensionIds } =\n        useMarimekko<RawDatum>({\n            data,\n            id,\n            value,\n            dimensions,\n            valueFormat,\n            layout,\n            offset,\n            outerPadding,\n            innerPadding,\n            colors,\n            borderColor,\n            borderWidth,\n            width: innerWidth,\n            height: innerHeight,\n        })\n\n    const layerById: Record<LayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        bars: null,\n        legends: null,\n    }\n\n    const boundDefs = bindDefs(defs, bars, fill)\n\n    if (layers.includes('bars')) {\n        layerById.bars = (\n            <Bars<RawDatum>\n                key=\"bars\"\n                bars={bars}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                onClick={onClick}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n            />\n        )\n    }\n\n    const xScale = layout === 'vertical' ? thicknessScale : dimensionsScale\n    const yScale = layout === 'vertical' ? dimensionsScale : thicknessScale\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                xScale={enableGridX ? xScale : undefined}\n                yScale={enableGridY ? yScale : undefined}\n                width={innerWidth}\n                height={innerHeight}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    const legendData = useLegendData<RawDatum>(dimensionIds, bars)\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <g key=\"legends\">\n                {legends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={innerWidth}\n                        containerHeight={innerHeight}\n                        data={legendData}\n                    />\n                ))}\n            </g>\n        )\n    }\n\n    const layerContext = useLayerContext<RawDatum>({\n        data: computedData,\n        bars,\n        thicknessScale,\n        dimensionsScale,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as LayerId] !== undefined) {\n                    return layerById[layer as LayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Marimekko = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    ...otherProps\n}: SvgProps<RawDatum>) => (\n    <Container\n        theme={otherProps.theme}\n        isInteractive={isInteractive}\n        animate={animate}\n        motionConfig={motionConfig}\n    >\n        <InnerMarimekko<RawDatum>\n            isInteractive={isInteractive}\n            animate={animate}\n            motionConfig={motionConfig}\n            {...otherProps}\n        />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { Marimekko } from './Marimekko'\nimport { SvgProps } from './types'\n\nexport const ResponsiveMarimekko = <RawDatum,>(\n    props: Omit<SvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Marimekko<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["defaultProps","layout","offset","outerPadding","innerPadding","layers","enableGridX","enableGridY","colors","scheme","borderWidth","borderColor","from","modifiers","isInteractive","animate","motionConfig","offsetById","expand","stackOffsetExpand","diverging","stackOffsetDiverging","none","stackOffsetNone","silouhette","stackOffsetSilhouette","wiggle","stackOffsetWiggle","useStack","dimensionIds","dimensions","useMemo","offsetFunction","d3Stack","keys","value","datum","key","useMarimekko","_ref3","data","id","valueFormat","rawDimensions","width","height","_useDataDimensions","forEach","dimension","push","get","useDataDimensions","_useStackedData","stack","stacked","allValues","min","Math","apply","max","useStackedData","normalizedData","getId","getValue","normalized","index","datumId","datumValue","useNormalizedData","thicknessScale","_ref","totalValue","reduce","acc","scaleData","all","totalPadding","length","createLinearScale","type","useThicknessScale","dimensionsScale","useDimensionsScale","computedData","_ref2","getColor","useOrdinalColorScale","formatValue","useValueFormatter","position","thickness","computedDatum","_extends","x","y","allPositions","totalSize","dimensionId","find","dimensionPoint","dimensionDatum","formattedValue","color","position0","position1","useComputedData","bars","theme","useTheme","getBorderColor","useInheritedColor","useBars","Bar","_bar$fill","bar","animatedProps","tooltip","onClick","onMouseEnter","onMouseMove","onMouseLeave","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","showTooltip","useCallback","event","createElement","handleClick","handleMouseEnter","handleMouseMove","handleMouseLeave","_jsx","animated","rect","to","fill","stroke","strokeWidth","undefined","Bars","_useMotionConfig","useMotionConfig","springConfig","config","transition","useTransition","initial","opacity","enter","update","leave","immediate","_Fragment","children","style","BarTooltip","BasicTooltip","enableChip","InnerMarimekko","partialMargin","margin","_ref$layout","_ref$offset","_ref$outerPadding","_ref$innerPadding","_ref$layers","axisTop","axisRight","axisBottom","axisLeft","_ref$enableGridX","gridXValues","_ref$enableGridY","gridYValues","_ref$colors","_ref$defs","defs","_ref$fill","_ref$borderWidth","_ref$borderColor","_ref$isInteractive","_ref$tooltip","_ref$legends","legends","role","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","_useMarimekko","layerById","grid","axes","boundDefs","bindDefs","includes","xScale","yScale","Grid","xValues","yValues","Axes","top","right","bottom","left","legendData","label","useLegendData","map","legend","i","BoxLegendSvg","containerWidth","containerHeight","layerContext","_ref4","useLayerContext","SvgWrapper","layer","Fragment","Marimekko","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","ResponsiveMarimekko","props","ResponsiveWrapper"],"mappings":"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"}