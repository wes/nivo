{"version":3,"file":"nivo-radar.cjs.js","sources":["../src/RadarLayer.tsx","../src/RadarGridLabels.tsx","../src/RadarGridLevels.tsx","../src/RadarGrid.tsx","../src/RadarSlice.tsx","../src/RadarSlices.tsx","../src/RadarDots.tsx","../src/props.ts","../src/RadarGridLabel.tsx","../src/RadarSliceTooltip.tsx","../src/hooks.ts","../src/Radar.tsx","../src/ResponsiveRadar.tsx"],"sourcesContent":["import { useMemo } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { lineRadial, CurveFactory } from 'd3-shape'\nimport { ScaleLinear } from 'd3-scale'\nimport { useMotionConfig, useTheme, useAnimatedPath } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { RadarCommonProps } from './types'\n\ninterface RadarLayerProps<D extends Record<string, unknown>> {\n    data: D[]\n    item: string\n    colorByKey: Record<string | number, string>\n    fillByKey: Record<string, string | null>\n    radiusScale: ScaleLinear<number, number>\n    rotation: number\n    angleStep: number\n    curveFactory: CurveFactory\n    borderWidth: RadarCommonProps<D>['borderWidth']\n    borderColor: RadarCommonProps<D>['borderColor']\n    fillOpacity: RadarCommonProps<D>['fillOpacity']\n    blendMode: RadarCommonProps<D>['blendMode']\n}\n\nexport const RadarLayer = <D extends Record<string, unknown>>({\n    data,\n    item: key,\n    colorByKey,\n    fillByKey,\n    radiusScale,\n    rotation,\n    angleStep,\n    curveFactory,\n    borderWidth,\n    borderColor,\n    fillOpacity,\n    blendMode,\n}: RadarLayerProps<D>) => {\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor(borderColor, theme)\n\n    const lineGenerator = useMemo(() => {\n        return lineRadial<number>()\n            .radius(d => radiusScale(d))\n            .angle((_, i) => rotation + i * angleStep)\n            .curve(curveFactory)\n    }, [radiusScale, rotation, angleStep, curveFactory])\n\n    const { animate, config: springConfig } = useMotionConfig()\n    const animatedPath = useAnimatedPath(lineGenerator(data.map(d => d[key] as number)) as string)\n    const animatedProps = useSpring<{ fill: string; stroke: string }>({\n        fill: colorByKey[key],\n        stroke: getBorderColor({ key, color: colorByKey[key] }),\n        config: springConfig,\n        immediate: !animate,\n    })\n    const fill = fillByKey[key] ?? animatedProps.fill\n\n    return (\n        <animated.path\n            key={key}\n            d={animatedPath}\n            fill={fill}\n            fillOpacity={fillOpacity}\n            stroke={animatedProps.stroke}\n            strokeWidth={borderWidth}\n            style={{ mixBlendMode: blendMode }}\n        />\n    )\n}\n","import { createElement } from 'react'\nimport { useSprings } from '@react-spring/web'\nimport { useMotionConfig, positionFromAngle, radiansToDegrees } from '@nivo/core'\nimport { GridLabelComponent } from './types'\n\nconst textAnchorFromAngle = (_angle: number) => {\n    const angle = radiansToDegrees(_angle) + 90\n\n    if (angle <= 10 || angle >= 350 || (angle >= 170 && angle <= 190)) return 'middle' as const\n    if (angle > 180) return 'end' as const\n    return 'start' as const\n}\n\ninterface RadarGridLabelsProps {\n    radius: number\n    angles: number[]\n    indices: string[]\n    label: GridLabelComponent\n    labelOffset: number\n}\n\nexport const RadarGridLabels = ({\n    radius,\n    angles,\n    indices,\n    label: labelComponent,\n    labelOffset,\n}: RadarGridLabelsProps) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = indices.map((index, i) => {\n        const position = positionFromAngle(angles[i], radius + labelOffset)\n        const textAnchor = textAnchorFromAngle(angles[i])\n\n        return {\n            id: index,\n            angle: radiansToDegrees(angles[i]),\n            anchor: textAnchor,\n            ...position,\n        }\n    })\n\n    const springs = useSprings(\n        labels.length,\n        labels.map(label => ({\n            transform: `translate(${label.x}, ${label.y})`,\n            config: springConfig,\n            immediate: !animate,\n        }))\n    )\n\n    return (\n        <>\n            {springs.map((animatedProps, index) => {\n                const label = labels[index]\n\n                return createElement(labelComponent, {\n                    key: label.id,\n                    id: label.id,\n                    anchor: label.anchor,\n                    angle: label.angle,\n                    x: label.x,\n                    y: label.y,\n                    animated: animatedProps,\n                })\n            })}\n        </>\n    )\n}\n","import { memo, SVGProps, useMemo } from 'react'\nimport { lineRadial, curveLinearClosed } from 'd3-shape'\nimport { animated, useSpring, to } from '@react-spring/web'\nimport { useTheme, useAnimatedPath, useMotionConfig } from '@nivo/core'\nimport { RadarCommonProps } from './types'\n\ninterface RadarGridLevelCircularProps {\n    radius: number\n}\n\nconst RadarGridLevelCircular = memo(({ radius }: RadarGridLevelCircularProps) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        radius,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.circle\n            fill=\"none\"\n            r={to(animatedProps.radius, value => Math.max(value, 0))}\n            {...(theme.grid.line as Omit<SVGProps<SVGCircleElement>, 'ref'>)}\n        />\n    )\n})\n\ninterface RadarGridLevelLinearProps {\n    radius: number\n    rotation: number\n    angleStep: number\n    dataLength: number\n}\n\nconst RadarGridLevelLinear = ({\n    radius,\n    rotation,\n    angleStep,\n    dataLength,\n}: RadarGridLevelLinearProps) => {\n    const theme = useTheme()\n\n    const radarLineGenerator = useMemo(\n        () =>\n            lineRadial<number>()\n                .angle(i => rotation + i * angleStep)\n                .radius(radius)\n                .curve(curveLinearClosed),\n        [rotation, angleStep, radius]\n    )\n\n    const points = Array.from({ length: dataLength }, (_, i) => i)\n    const animatedPath = useAnimatedPath(radarLineGenerator(points) as string)\n\n    return (\n        <animated.path\n            fill=\"none\"\n            d={animatedPath}\n            {...(theme.grid.line as Omit<SVGProps<SVGPathElement>, 'ref'>)}\n        />\n    )\n}\n\ninterface RadarGridLevelsProps<D extends Record<string, unknown>> {\n    shape: RadarCommonProps<D>['gridShape']\n    radius: number\n    rotation: number\n    angleStep: number\n    dataLength: number\n}\n\nexport const RadarGridLevels = <D extends Record<string, unknown>>({\n    shape,\n    ...props\n}: RadarGridLevelsProps<D>) => {\n    return shape === 'circular' ? (\n        <RadarGridLevelCircular radius={props.radius} />\n    ) : (\n        <RadarGridLevelLinear {...props} />\n    )\n}\n","import { SVGProps, useMemo } from 'react'\nimport { positionFromAngle, useTheme } from '@nivo/core'\nimport { RadarGridLabels } from './RadarGridLabels'\nimport { RadarGridLevels } from './RadarGridLevels'\nimport { GridLabelComponent, RadarCommonProps } from './types'\n\ninterface RadarGridProps<D extends Record<string, unknown>> {\n    indices: string[]\n    shape: RadarCommonProps<D>['gridShape']\n    radius: number\n    levels: number\n    rotation: number\n    angleStep: number\n    label: GridLabelComponent\n    labelOffset: number\n}\n\nexport const RadarGrid = <D extends Record<string, unknown>>({\n    indices,\n    levels,\n    shape,\n    radius,\n    rotation,\n    angleStep,\n    label,\n    labelOffset,\n}: RadarGridProps<D>) => {\n    const theme = useTheme()\n    const { radii, angles } = useMemo(() => {\n        return {\n            radii: Array.from({ length: levels })\n                .map((_, i) => (radius / levels) * (i + 1))\n                .reverse(),\n            angles: Array.from({ length: indices.length }).map(\n                (_, i) => rotation + i * angleStep - Math.PI / 2\n            ),\n        }\n    }, [indices, levels, radius, rotation, angleStep])\n\n    return (\n        <>\n            {angles.map((angle, i) => {\n                const position = positionFromAngle(angle, radius)\n                return (\n                    <line\n                        key={`axis.${i}`}\n                        x1={0}\n                        y1={0}\n                        x2={position.x}\n                        y2={position.y}\n                        {...(theme.grid.line as SVGProps<SVGLineElement>)}\n                    />\n                )\n            })}\n            {radii.map((radius, i) => (\n                <RadarGridLevels<D>\n                    key={`level.${i}`}\n                    shape={shape}\n                    radius={radius}\n                    rotation={rotation}\n                    angleStep={angleStep}\n                    dataLength={indices.length}\n                />\n            ))}\n            <RadarGridLabels\n                radius={radius}\n                angles={angles}\n                indices={indices}\n                labelOffset={labelOffset}\n                label={label}\n            />\n        </>\n    )\n}\n","import { useMemo, useState, useCallback, createElement, MouseEvent } from 'react'\nimport { Arc } from 'd3-shape'\nimport { positionFromAngle, useTheme } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport { RadarCommonProps, RadarDataProps, RadarSliceTooltipDatum } from './types'\n\ninterface RadarSliceProps<D extends Record<string, unknown>> {\n    datum: D\n    keys: RadarDataProps<D>['keys']\n    index: string | number\n    formatValue: (value: number, context: string) => string\n    colorByKey: Record<string, string>\n    startAngle: number\n    endAngle: number\n    radius: number\n    arcGenerator: Arc<void, { startAngle: number; endAngle: number }>\n    tooltip: RadarCommonProps<D>['sliceTooltip']\n}\n\nexport const RadarSlice = <D extends Record<string, unknown>>({\n    datum,\n    keys,\n    index,\n    formatValue,\n    colorByKey,\n    radius,\n    startAngle,\n    endAngle,\n    arcGenerator,\n    tooltip,\n}: RadarSliceProps<D>) => {\n    const [isHover, setIsHover] = useState(false)\n    const theme = useTheme()\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const tooltipData = useMemo(() => {\n        const data: RadarSliceTooltipDatum[] = keys.map(key => ({\n            color: colorByKey[key],\n            id: key,\n            value: datum[key] as number,\n            formattedValue: formatValue(datum[key] as number, key),\n        }))\n        data.sort((a, b) => a.value - b.value)\n        data.reverse()\n\n        return data\n    }, [datum, keys, formatValue, colorByKey])\n\n    const showItemTooltip = useCallback(\n        (event: MouseEvent<SVGPathElement>) => {\n            setIsHover(true)\n            showTooltipFromEvent(\n                createElement(tooltip, {\n                    index,\n                    data: tooltipData,\n                }),\n                event\n            )\n        },\n        [showTooltipFromEvent, tooltip, index, tooltipData]\n    )\n\n    const hideItemTooltip = useCallback(() => {\n        setIsHover(false)\n        hideTooltip()\n    }, [hideTooltip, setIsHover])\n\n    const { path, tipX, tipY } = useMemo(() => {\n        const position = positionFromAngle(\n            startAngle + (endAngle - startAngle) * 0.5 - Math.PI / 2,\n            radius\n        )\n\n        return {\n            path: arcGenerator({ startAngle, endAngle }) as string,\n            tipX: position.x,\n            tipY: position.y,\n        }\n    }, [startAngle, endAngle, radius, arcGenerator])\n\n    return (\n        <>\n            {isHover && <line x1={0} y1={0} x2={tipX} y2={tipY} style={theme.crosshair.line} />}\n            <path\n                d={path}\n                fill=\"#F00\"\n                fillOpacity={0}\n                onMouseEnter={showItemTooltip}\n                onMouseMove={showItemTooltip}\n                onMouseLeave={hideItemTooltip}\n            />\n        </>\n    )\n}\n","import { arc as d3Arc } from 'd3-shape'\nimport { RadarSlice } from './RadarSlice'\nimport { RadarColorMapping, RadarCommonProps, RadarDataProps } from './types'\n\ninterface RadarSlicesProps<D extends Record<string, unknown>> {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    getIndex: (d: D) => string | number\n    formatValue: (value: number, context: string) => string\n    colorByKey: RadarColorMapping\n    radius: number\n    rotation: number\n    angleStep: number\n    tooltip: RadarCommonProps<D>['sliceTooltip']\n}\n\nexport const RadarSlices = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    getIndex,\n    formatValue,\n    colorByKey,\n    radius,\n    rotation,\n    angleStep,\n    tooltip,\n}: RadarSlicesProps<D>) => {\n    const arc = d3Arc<{ startAngle: number; endAngle: number }>().outerRadius(radius).innerRadius(0)\n\n    const halfAngleStep = angleStep * 0.5\n    let rootStartAngle = rotation - halfAngleStep\n\n    return (\n        <>\n            {data.map(d => {\n                const index = getIndex(d)\n                const startAngle = rootStartAngle\n                const endAngle = startAngle + angleStep\n\n                rootStartAngle += angleStep\n\n                return (\n                    <RadarSlice\n                        key={index}\n                        datum={d}\n                        keys={keys}\n                        index={index}\n                        formatValue={formatValue}\n                        colorByKey={colorByKey}\n                        startAngle={startAngle}\n                        endAngle={endAngle}\n                        radius={radius}\n                        arcGenerator={arc}\n                        tooltip={tooltip}\n                    />\n                )\n            })}\n        </>\n    )\n}\n","import { useMemo } from 'react'\nimport { ScaleLinear } from 'd3-scale'\nimport { useTheme, positionFromAngle, DotsItem, usePropertyAccessor } from '@nivo/core'\nimport { getInheritedColorGenerator } from '@nivo/colors'\nimport { RadarCommonProps, RadarDataProps, PointProps, PointData, RadarColorMapping } from './types'\n\ninterface RadarDotsProps<D extends Record<string, unknown>> {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    radiusScale: ScaleLinear<number, number>\n    getIndex: (d: D) => string\n    colorByKey: RadarColorMapping\n    rotation: number\n    angleStep: number\n    symbol?: RadarCommonProps<D>['dotSymbol']\n    size: number\n    color: RadarCommonProps<D>['dotColor']\n    borderWidth: number\n    borderColor: RadarCommonProps<D>['dotBorderColor']\n    enableLabel: boolean\n    label: RadarCommonProps<D>['dotLabel']\n    formatValue: (value: number, context: string) => string\n    labelYOffset: number\n}\n\nexport const RadarDots = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    getIndex,\n    colorByKey,\n    radiusScale,\n    rotation,\n    angleStep,\n    symbol,\n    size = 6,\n    color = { from: 'color' },\n    borderWidth = 0,\n    borderColor = { from: 'color' },\n    enableLabel = false,\n    label = 'value',\n    formatValue,\n    labelYOffset,\n}: RadarDotsProps<D>) => {\n    const theme = useTheme()\n    const fillColor = getInheritedColorGenerator(color, theme)\n    const strokeColor = getInheritedColorGenerator(borderColor, theme)\n    const getLabel = usePropertyAccessor<PointData, string | number>(label)\n\n    const points: PointProps[] = useMemo(\n        () =>\n            data.reduce((acc, datum, i) => {\n                const index = getIndex(datum)\n                keys.forEach(key => {\n                    const value = datum[key] as number\n\n                    const pointData: PointData = {\n                        index,\n                        key,\n                        value,\n                        formattedValue: formatValue(value, key),\n                        color: colorByKey[key],\n                    }\n\n                    acc.push({\n                        key: `${key}.${index}`,\n                        label: enableLabel ? getLabel(pointData) : undefined,\n                        style: {\n                            fill: fillColor(pointData),\n                            stroke: strokeColor(pointData),\n                            ...positionFromAngle(\n                                rotation + angleStep * i - Math.PI / 2,\n                                radiusScale(datum[key] as number)\n                            ),\n                        },\n                        data: pointData,\n                    })\n                })\n\n                return acc\n            }, [] as PointProps[]),\n        [\n            data,\n            keys,\n            getIndex,\n            colorByKey,\n            enableLabel,\n            getLabel,\n            formatValue,\n            fillColor,\n            strokeColor,\n            rotation,\n            angleStep,\n            radiusScale,\n        ]\n    )\n\n    return (\n        <>\n            {points.map(point => (\n                <DotsItem\n                    key={point.key}\n                    x={point.style.x}\n                    y={point.style.y}\n                    symbol={symbol}\n                    size={size}\n                    color={point.style.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.style.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    datum={point.data}\n                />\n            ))}\n        </>\n    )\n}\n","import { RadarGridLabel } from './RadarGridLabel'\nimport { RadarSliceTooltip } from './RadarSliceTooltip'\nimport { RadarLayerId } from './types'\n\nexport const svgDefaultProps = {\n    layers: ['grid', 'layers', 'slices', 'dots', 'legends'] as RadarLayerId[],\n\n    maxValue: 'auto' as const,\n\n    rotation: 0,\n\n    curve: 'linearClosed' as const,\n\n    borderWidth: 2,\n    borderColor: { from: 'color' },\n\n    gridLevels: 5,\n    gridShape: 'circular' as const,\n    gridLabelOffset: 16,\n    gridLabel: RadarGridLabel,\n\n    enableDots: true,\n    dotSize: 6,\n    dotColor: { from: 'color' },\n    dotBorderWidth: 0,\n    dotBorderColor: { from: 'color' },\n    enableDotLabel: false,\n    dotLabel: 'formattedValue',\n    dotLabelYOffset: -12,\n\n    colors: { scheme: 'nivo' as const },\n    fillOpacity: 0.25,\n    blendMode: 'normal' as const,\n\n    isInteractive: true,\n    sliceTooltip: RadarSliceTooltip,\n\n    legends: [],\n    role: 'img',\n\n    animate: true,\n    motionConfig: 'gentle' as const,\n\n    defs: [],\n    fill: [],\n}\n","import { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { GridLabelProps } from './types'\n\nexport const RadarGridLabel = ({ id, anchor, animated: animatedProps }: GridLabelProps) => {\n    const theme = useTheme()\n\n    return (\n        <animated.g transform={animatedProps.transform}>\n            <text style={theme.axis.ticks.text} dominantBaseline=\"central\" textAnchor={anchor}>\n                {id}\n            </text>\n        </animated.g>\n    )\n}\n","import { useMemo } from 'react'\nimport { TableTooltip, Chip } from '@nivo/tooltip'\nimport { RadarSliceTooltipProps } from './types'\n\nexport const RadarSliceTooltip = ({ index, data }: RadarSliceTooltipProps) => {\n    const rows = useMemo(\n        () =>\n            data.map(datum => [\n                <Chip key={datum.id} color={datum.color} />,\n                datum.id,\n                datum.formattedValue,\n            ]),\n        [data]\n    )\n\n    return <TableTooltip title={<strong>{index}</strong>} rows={rows} />\n}\n","import { useMemo } from 'react'\nimport { scaleLinear } from 'd3-scale'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useCurveInterpolation,\n    usePropertyAccessor,\n    useValueFormatter,\n} from '@nivo/core'\nimport { degreesToRadians } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { svgDefaultProps } from './props'\nimport {\n    RadarColorMapping,\n    RadarCommonProps,\n    RadarDataProps,\n    RadarCustomLayerProps,\n    RadarSvgProps,\n    BoundLegendProps,\n} from './types'\n\nexport const useRadar = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    indexBy,\n    rotationDegrees,\n    maxValue,\n    valueFormat,\n    curve,\n    width,\n    height,\n    colors = svgDefaultProps.colors,\n    legends,\n    defs,\n    fill,\n}: {\n    data: RadarDataProps<D>['data']\n    keys: RadarDataProps<D>['keys']\n    indexBy: RadarDataProps<D>['indexBy']\n    rotationDegrees: RadarCommonProps<D>['rotation']\n    maxValue: RadarCommonProps<D>['maxValue']\n    valueFormat?: RadarCommonProps<D>['valueFormat']\n    curve: RadarCommonProps<D>['curve']\n    width: number\n    height: number\n    colors: RadarCommonProps<D>['colors']\n    legends: RadarCommonProps<D>['legends']\n    defs: RadarSvgProps<D>['defs']\n    fill: RadarSvgProps<D>['fill']\n}) => {\n    const getIndex = usePropertyAccessor<D, string>(indexBy)\n    const indices = useMemo(() => data.map(getIndex), [data, getIndex])\n    const formatValue = useValueFormatter<number, string>(valueFormat)\n    const rotation = degreesToRadians(rotationDegrees)\n\n    const getColor = useOrdinalColorScale<{ key: string; index: number }>(colors, 'key')\n    const colorByKey: RadarColorMapping = useMemo(\n        () =>\n            keys.reduce<RadarColorMapping>((mapping, key, index) => {\n                mapping[key] = getColor({ key, index })\n                return mapping\n            }, {}),\n        [keys, getColor]\n    )\n\n    const { boundDefs, fillByKey } = useMemo(() => {\n        // expand keys into structure expected by bindDefs\n        const keyData = keys.map(k => ({ key: k, color: colorByKey[k], data, fill: null }))\n        const boundDefs = bindDefs(defs, keyData, fill)\n        const fillByKey = keyData.reduce<Record<string, string | null>>((mapping, keyDatum) => {\n            const { key: keyName, fill } = keyDatum\n            mapping[keyName] = fill\n            return mapping\n        }, {})\n\n        return { boundDefs, fillByKey }\n    }, [keys, data, defs, fill, colorByKey])\n\n    const { radius, radiusScale, centerX, centerY, angleStep } = useMemo(() => {\n        const allValues: number[] = data.reduce(\n            (acc: number[], d) => [...acc, ...keys.map(key => d[key] as number)],\n            [] as number[]\n        )\n        const computedMaxValue = maxValue !== 'auto' ? maxValue : Math.max(...allValues)\n\n        const radius = Math.min(width, height) / 2\n        const radiusScale = scaleLinear<number, number>()\n            .range([0, radius])\n            .domain([0, computedMaxValue])\n\n        return {\n            radius,\n            radiusScale,\n            centerX: width / 2,\n            centerY: height / 2,\n            angleStep: (Math.PI * 2) / data.length,\n        }\n    }, [keys, data, maxValue, width, height])\n\n    const curveFactory = useCurveInterpolation(curve)\n\n    const customLayerProps: RadarCustomLayerProps<D> = useMemo(\n        () => ({\n            data,\n            keys,\n            indices,\n            colorByKey,\n            centerX,\n            centerY,\n            radiusScale,\n            angleStep,\n        }),\n        [data, keys, indices, colorByKey, centerX, centerY, radiusScale, angleStep]\n    )\n\n    const legendData = useMemo(\n        () => keys.map(key => ({ id: key, label: key, color: colorByKey[key] })),\n        [keys, colorByKey]\n    )\n\n    const boundLegends: BoundLegendProps[] = useMemo(\n        () =>\n            legends.map(({ data: customData, ...legend }) => {\n                const boundData = customData?.map(cd => {\n                    const findData = legendData.find(ld => ld.id === cd.id) || {}\n                    return { ...findData, ...cd }\n                })\n                return { ...legend, data: boundData || legendData }\n            }),\n        [legends, legendData]\n    )\n\n    return {\n        getIndex,\n        indices,\n        formatValue,\n        colorByKey,\n        fillByKey,\n        boundDefs,\n        rotation,\n        radius,\n        radiusScale,\n        centerX,\n        centerY,\n        angleStep,\n        curveFactory,\n        legendData,\n        boundLegends,\n        customLayerProps,\n    }\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport { Container, useDimensions, SvgWrapper } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { RadarLayer } from './RadarLayer'\nimport { RadarGrid } from './RadarGrid'\nimport { RadarSlices } from './RadarSlices'\nimport { RadarDots } from './RadarDots'\nimport { svgDefaultProps } from './props'\nimport { RadarLayerId, RadarSvgProps } from './types'\nimport { useRadar } from './hooks'\n\ntype InnerRadarProps<D extends Record<string, unknown>> = Omit<\n    RadarSvgProps<D>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerRadar = <D extends Record<string, unknown>>({\n    data,\n    keys,\n    indexBy,\n    layers = svgDefaultProps.layers,\n    rotation: rotationDegrees = svgDefaultProps.rotation,\n    maxValue = svgDefaultProps.maxValue,\n    valueFormat,\n    curve = svgDefaultProps.curve,\n    margin: partialMargin,\n    width,\n    height,\n    borderWidth = svgDefaultProps.borderWidth,\n    borderColor = svgDefaultProps.borderColor,\n    gridLevels = svgDefaultProps.gridLevels,\n    gridShape = svgDefaultProps.gridShape,\n    gridLabel = svgDefaultProps.gridLabel,\n    gridLabelOffset = svgDefaultProps.gridLabelOffset,\n    enableDots = svgDefaultProps.enableDots,\n    dotSymbol,\n    dotSize = svgDefaultProps.dotSize,\n    dotColor = svgDefaultProps.dotColor,\n    dotBorderWidth = svgDefaultProps.dotBorderWidth,\n    dotBorderColor = svgDefaultProps.dotBorderColor,\n    enableDotLabel = svgDefaultProps.enableDotLabel,\n    dotLabel = svgDefaultProps.dotLabel,\n    dotLabelYOffset = svgDefaultProps.dotLabelYOffset,\n    colors = svgDefaultProps.colors,\n    fillOpacity = svgDefaultProps.fillOpacity,\n    blendMode = svgDefaultProps.blendMode,\n    isInteractive = svgDefaultProps.isInteractive,\n    sliceTooltip = svgDefaultProps.sliceTooltip,\n    legends = svgDefaultProps.legends,\n    role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n    defs = svgDefaultProps.defs,\n    fill = svgDefaultProps.fill,\n}: InnerRadarProps<D>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        getIndex,\n        indices,\n        formatValue,\n        colorByKey,\n        fillByKey,\n        boundDefs,\n        rotation,\n        radius,\n        radiusScale,\n        centerX,\n        centerY,\n        angleStep,\n        curveFactory,\n        boundLegends,\n        customLayerProps,\n    } = useRadar<D>({\n        data,\n        keys,\n        indexBy,\n        rotationDegrees,\n        maxValue,\n        valueFormat,\n        curve,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        legends,\n        defs,\n        fill,\n    })\n\n    const layerById: Record<RadarLayerId, ReactNode> = {\n        grid: null,\n        layers: null,\n        slices: null,\n        dots: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <g key=\"grid\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarGrid<D>\n                    levels={gridLevels}\n                    shape={gridShape}\n                    radius={radius}\n                    rotation={rotation}\n                    angleStep={angleStep}\n                    indices={indices}\n                    label={gridLabel}\n                    labelOffset={gridLabelOffset}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('layers')) {\n        layerById.layers = (\n            <g key=\"layers\" transform={`translate(${centerX}, ${centerY})`}>\n                {keys.map(key => (\n                    <RadarLayer<D>\n                        key={key}\n                        data={data}\n                        item={key}\n                        colorByKey={colorByKey}\n                        fillByKey={fillByKey}\n                        radiusScale={radiusScale}\n                        rotation={rotation}\n                        angleStep={angleStep}\n                        curveFactory={curveFactory}\n                        borderWidth={borderWidth}\n                        borderColor={borderColor}\n                        fillOpacity={fillOpacity}\n                        blendMode={blendMode}\n                    />\n                ))}\n            </g>\n        )\n    }\n\n    if (layers.includes('slices') && isInteractive) {\n        layerById.slices = (\n            <g key=\"slices\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarSlices<D>\n                    data={data}\n                    keys={keys}\n                    getIndex={getIndex}\n                    formatValue={formatValue}\n                    colorByKey={colorByKey}\n                    radius={radius}\n                    rotation={rotation}\n                    angleStep={angleStep}\n                    tooltip={sliceTooltip}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('dots') && enableDots) {\n        layerById.dots = (\n            <g key=\"dots\" transform={`translate(${centerX}, ${centerY})`}>\n                <RadarDots<D>\n                    data={data}\n                    keys={keys}\n                    getIndex={getIndex}\n                    radiusScale={radiusScale}\n                    rotation={rotation}\n                    angleStep={angleStep}\n                    symbol={dotSymbol}\n                    size={dotSize}\n                    colorByKey={colorByKey}\n                    color={dotColor}\n                    borderWidth={dotBorderWidth}\n                    borderColor={dotBorderColor}\n                    enableLabel={enableDotLabel}\n                    label={dotLabel}\n                    formatValue={formatValue}\n                    labelYOffset={dotLabelYOffset}\n                />\n            </g>\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = (\n            <Fragment key=\"legends\">\n                {boundLegends.map((legend, i) => (\n                    <BoxLegendSvg\n                        key={i}\n                        {...legend}\n                        containerWidth={width}\n                        containerHeight={height}\n                    />\n                ))}\n            </Fragment>\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                return layerById?.[layer] ?? null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Radar = <D extends Record<string, unknown>>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: RadarSvgProps<D>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerRadar<D> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { RadarSvgProps } from './types'\nimport { Radar } from './Radar'\n\nexport const ResponsiveRadar = <D extends Record<string, unknown>>(\n    props: Omit<RadarSvgProps<D>, 'height' | 'width'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Radar<D> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n"],"names":["RadarLayer","_ref","_fillByKey$key","data","key","item","colorByKey","fillByKey","radiusScale","rotation","angleStep","curveFactory","borderWidth","borderColor","fillOpacity","blendMode","theme","useTheme","getBorderColor","useInheritedColor","lineGenerator","useMemo","lineRadial","radius","d","angle","_","i","curve","_useMotionConfig","useMotionConfig","animate","springConfig","config","animatedPath","useAnimatedPath","map","animatedProps","useSpring","fill","stroke","color","immediate","_jsx","jsx","animated","path","strokeWidth","style","mixBlendMode","RadarGridLabels","angles","indices","labelComponent","label","labelOffset","labels","index","_angle","position","positionFromAngle","textAnchor","radiansToDegrees","_extends","id","anchor","springs","useSprings","length","transform","x","y","_Fragment","children","createElement","RadarGridLevelCircular","memo","circle","r","to","value","Math","max","grid","line","RadarGridLevelLinear","_ref2","dataLength","radarLineGenerator","curveLinearClosed","points","Array","from","RadarGridLevels","_ref3","shape","props","_objectWithoutPropertiesLoose","_excluded","RadarGrid","levels","_useMemo","radii","reverse","PI","_jsxs","x1","y1","x2","y2","RadarSlice","datum","keys","formatValue","startAngle","endAngle","arcGenerator","tooltip","_useState","useState","isHover","setIsHover","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","tooltipData","formattedValue","sort","a","b","showItemTooltip","useCallback","event","hideItemTooltip","tipX","tipY","crosshair","onMouseEnter","onMouseMove","onMouseLeave","RadarSlices","getIndex","arc","d3Arc","outerRadius","innerRadius","rootStartAngle","RadarDots","symbol","_ref$size","size","_ref$color","_ref$borderWidth","_ref$borderColor","_ref$enableLabel","enableLabel","_ref$label","labelYOffset","fillColor","getInheritedColorGenerator","strokeColor","getLabel","usePropertyAccessor","reduce","acc","forEach","pointData","push","undefined","point","DotsItem","svgDefaultProps","layers","maxValue","gridLevels","gridShape","gridLabelOffset","gridLabel","g","axis","ticks","text","dominantBaseline","enableDots","dotSize","dotColor","dotBorderWidth","dotBorderColor","enableDotLabel","dotLabel","dotLabelYOffset","colors","scheme","isInteractive","sliceTooltip","rows","Chip","TableTooltip","title","legends","role","motionConfig","defs","useRadar","indexBy","rotationDegrees","valueFormat","width","height","_ref$colors","useValueFormatter","degreesToRadians","getColor","useOrdinalColorScale","mapping","keyData","k","boundDefs","bindDefs","keyDatum","keyName","_useMemo2","allValues","concat","computedMaxValue","apply","min","scaleLinear","range","domain","centerX","centerY","useCurveInterpolation","customLayerProps","legendData","boundLegends","customData","legend","boundData","cd","find","ld","InnerRadar","_ref$layers","_ref$rotation","_ref$maxValue","_ref$curve","partialMargin","margin","_ref$gridLevels","_ref$gridShape","_ref$gridLabel","_ref$gridLabelOffset","_ref$enableDots","dotSymbol","_ref$dotSize","_ref$dotColor","_ref$dotBorderWidth","_ref$dotBorderColor","_ref$enableDotLabel","_ref$dotLabel","_ref$dotLabelYOffset","_ref$fillOpacity","_ref$blendMode","_ref$isInteractive","_ref$sliceTooltip","_ref$legends","ariaLabel","ariaLabelledBy","ariaDescribedBy","_ref$defs","_ref$fill","_useDimensions","useDimensions","innerWidth","innerHeight","outerWidth","outerHeight","_useRadar","layerById","slices","dots","includes","Fragment","BoxLegendSvg","containerWidth","containerHeight","SvgWrapper","layer","_layerById$layer","Radar","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","Container","ResponsiveWrapper"],"mappings":"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"}