{"version":3,"file":"nivo-circle-packing.es.js","sources":["../src/hooks.ts","../src/props.ts","../src/CirclePackingTooltip.tsx","../src/Circles.tsx","../src/CircleSvg.tsx","../src/Labels.tsx","../src/LabelSvg.tsx","../src/CirclePacking.tsx","../src/ResponsiveCirclePacking.tsx","../src/CircleHtml.tsx","../src/LabelHtml.tsx","../src/CirclePackingHtml.tsx","../src/ResponsiveCirclePackingHtml.tsx","../src/CirclePackingCanvas.tsx","../src/ResponsiveCirclePackingCanvas.tsx"],"sourcesContent":["import { useMemo, MouseEvent, MutableRefObject, useCallback } from 'react'\nimport { pack as d3Pack, hierarchy as d3Hierarchy } from 'd3-hierarchy'\nimport cloneDeep from 'lodash/cloneDeep'\nimport sortBy from 'lodash/sortBy'\nimport {\n    usePropertyAccessor,\n    useValueFormatter,\n    useTheme,\n    getRelativeCursor,\n    getDistance,\n} from '@nivo/core'\nimport { useInheritedColor, useOrdinalColorScale } from '@nivo/colors'\nimport {\n    CirclePackingCommonProps,\n    CirclePackingCustomLayerProps,\n    ComputedDatum,\n    MouseHandlers,\n} from './types'\n\nexport const useCirclePacking = <RawDatum>({\n    data,\n    id,\n    value,\n    valueFormat,\n    width,\n    height,\n    padding,\n    leavesOnly,\n    colors,\n    colorBy,\n    inheritColorFromParent,\n    childColor,\n}: {\n    data: CirclePackingCommonProps<RawDatum>['data']\n    id: CirclePackingCommonProps<RawDatum>['id']\n    value: CirclePackingCommonProps<RawDatum>['value']\n    valueFormat?: CirclePackingCommonProps<RawDatum>['valueFormat']\n    width: number\n    height: number\n    padding: CirclePackingCommonProps<RawDatum>['padding']\n    leavesOnly: CirclePackingCommonProps<RawDatum>['leavesOnly']\n    colors: CirclePackingCommonProps<RawDatum>['colors']\n    colorBy: CirclePackingCommonProps<RawDatum>['colorBy']\n    inheritColorFromParent: CirclePackingCommonProps<RawDatum>['inheritColorFromParent']\n    childColor: CirclePackingCommonProps<RawDatum>['childColor']\n}): ComputedDatum<RawDatum>[] => {\n    const getId = usePropertyAccessor<RawDatum, string>(id)\n    const getValue = usePropertyAccessor<RawDatum, number>(value)\n    const formatValue = useValueFormatter(valueFormat)\n\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'color' | 'fill'>>(\n        colors,\n        colorBy\n    )\n    const theme = useTheme()\n    const getChildColor = useInheritedColor<ComputedDatum<RawDatum>>(childColor, theme)\n\n    // d3 mutates the data for performance reasons,\n    // however it does not work well with reactive programming,\n    // this ensures that we don't mutate the input data\n    const clonedData = cloneDeep(data)\n\n    const hierarchy = d3Hierarchy<RawDatum>(clonedData).sum(getValue)\n\n    const pack = d3Pack<RawDatum>().size([width, height]).padding(padding)\n    const packedData = pack(hierarchy)\n\n    const nodes = leavesOnly ? packedData.leaves() : packedData.descendants()\n\n    // It's important to sort node by depth,\n    // it ensures that we assign a parent node\n    // which has already been computed, because parent nodes\n    // are gonna be computed first\n    const sortedNodes = sortBy(nodes, 'depth')\n\n    const total = hierarchy.value ?? 0\n\n    const computedNodes = sortedNodes.reduce<ComputedDatum<RawDatum>[]>((acc, descendant) => {\n        const id = getId(descendant.data)\n        const value = descendant.value!\n        const percentage = (100 * value) / total\n        const path = descendant.ancestors().map(ancestor => getId(ancestor.data))\n\n        let parent: ComputedDatum<RawDatum> | undefined\n        if (descendant.parent) {\n            parent = acc.find(node => node.id === getId(descendant.parent!.data))\n        }\n\n        const normalizedNode: ComputedDatum<RawDatum> = {\n            id,\n            path,\n            value,\n            percentage,\n            formattedValue: valueFormat ? formatValue(value) : `${percentage.toFixed(2)}%`,\n            x: descendant.x,\n            y: descendant.y,\n            radius: descendant.r,\n            color: '',\n            data: descendant.data,\n            depth: descendant.depth,\n            height: descendant.height,\n        }\n\n        if (inheritColorFromParent && parent && normalizedNode.depth > 1) {\n            normalizedNode.color = getChildColor(parent)\n        } else {\n            normalizedNode.color = getColor(normalizedNode)\n        }\n\n        return [...acc, normalizedNode]\n    }, [])\n\n    return computedNodes\n}\n\nexport const useCirclePackingZoom = <RawDatum>(\n    nodes: ComputedDatum<RawDatum>[],\n    zoomedId: CirclePackingCommonProps<RawDatum>['zoomedId'],\n    width: number,\n    height: number\n) =>\n    useMemo(() => {\n        if (!zoomedId) return nodes\n\n        const zoomedNode = nodes.find(({ id }) => id === zoomedId)\n        if (!zoomedNode) return nodes\n\n        const ratio = Math.min(width, height) / (zoomedNode.radius * 2)\n        const offsetX = width / 2 - zoomedNode.x * ratio\n        const offsetY = height / 2 - zoomedNode.y * ratio\n\n        return nodes.map(node => ({\n            ...node,\n            x: node.x * ratio + offsetX,\n            y: node.y * ratio + offsetY,\n            radius: node.radius * ratio,\n        }))\n    }, [nodes, zoomedId, width, height])\n\nexport const useCirclePackingLabels = <RawDatum>({\n    nodes,\n    label,\n    filter,\n    skipRadius,\n    textColor,\n}: {\n    nodes: ComputedDatum<RawDatum>[]\n    label: CirclePackingCommonProps<RawDatum>['label']\n    filter: CirclePackingCommonProps<RawDatum>['labelsFilter']\n    skipRadius: CirclePackingCommonProps<RawDatum>['labelsSkipRadius']\n    textColor: CirclePackingCommonProps<RawDatum>['labelTextColor']\n}) => {\n    const getLabel = usePropertyAccessor<ComputedDatum<RawDatum>, string | number>(label)\n    const theme = useTheme()\n    const getTextColor = useInheritedColor<ComputedDatum<RawDatum>>(textColor, theme)\n\n    // computing the labels\n    const labels = useMemo(\n        () =>\n            nodes\n                .filter(node => node.radius >= skipRadius)\n                .map(node => ({\n                    label: getLabel(node),\n                    textColor: getTextColor(node),\n                    node,\n                })),\n        [nodes, skipRadius, getLabel, getTextColor]\n    )\n\n    // apply extra filtering if provided\n    return useMemo(() => {\n        if (!filter) return labels\n\n        return labels.filter(filter)\n    }, [labels, filter])\n}\n\nexport const useNodeMouseHandlers = <RawDatum>(\n    node: ComputedDatum<RawDatum>,\n    { onMouseEnter, onMouseMove, onMouseLeave, onClick }: MouseHandlers<RawDatum>\n): Partial<\n    Record<'onMouseEnter' | 'onMouseMove' | 'onMouseLeave' | 'onClick', (event: MouseEvent) => void>\n> =>\n    useMemo(\n        () => ({\n            onMouseEnter: onMouseEnter\n                ? (event: MouseEvent) => {\n                      onMouseEnter(node, event)\n                  }\n                : undefined,\n            onMouseMove: onMouseMove\n                ? (event: MouseEvent) => {\n                      onMouseMove(node, event)\n                  }\n                : undefined,\n            onMouseLeave: onMouseLeave\n                ? (event: MouseEvent) => {\n                      onMouseLeave(node, event)\n                  }\n                : undefined,\n            onClick: onClick\n                ? (event: MouseEvent) => {\n                      onClick(node, event)\n                  }\n                : undefined,\n        }),\n        [node, onMouseEnter, onMouseMove, onMouseLeave, onClick]\n    )\n\nexport const useMouseCircleDetection = <RawDatum>({\n    nodes,\n    canvasEl,\n    margin,\n}: {\n    nodes: ComputedDatum<RawDatum>[]\n    canvasEl: MutableRefObject<HTMLCanvasElement | null>\n    margin: {\n        top: number\n        left: number\n    }\n}) => {\n    // we need to sort in order to detect higher nodes first\n    const sortedNodes = useMemo(() => sortBy(nodes, 'height'), [nodes])\n\n    return useCallback(\n        (event: MouseEvent) => {\n            if (!canvasEl.current) return null\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n\n            return sortedNodes.find(node => {\n                const distanceFromNode = getDistance(\n                    node.x,\n                    node.y,\n                    x - margin.left,\n                    y - margin.top\n                )\n                return distanceFromNode <= node.radius\n            })\n        },\n        [canvasEl, margin, sortedNodes]\n    )\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const useCirclePackingLayerContext = <RawDatum>({\n    nodes,\n}: {\n    nodes: ComputedDatum<RawDatum>[]\n}): CirclePackingCustomLayerProps<RawDatum> =>\n    useMemo(\n        () => ({\n            nodes,\n        }),\n        [nodes]\n    )\n","import { OrdinalColorScaleConfig } from '@nivo/colors'\nimport { CirclePackingLayerId } from './types'\nimport { CirclePackingTooltip } from './CirclePackingTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    padding: 0,\n    leavesOnly: false,\n    layers: ['circles', 'labels'] as CirclePackingLayerId[],\n    colors: { scheme: 'nivo' } as OrdinalColorScaleConfig,\n    colorBy: 'depth' as const,\n    inheritColorFromParent: false,\n    childColor: {\n        from: 'color',\n        modifiers: [['darker', 0.3]],\n    },\n    borderWidth: 0,\n    borderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.3]],\n    },\n    defs: [],\n    fill: [],\n    enableLabels: false,\n    label: 'id',\n    labelTextColor: {\n        from: 'color',\n        modifiers: [['darker', 1.6]],\n    },\n    labelsSkipRadius: 8,\n    isInteractive: true,\n    tooltip: CirclePackingTooltip,\n    animate: true,\n    motionConfig: 'gentle',\n    role: 'img',\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const CirclePackingTooltip = <RawDatum,>({\n    id,\n    formattedValue,\n    color,\n}: ComputedDatum<RawDatum>) => (\n    <BasicTooltip id={id} value={formattedValue} enableChip={true} color={color} />\n)\n","import { createElement, useMemo, MouseEvent } from 'react'\nimport * as React from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CircleComponent, MouseHandlers, CirclePackingCommonProps } from './types'\n\n/**\n * A negative radius value is invalid for an SVG circle,\n * this custom interpolation makes sure it's either\n * positive or zero.\n */\nexport const interpolateRadius = (radiusValue: SpringValue<number>) =>\n    to([radiusValue], radius => Math.max(0, radius))\n\ntype CirclesProps<RawDatum> = {\n    nodes: ComputedDatum<RawDatum>[]\n    borderWidth: CirclePackingCommonProps<RawDatum>['borderWidth']\n    borderColor: CirclePackingCommonProps<RawDatum>['borderColor']\n    component: CircleComponent<RawDatum>\n    isInteractive: CirclePackingCommonProps<RawDatum>['isInteractive']\n    tooltip: CirclePackingCommonProps<RawDatum>['tooltip']\n} & MouseHandlers<RawDatum>\n\nconst getTransitionPhases = <RawDatum,>(\n    getBorderColor: (node: ComputedDatum<RawDatum>) => string\n) => ({\n    enter: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n    update: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: node.radius,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 1,\n    }),\n    leave: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n})\n\nexport const Circles = <RawDatum,>({\n    nodes,\n    borderWidth,\n    borderColor,\n    component,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}: CirclesProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseEnter?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseMove?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        }\n    }, [isInteractive, hideTooltip, onMouseLeave])\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            onClick?.(node, event)\n        }\n    }, [isInteractive, onClick])\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const transitionPhases = useMemo(\n        () => getTransitionPhases<RawDatum>(getBorderColor),\n        [getBorderColor]\n    )\n\n    const transition = useTransition<\n        ComputedDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            radius: number\n            color: string\n            borderColor: string\n            opacity: number\n        }\n    >(nodes, {\n        keys: node => node.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, node) => {\n                return React.createElement(component, {\n                    key: node.id,\n                    node,\n                    style: {\n                        ...transitionProps,\n                        radius: interpolateRadius(transitionProps.radius),\n                        borderWidth,\n                    },\n                    onMouseEnter: handleMouseEnter,\n                    onMouseMove: handleMouseMove,\n                    onMouseLeave: handleMouseLeave,\n                    onClick: handleClick,\n                })\n            })}\n        </>\n    )\n}\n","import { animated } from '@react-spring/web'\nimport { CircleProps } from './types'\nimport { useNodeMouseHandlers } from './hooks'\n\nexport const CircleSvg = <RawDatum,>({\n    node,\n    style,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: CircleProps<RawDatum>) => {\n    const handlers = useNodeMouseHandlers<RawDatum>(node, {\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n    })\n\n    return (\n        <animated.circle\n            key={node.id}\n            cx={style.x}\n            cy={style.y}\n            r={style.radius}\n            fill={node.fill || style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            opacity={style.opacity}\n            onMouseEnter={handlers.onMouseEnter}\n            onMouseMove={handlers.onMouseMove}\n            onMouseLeave={handlers.onMouseLeave}\n            onClick={handlers.onClick}\n        />\n    )\n}\n","import { createElement, useMemo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { CirclePackingCommonProps, ComputedDatum, LabelComponent, ComputedLabel } from './types'\nimport { useCirclePackingLabels } from './hooks'\nimport { interpolateRadius } from './Circles'\n\ninterface CirclesProps<RawDatum> {\n    nodes: ComputedDatum<RawDatum>[]\n    label: CirclePackingCommonProps<RawDatum>['label']\n    filter?: CirclePackingCommonProps<RawDatum>['labelsFilter']\n    skipRadius: CirclePackingCommonProps<RawDatum>['labelsSkipRadius']\n    textColor: CirclePackingCommonProps<RawDatum>['labelTextColor']\n    component: LabelComponent<RawDatum>\n}\n\nconst getTransitionPhases = <RawDatum,>() => ({\n    enter: (label: ComputedLabel<RawDatum>) => ({\n        x: label.node.x,\n        y: label.node.y,\n        radius: label.node.radius,\n        textColor: label.textColor,\n        opacity: 0,\n    }),\n    update: (label: ComputedLabel<RawDatum>) => ({\n        x: label.node.x,\n        y: label.node.y,\n        radius: label.node.radius,\n        textColor: label.textColor,\n        opacity: 1,\n    }),\n    leave: (label: ComputedLabel<RawDatum>) => ({\n        x: label.node.x,\n        y: label.node.y,\n        radius: label.node.radius,\n        textColor: label.textColor,\n        opacity: 0,\n    }),\n})\n\nexport const Labels = <RawDatum,>({\n    nodes,\n    label,\n    filter,\n    skipRadius,\n    textColor,\n    component,\n}: CirclesProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const labels = useCirclePackingLabels({\n        nodes,\n        label,\n        filter,\n        skipRadius,\n        textColor,\n    })\n\n    const transitionPhases = useMemo(() => getTransitionPhases<RawDatum>(), [])\n\n    const transition = useTransition<\n        ComputedLabel<RawDatum>,\n        {\n            x: number\n            y: number\n            radius: number\n            textColor: string\n            opacity: number\n        }\n    >(labels, {\n        keys: label => label.node.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, label) => {\n                return createElement(component, {\n                    key: label.node.id,\n                    label: label.label,\n                    style: {\n                        ...transitionProps,\n                        radius: interpolateRadius(transitionProps.radius),\n                    },\n                    node: label.node,\n                })\n            })}\n        </>\n    )\n}\n","import { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { LabelProps } from './types'\n\nexport const LabelSvg = <RawDatum,>({ node, label, style }: LabelProps<RawDatum>) => {\n    const theme = useTheme()\n\n    return (\n        <animated.text\n            key={node.id}\n            x={style.x}\n            y={style.y}\n            textAnchor=\"middle\"\n            dominantBaseline=\"central\"\n            style={{\n                ...theme.labels.text,\n                fill: style.textColor,\n                opacity: style.opacity,\n                pointerEvents: 'none',\n            }}\n        >\n            {label}\n        </animated.text>\n    )\n}\n","import { createElement, Fragment, ReactNode, useMemo } from 'react'\nimport {\n    // @ts-ignore\n    bindDefs,\n    useDimensions,\n    Container,\n    SvgWrapper,\n} from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { CirclePackingLayerId, CirclePackingSvgProps, ComputedDatum } from './types'\nimport { useCirclePacking, useCirclePackingZoom, useCirclePackingLayerContext } from './hooks'\nimport { defaultProps } from './props'\nimport { Circles } from './Circles'\nimport { CircleSvg } from './CircleSvg'\nimport { Labels } from './Labels'\nimport { LabelSvg } from './LabelSvg'\n\ntype InnerCirclePackingProps<RawDatum> = Partial<\n    Omit<\n        CirclePackingSvgProps<RawDatum>,\n        'data' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<CirclePackingSvgProps<RawDatum>, 'data' | 'width' | 'height' | 'isInteractive'>\n\nconst InnerCirclePacking = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    width,\n    height,\n    margin: partialMargin,\n    padding = defaultProps.padding,\n    leavesOnly = defaultProps.leavesOnly,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'color' | 'fill'>\n    >,\n    colorBy = defaultProps.colorBy,\n    inheritColorFromParent = defaultProps.inheritColorFromParent,\n    childColor = defaultProps.childColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    circleComponent = CircleSvg,\n    defs = defaultProps.defs,\n    fill = defaultProps.fill,\n    enableLabels = defaultProps.enableLabels,\n    label = defaultProps.label,\n    labelsFilter,\n    labelsSkipRadius = defaultProps.labelsSkipRadius,\n    labelTextColor = defaultProps.labelTextColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    labelComponent = LabelSvg,\n    layers = defaultProps.layers,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    zoomedId,\n    role = defaultProps.role,\n}: InnerCirclePackingProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const nodes = useCirclePacking<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        leavesOnly,\n        colors,\n        colorBy,\n        inheritColorFromParent,\n        childColor,\n    })\n\n    const zoomedNodes = useCirclePackingZoom<RawDatum>(nodes, zoomedId, innerWidth, innerHeight)\n\n    const boundDefs = useMemo(\n        () => bindDefs(defs, zoomedNodes, fill, { targetKey: 'fill' }),\n        [defs, zoomedNodes, fill]\n    )\n\n    const layerById: Record<CirclePackingLayerId, ReactNode> = {\n        circles: null,\n        labels: null,\n    }\n\n    if (layers.includes('circles')) {\n        layerById.circles = (\n            <Circles<RawDatum>\n                key=\"circles\"\n                nodes={zoomedNodes}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                component={circleComponent}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    if (enableLabels && layers.includes('labels')) {\n        layerById.labels = (\n            <Labels<RawDatum>\n                key=\"labels\"\n                nodes={zoomedNodes}\n                label={label}\n                filter={labelsFilter}\n                skipRadius={labelsSkipRadius}\n                textColor={labelTextColor}\n                component={labelComponent}\n            />\n        )\n    }\n\n    const layerContext = useCirclePackingLayerContext<RawDatum>({\n        nodes,\n    })\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            defs={boundDefs}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (layerById[layer as CirclePackingLayerId] !== undefined) {\n                    return layerById[layer as CirclePackingLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const CirclePacking = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<CirclePackingSvgProps<RawDatum>, 'data' | 'width' | 'height'>> &\n    Pick<CirclePackingSvgProps<RawDatum>, 'data' | 'width' | 'height'>) => (\n    <Container\n        isInteractive={isInteractive}\n        animate={animate}\n        motionConfig={motionConfig}\n        renderWrapper={renderWrapper}\n        theme={theme}\n    >\n        <InnerCirclePacking<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { CirclePackingSvgProps } from './types'\nimport { CirclePacking } from './CirclePacking'\n\ntype ResponsiveCirclePackingProps<RawDatum> = Partial<\n    Omit<CirclePackingSvgProps<RawDatum>, 'data' | 'width' | 'height'>\n> &\n    Pick<CirclePackingSvgProps<RawDatum>, 'data'>\n\nexport const ResponsiveCirclePacking = <RawDatum,>(\n    props: ResponsiveCirclePackingProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <CirclePacking<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { animated, to, SpringValue, Interpolation } from '@react-spring/web'\nimport { CircleProps } from './types'\nimport { useNodeMouseHandlers } from './hooks'\n\nexport const interpolatePosition = (\n    positionValue: SpringValue<number>,\n    radiusValue: Interpolation<number>\n) => to([positionValue, radiusValue], (position, radius) => position - radius)\n\nexport const interpolateSize = (radiusValue: Interpolation<number>) =>\n    to([radiusValue], radius => radius * 2)\n\nexport const interpolateBorderWidth = (borderWidth: number, radiusValue: Interpolation<number>) =>\n    to([radiusValue], radius => Math.min(borderWidth, radius))\n\nexport const CircleHtml = <RawDatum,>({\n    node,\n    style,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: CircleProps<RawDatum>) => {\n    const size = interpolateSize(style.radius)\n\n    const handlers = useNodeMouseHandlers<RawDatum>(node, {\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n    })\n\n    return (\n        <animated.div\n            style={{\n                position: 'absolute',\n                top: interpolatePosition(style.y, style.radius),\n                left: interpolatePosition(style.x, style.radius),\n                height: size,\n                width: size,\n                borderRadius: style.radius,\n                backgroundColor: style.color,\n                borderWidth: interpolateBorderWidth(style.borderWidth, style.radius),\n                borderStyle: 'solid',\n                borderColor: style.borderColor,\n                boxSizing: 'border-box',\n            }}\n            onMouseEnter={handlers.onMouseEnter}\n            onMouseMove={handlers.onMouseMove}\n            onMouseLeave={handlers.onMouseLeave}\n            onClick={handlers.onClick}\n        />\n    )\n}\n","import { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { LabelProps } from './types'\nimport { interpolatePosition, interpolateSize } from './CircleHtml'\n\nexport const LabelHtml = <RawDatum,>({ node, label, style }: LabelProps<RawDatum>) => {\n    const theme = useTheme()\n    const size = interpolateSize(style.radius)\n\n    return (\n        <animated.div\n            key={node.id}\n            style={{\n                ...theme.labels.text,\n                position: 'absolute',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                top: interpolatePosition(style.y, style.radius),\n                left: interpolatePosition(style.x, style.radius),\n                width: size,\n                height: size,\n                color: style.textColor,\n                opacity: style.opacity,\n                pointerEvents: 'none',\n            }}\n        >\n            {label}\n        </animated.div>\n    )\n}\n","import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, useDimensions } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { CirclePackingHtmlProps, CirclePackingLayerId, ComputedDatum } from './types'\nimport { useCirclePacking, useCirclePackingLayerContext, useCirclePackingZoom } from './hooks'\nimport { Circles } from './Circles'\nimport { CircleHtml } from './CircleHtml'\nimport { defaultProps } from './props'\nimport { Labels } from './Labels'\nimport { LabelHtml } from './LabelHtml'\n\ntype InnerCirclePackingHtmlProps<RawDatum> = Partial<\n    Omit<\n        CirclePackingHtmlProps<RawDatum>,\n        'data' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<CirclePackingHtmlProps<RawDatum>, 'data' | 'width' | 'height' | 'isInteractive'>\n\nexport const InnerCirclePackingHtml = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    width,\n    height,\n    margin: partialMargin,\n    padding = defaultProps.padding,\n    leavesOnly = defaultProps.leavesOnly,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'color' | 'fill'>\n    >,\n    colorBy = defaultProps.colorBy,\n    inheritColorFromParent = defaultProps.inheritColorFromParent,\n    childColor = defaultProps.childColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    circleComponent = CircleHtml,\n    enableLabels = defaultProps.enableLabels,\n    label = defaultProps.label,\n    labelsFilter,\n    labelsSkipRadius = defaultProps.labelsSkipRadius,\n    labelTextColor = defaultProps.labelTextColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    labelComponent = LabelHtml,\n    layers = defaultProps.layers,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    zoomedId,\n    role = defaultProps.role,\n}: InnerCirclePackingHtmlProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const nodes = useCirclePacking<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        leavesOnly,\n        colors,\n        colorBy,\n        inheritColorFromParent,\n        childColor,\n    })\n\n    const zoomedNodes = useCirclePackingZoom<RawDatum>(nodes, zoomedId, innerWidth, innerHeight)\n\n    const layerById: Record<CirclePackingLayerId, ReactNode> = {\n        circles: null,\n        labels: null,\n    }\n\n    if (layers.includes('circles')) {\n        layerById.circles = (\n            <Circles<RawDatum>\n                key=\"circles\"\n                nodes={zoomedNodes}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                component={circleComponent}\n                tooltip={tooltip}\n            />\n        )\n    }\n\n    if (enableLabels && layers.includes('labels')) {\n        layerById.labels = (\n            <Labels<RawDatum>\n                key=\"labels\"\n                nodes={zoomedNodes}\n                label={label}\n                filter={labelsFilter}\n                skipRadius={labelsSkipRadius}\n                textColor={labelTextColor}\n                component={labelComponent}\n            />\n        )\n    }\n\n    const layerContext = useCirclePackingLayerContext<RawDatum>({\n        nodes,\n    })\n\n    return (\n        <div\n            role={role}\n            style={{\n                position: 'relative',\n                overflow: 'hidden',\n                width: outerWidth,\n                height: outerHeight,\n            }}\n        >\n            <div\n                style={{\n                    position: 'absolute',\n                    top: margin.top,\n                    left: margin.left,\n                }}\n            >\n                {layers.map((layer, i) => {\n                    if (layerById[layer as CirclePackingLayerId] !== undefined) {\n                        return layerById[layer as CirclePackingLayerId]\n                    }\n\n                    if (typeof layer === 'function') {\n                        return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                    }\n\n                    return null\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport const CirclePackingHtml = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    ...otherProps\n}: Partial<Omit<CirclePackingHtmlProps<RawDatum>, 'data' | 'width' | 'height'>> &\n    Pick<CirclePackingHtmlProps<RawDatum>, 'data' | 'width' | 'height'>) => (\n    <Container\n        isInteractive={isInteractive}\n        animate={animate}\n        motionConfig={motionConfig}\n        theme={theme}\n    >\n        <InnerCirclePackingHtml<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { CirclePackingHtmlProps } from './types'\nimport { CirclePackingHtml } from './CirclePackingHtml'\n\ntype ResponsiveCirclePackingHtmlProps<RawDatum> = Partial<\n    Omit<CirclePackingHtmlProps<RawDatum>, 'data' | 'width' | 'height'>\n> &\n    Pick<CirclePackingHtmlProps<RawDatum>, 'data'>\n\nexport const ResponsiveCirclePackingHtml = <RawDatum,>(\n    props: ResponsiveCirclePackingHtmlProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <CirclePackingHtml<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { useCallback, useEffect, useRef, createElement } from 'react'\nimport * as React from 'react'\nimport { useDimensions, useTheme, Container } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig, useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { CirclePackingCanvasProps, ComputedDatum } from './types'\nimport { defaultProps } from './props'\nimport {\n    useCirclePacking,\n    useCirclePackingZoom,\n    useCirclePackingLabels,\n    useMouseCircleDetection,\n} from './hooks'\n\ntype InnerCirclePackingCanvasProps<RawDatum> = Partial<\n    Omit<\n        CirclePackingCanvasProps<RawDatum>,\n        'data' | 'width' | 'height' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<CirclePackingCanvasProps<RawDatum>, 'data' | 'width' | 'height'>\n\nconst InnerCirclePackingCanvas = <RawDatum,>({\n    data,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    width,\n    height,\n    margin: partialMargin,\n    padding = defaultProps.padding,\n    leavesOnly = defaultProps.leavesOnly,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<\n        Omit<ComputedDatum<RawDatum>, 'color' | 'fill'>\n    >,\n    colorBy = defaultProps.colorBy,\n    inheritColorFromParent = defaultProps.inheritColorFromParent,\n    childColor = defaultProps.childColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    enableLabels = defaultProps.enableLabels,\n    label = defaultProps.label,\n    labelsFilter,\n    labelsSkipRadius = defaultProps.labelsSkipRadius,\n    labelTextColor = defaultProps.labelTextColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    isInteractive,\n    onMouseMove,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    zoomedId,\n    role = defaultProps.role,\n    pixelRatio = defaultProps.pixelRatio,\n}: InnerCirclePackingCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const nodes = useCirclePacking<RawDatum>({\n        data,\n        id,\n        value,\n        valueFormat,\n        width: innerWidth,\n        height: innerHeight,\n        padding,\n        leavesOnly,\n        colors,\n        colorBy,\n        inheritColorFromParent,\n        childColor,\n    })\n\n    const zoomedNodes = useCirclePackingZoom<RawDatum>(nodes, zoomedId, innerWidth, innerHeight)\n\n    const labels = useCirclePackingLabels({\n        nodes: zoomedNodes,\n        label,\n        filter: labelsFilter,\n        skipRadius: labelsSkipRadius,\n        textColor: labelTextColor,\n    })\n\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n\n        zoomedNodes.forEach(node => {\n            if (borderWidth > 0) {\n                ctx.strokeStyle = getBorderColor(node)\n                ctx.lineWidth = borderWidth\n            }\n\n            ctx.beginPath()\n            ctx.arc(node.x, node.y, node.radius, 0, 2 * Math.PI)\n            ctx.fillStyle = node.color\n            ctx.fill()\n\n            if (borderWidth > 0) {\n                ctx.stroke()\n            }\n        })\n\n        if (enableLabels) {\n            ctx.textAlign = 'center'\n            ctx.textBaseline = 'middle'\n            ctx.font = `${theme.labels.text.fontSize}px ${theme.labels.text.fontFamily}`\n\n            labels.forEach(label => {\n                ctx.fillStyle = label.textColor\n                ctx.fillText(`${label.label}`, label.node.x, label.node.y)\n            })\n        }\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        theme,\n        pixelRatio,\n        zoomedNodes,\n        enableLabels,\n        labels,\n        borderWidth,\n        getBorderColor,\n    ])\n\n    const getNodeFromMouseEvent = useMouseCircleDetection<RawDatum>({\n        nodes: zoomedNodes,\n        canvasEl,\n        margin,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                onMouseMove?.(node, event)\n                showTooltipFromEvent(createElement(tooltip, node), event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getNodeFromMouseEvent, showTooltipFromEvent, tooltip, hideTooltip]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n    }, [hideTooltip])\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLCanvasElement>) => {\n            if (!onClick) return\n\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            role={role}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const CirclePackingCanvas = <RawDatum,>({\n    isInteractive = defaultProps.isInteractive,\n    theme,\n    ...otherProps\n}: Partial<Omit<CirclePackingCanvasProps<RawDatum>, 'data' | 'width' | 'height'>> &\n    Pick<CirclePackingCanvasProps<RawDatum>, 'data' | 'width' | 'height'>) => (\n    <Container isInteractive={isInteractive} theme={theme}>\n        <InnerCirclePackingCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { CirclePackingCanvasProps } from './types'\nimport { CirclePackingCanvas } from './CirclePackingCanvas'\n\ntype ResponsiveCirclePackingCanvasProps<RawDatum> = Partial<\n    Omit<CirclePackingCanvasProps<RawDatum>, 'data' | 'width' | 'height'>\n> &\n    Pick<CirclePackingCanvasProps<RawDatum>, 'data'>\n\nexport const ResponsiveCirclePackingCanvas = <RawDatum,>(\n    props: ResponsiveCirclePackingCanvasProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <CirclePackingCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["useCirclePacking","_ref","_hierarchy$value","data","id","value","valueFormat","width","height","padding","leavesOnly","colors","colorBy","inheritColorFromParent","childColor","getId","usePropertyAccessor","getValue","formatValue","useValueFormatter","getColor","useOrdinalColorScale","theme","useTheme","getChildColor","useInheritedColor","clonedData","cloneDeep","hierarchy","d3Hierarchy","sum","packedData","d3Pack","size","pack","nodes","leaves","descendants","sortedNodes","sortBy","total","computedNodes","reduce","acc","descendant","parent","percentage","path","ancestors","map","ancestor","find","node","normalizedNode","formattedValue","toFixed","x","y","radius","r","color","depth","concat","useCirclePackingZoom","zoomedId","useMemo","zoomedNode","_ref2","ratio","Math","min","offsetX","offsetY","_extends","useCirclePackingLabels","_ref3","label","filter","skipRadius","textColor","getLabel","getTextColor","labels","useNodeMouseHandlers","_ref4","onMouseEnter","onMouseMove","onMouseLeave","onClick","event","undefined","useMouseCircleDetection","_ref5","canvasEl","margin","useCallback","current","_getRelativeCursor","getRelativeCursor","getDistance","left","top","useCirclePackingLayerContext","_ref6","defaultProps","layers","scheme","from","modifiers","borderWidth","borderColor","defs","fill","enableLabels","labelTextColor","labelsSkipRadius","isInteractive","tooltip","_jsx","BasicTooltip","enableChip","animate","motionConfig","role","pixelRatio","window","_window$devicePixelRa","devicePixelRatio","interpolateRadius","radiusValue","to","max","Circles","component","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","handleClick","_useMotionConfig","useMotionConfig","springConfig","config","getBorderColor","transitionPhases","enter","opacity","update","leave","getTransitionPhases","transition","useTransition","keys","initial","immediate","_Fragment","children","transitionProps","React","key","style","CircleSvg","handlers","animated","circle","cx","cy","stroke","strokeWidth","Labels","LabelSvg","text","textAnchor","dominantBaseline","pointerEvents","InnerCirclePacking","_ref$id","_ref$value","partialMargin","_ref$padding","_ref$leavesOnly","_ref$colors","_ref$colorBy","_ref$inheritColorFrom","_ref$childColor","_ref$borderWidth","_ref$borderColor","_ref$circleComponent","circleComponent","_ref$defs","_ref$fill","_ref$enableLabels","_ref$label","labelsFilter","_ref$labelsSkipRadius","_ref$labelTextColor","_ref$labelComponent","labelComponent","_ref$layers","_ref$tooltip","_ref$role","_useDimensions","useDimensions","outerWidth","outerHeight","innerWidth","innerHeight","zoomedNodes","boundDefs","bindDefs","targetKey","layerById","circles","includes","layerContext","SvgWrapper","layer","i","Fragment","CirclePacking","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","_objectWithoutPropertiesLoose","_excluded","Container","ResponsiveCirclePacking","props","ResponsiveWrapper","interpolatePosition","positionValue","position","interpolateSize","CircleHtml","div","borderRadius","backgroundColor","borderStyle","boxSizing","LabelHtml","display","justifyContent","alignItems","InnerCirclePackingHtml","overflow","CirclePackingHtml","ResponsiveCirclePackingHtml","InnerCirclePackingCanvas","_ref$pixelRatio","useRef","useEffect","ctx","getContext","scale","fillStyle","background","fillRect","save","translate","forEach","strokeStyle","lineWidth","beginPath","arc","PI","textAlign","textBaseline","font","fontSize","fontFamily","fillText","getNodeFromMouseEvent","handleMouseHover","ref","cursor","CirclePackingCanvas","ResponsiveCirclePackingCanvas"],"mappings":"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"}