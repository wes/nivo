{"version":3,"file":"nivo-express.cjs.js","sources":["../src/memory-storage.ts","../src/index.ts","../src/validation.ts"],"sourcesContent":["import { ChartProps, ChartType } from '@nivo/static'\n\nexport interface StorageEntry<T extends ChartType> {\n    type: T\n    props: ChartProps<T>\n    url: string\n}\n\nconst store: Record<string, StorageEntry<ChartType>> = {}\n\nexport const set = (key: string, value: StorageEntry<ChartType>) => {\n    store[key] = value\n}\n\nexport const get = (key: string): StorageEntry<ChartType> | undefined => {\n    return store[key]\n}\n\nexport const dump = () => store\n","import { Router } from 'express'\nimport * as uuid from 'uuid'\nimport forOwn from 'lodash/forOwn'\nimport { chartsMapping, ChartType, renderChart, samples } from '@nivo/static'\nimport { validate } from './validation'\nimport * as storage from './memory-storage'\n\nexport const nivo: Router = Router()\n\nnivo.get('/', (req, res) => {\n    res.status(200).json({\n        samples: Object.keys(samples).map(sample => {\n            return `${req.protocol}://${req.get('host')}${req.originalUrl}/samples/${sample}.svg`\n        }),\n    })\n})\n\n// @ts-ignore\nforOwn(chartsMapping, ({ schema }, type: ChartType) => {\n    nivo.post(`/charts/${type}`, validate(schema), (req, res) => {\n        // @ts-ignore\n        const props = req.payload\n        const id = uuid.v4()\n        const url = `${req.protocol}://${req.get('host')}/r/${id}`\n\n        storage.set(id, {\n            type,\n            props,\n            url,\n        })\n\n        res.status(201).json({ id, url })\n    })\n})\n\nnivo.get('/r/:id', (req, res) => {\n    const { id } = req.params\n\n    const config = storage.get(req.params.id)\n    if (!config) {\n        return res\n            .set('Content-Type', 'text/plain')\n            .status(404)\n            .send(`no chart found for id \"${id}\"`)\n    }\n\n    // @ts-ignore\n    const rendered = renderChart(config, req.query)\n\n    res.set('Content-Type', 'image/svg+xml').status(200).send(rendered)\n})\n\nforOwn(samples, (config, id) => {\n    nivo.get(`/samples/${id}.svg`, (req, res) => {\n        // @ts-ignore\n        const rendered = renderChart(config, req.query)\n\n        res.set('Content-Type', 'image/svg+xml').status(200).send(rendered)\n    })\n})\n","import { Request, Response, NextFunction } from 'express'\nimport omit from 'lodash/omit'\nimport Joi from 'joi'\n\nexport const validate = (\n    schema: Joi.Schema,\n    options: {\n        omit?: string[]\n    } = {}\n) => {\n    const { omit: omitProps } = options\n\n    return (req: Request, res: Response, next: NextFunction) => {\n        let data = req.body\n        if (omit) {\n            // @ts-ignore\n            data = omit(data, omitProps)\n        }\n\n        try {\n            // @ts-ignore\n            req.payload = schema.validate(data, {\n                abortEarly: true,\n                convert: true,\n            })\n            next()\n        } catch (err: any) {\n            return res.status(400).json({\n                // @ts-ignore\n                errors: err.details.map(({ message, path }) => {\n                    return `${message}${path ? ` (${path})` : ''}`\n                }),\n            })\n        }\n    }\n}\n"],"names":["store","nivo","Router","get","req","res","status","json","samples","Object","keys","map","sample","protocol","originalUrl","forOwn","chartsMapping","_ref","type","schema","post","options","omitProps","omit","next","data","body","payload","validate","abortEarly","convert","err","errors","details","message","path","value","props","id","uuid","v4","url","key","params","config","set","send","rendered","renderChart","query"],"mappings":"oZAQMA,EAAiD,CAAA,ECD1CC,EAAeC,EAAAA,SAE5BD,EAAKE,IAAI,KAAK,SAACC,EAAKC,GAChBA,EAAIC,OAAO,KAAKC,KAAK,CACjBC,QAASC,OAAOC,KAAKF,EAAOA,SAAEG,KAAI,SAAAC,GAC9B,OAAUR,EAAIS,SAAQ,MAAMT,EAAID,IAAI,QAAUC,EAAIU,wBAAuBF,EAAM,WAG3F,IAGAG,EAAOC,EAAaA,eAAE,SAAAC,EAAaC,GAAoB,IAA9BC,EAAMF,EAANE,OACrBlB,EAAKmB,KAAgBF,WAAAA,ECfD,SACpBC,EACAE,QAEC,IAFDA,IAAAA,EAEI,CAAA,GAEJ,IAAcC,EAAcD,EAApBE,KAER,OAAO,SAACnB,EAAcC,EAAemB,GACjC,IAAIC,EAAOrB,EAAIsB,KACXH,IAEAE,EAAOF,EAAKE,EAAMH,IAGtB,IAEIlB,EAAIuB,QAAUR,EAAOS,SAASH,EAAM,CAChCI,YAAY,EACZC,SAAS,IAEbN,GACH,CAAC,MAAOO,GACL,OAAO1B,EAAIC,OAAO,KAAKC,KAAK,CAExByB,OAAQD,EAAIE,QAAQtB,KAAI,SAAAM,GAAuB,IAApBiB,EAAOjB,EAAPiB,QAASC,EAAIlB,EAAJkB,KAChC,OAAUD,GAAUC,EAAYA,KAAAA,MAAU,QAGtD,EAER,CDhBiCP,CAAST,IAAS,SAACf,EAAKC,GAEjD,IDXyB+B,ECWnBC,EAAQjC,EAAIuB,QACZW,EAAKC,EAAKC,KACVC,EAASrC,EAAIS,SAAQ,MAAMT,EAAID,IAAI,cAAamC,EDb7BF,ECeT,CACZlB,KAAAA,EACAmB,MAAAA,EACAI,IAAAA,GDjBRzC,ECcgBsC,GDdHF,ECoBT/B,EAAIC,OAAO,KAAKC,KAAK,CAAE+B,GAAAA,EAAIG,IAAAA,GAC/B,GACJ,IAEAxC,EAAKE,IAAI,UAAU,SAACC,EAAKC,GACrB,IDtBgBqC,ECsBRJ,EAAOlC,EAAIuC,OAAXL,GAEFM,GDxBUF,ECwBWtC,EAAIuC,OAAOL,GDvB/BtC,EAAM0C,ICwBb,IAAKE,EACD,OAAOvC,EACFwC,IAAI,eAAgB,cACpBvC,OAAO,KACPwC,KAA+BR,0BAAAA,OAIxC,IAAMS,EAAWC,EAAWA,YAACJ,EAAQxC,EAAI6C,OAEzC5C,EAAIwC,IAAI,eAAgB,iBAAiBvC,OAAO,KAAKwC,KAAKC,EAC9D,IAEAhC,EAAOP,EAAOA,SAAE,SAACoC,EAAQN,GACrBrC,EAAKE,IAAgBmC,YAAAA,UAAU,SAAClC,EAAKC,GAEjC,IAAM0C,EAAWC,EAAWA,YAACJ,EAAQxC,EAAI6C,OAEzC5C,EAAIwC,IAAI,eAAgB,iBAAiBvC,OAAO,KAAKwC,KAAKC,EAC9D,GACJ"}