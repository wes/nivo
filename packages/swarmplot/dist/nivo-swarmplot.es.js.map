{"version":3,"file":"nivo-swarmplot.es.js","sources":["../src/SwarmPlotTooltip.tsx","../src/props.ts","../src/compute.ts","../src/hooks.ts","../src/Circles.tsx","../src/CircleSvg.tsx","../src/SwarmPlotAnnotations.tsx","../src/SwarmPlot.tsx","../src/ResponsiveSwarmPlot.tsx","../src/SwarmPlotCanvas.tsx","../src/ResponsiveSwarmPlotCanvas.tsx"],"sourcesContent":["import { BasicTooltip } from '@nivo/tooltip'\nimport { ComputedDatum } from './types'\n\nexport const SwarmPlotTooltip = <RawDatum,>({\n    id,\n    formattedValue,\n    color,\n}: ComputedDatum<RawDatum>) => (\n    <BasicTooltip id={id} value={formattedValue} enableChip={true} color={color} />\n)\n","import { ScaleLinearSpec } from '@nivo/scales'\nimport { SwarmPlotLayerId } from './types'\nimport { SwarmPlotTooltip } from './SwarmPlotTooltip'\n\nexport const defaultProps = {\n    id: 'id',\n    value: 'value',\n    valueScale: { type: 'linear', min: 0, max: 'auto' } as ScaleLinearSpec,\n    groupBy: 'group',\n    size: 6,\n    spacing: 2,\n    layout: 'vertical' as const,\n    gap: 0,\n    forceStrength: 1,\n    simulationIterations: 120,\n    colors: { scheme: 'nivo' },\n    colorBy: 'group',\n    borderWidth: 0,\n    borderColor: 'rgba(0, 0, 0, 0)',\n    layers: ['grid', 'axes', 'circles', 'annotations', 'mesh'] as SwarmPlotLayerId[],\n    enableGridX: true,\n    enableGridY: true,\n    axisTop: {},\n    axisRight: {},\n    axisBottom: {},\n    axisLeft: {},\n    isInteractive: true,\n    useMesh: false,\n    debugMesh: false,\n    tooltip: SwarmPlotTooltip,\n    animate: true,\n    motionConfig: 'gentle',\n    annotations: [],\n    role: 'img',\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio ?? 1 : 1,\n}\n","import isNumber from 'lodash/isNumber'\nimport isPlainObject from 'lodash/isPlainObject'\nimport isString from 'lodash/isString'\nimport get from 'lodash/get'\nimport { scaleLinear, ScaleOrdinal, scaleOrdinal } from 'd3-scale'\nimport { forceSimulation, forceX, forceY, forceCollide, ForceX, ForceY } from 'd3-force'\nimport {\n    computeScale,\n    createDateNormalizer,\n    generateSeriesAxis,\n    ScaleLinear,\n    ScaleLinearSpec,\n    ScaleTime,\n    ScaleTimeSpec,\n} from '@nivo/scales'\nimport { ComputedDatum, PreSimulationDatum, SizeSpec, SimulationForces } from './types'\n\nconst getParsedValue = (scaleSpec: ScaleLinearSpec | ScaleTimeSpec) => {\n    if (scaleSpec.type === 'time' && scaleSpec.format !== 'native') {\n        return createDateNormalizer(scaleSpec) as <T>(value: T) => T\n    }\n\n    return <T>(value: T) => value\n}\n\nexport const computeOrdinalScale = ({\n    width,\n    height,\n    axis,\n    groups,\n    gap,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    groups: string[]\n    gap: number\n}) => {\n    if (!Array.isArray(groups) || groups.length === 0) {\n        throw new Error(`'groups' should be an array containing at least one item`)\n    }\n\n    const groupCount = groups.length\n\n    let groupSize: number\n    if (axis === 'x') {\n        groupSize = (height - gap * (groupCount - 1)) / groupCount\n    } else if (axis === 'y') {\n        groupSize = (width - gap * (groupCount - 1)) / groupCount\n    }\n\n    const range = groups.map((_, i) => i * (groupSize + gap) + groupSize / 2)\n\n    return scaleOrdinal(range).domain(groups)\n}\n\nexport const computeValueScale = <RawDatum>({\n    width,\n    height,\n    axis,\n    getValue,\n    scale,\n    data,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    getValue: (datum: RawDatum) => number | Date\n    scale: ScaleLinearSpec | ScaleTimeSpec\n    data: RawDatum[]\n}) => {\n    const values = data.map(getValue)\n\n    if (scale.type === 'time') {\n        const series = [\n            { data: values.map(value => ({ data: { x: null, y: null, [axis]: value } })) },\n        ]\n        const axes = generateSeriesAxis(series, axis, scale)\n\n        return computeScale(scale, axes, axis === 'x' ? width : height, axis) as ScaleTime<\n            Date | string\n        >\n    }\n\n    const min = Math.min(...(values as number[]))\n    const max = Math.max(...(values as number[]))\n\n    return computeScale(\n        scale,\n        { all: values, min, max },\n        axis === 'x' ? width : height,\n        axis\n    ) as ScaleLinear<number>\n}\n\nexport const getSizeGenerator = <RawDatum>(size: SizeSpec<RawDatum>) => {\n    // user defined size function\n    if (typeof size === 'function') {\n        return size\n    }\n\n    // static size\n    if (isNumber(size)) {\n        return () => size\n    }\n\n    // dynamic size based on config\n    if (isPlainObject(size)) {\n        if (!isString(size.key)) {\n            throw new Error(\n                'Size is invalid, key should be a string pointing to the property to use to determine node size'\n            )\n        }\n        if (!Array.isArray(size.values) || size.values.length !== 2) {\n            throw new Error(\n                'Size is invalid, values spec should be an array containing two values, min and max'\n            )\n        }\n        if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n            throw new Error(\n                'Size is invalid, sizes spec should be an array containing two values, min and max'\n            )\n        }\n\n        const sizeScale = scaleLinear()\n            .domain([size.values[0], size.values[1]])\n            .range([size.sizes[0], size.sizes[1]])\n\n        return (d: RawDatum) => sizeScale(get(d, size.key))\n    }\n\n    throw new Error('Size is invalid, it should be either a function, a number or an object')\n}\n\nexport const computeForces = <RawDatum>({\n    axis,\n    valueScale,\n    ordinalScale,\n    spacing,\n    forceStrength,\n}: {\n    axis: 'x' | 'y'\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    ordinalScale: ScaleOrdinal<string, number>\n    spacing: number\n    forceStrength: number\n}): SimulationForces<RawDatum> => {\n    const collisionForce = forceCollide<PreSimulationDatum<RawDatum>>(d => d.size / 2 + spacing / 2)\n\n    let xForce: ForceX<PreSimulationDatum<RawDatum>>\n    let yForce: ForceY<PreSimulationDatum<RawDatum>>\n    if (axis === 'x') {\n        xForce = forceX<PreSimulationDatum<RawDatum>>(d => valueScale(d.value)).strength(\n            forceStrength\n        )\n        yForce = forceY<PreSimulationDatum<RawDatum>>(d => ordinalScale(d.group))\n    } else if (axis === 'y') {\n        xForce = forceX<PreSimulationDatum<RawDatum>>(d => ordinalScale(d.group))\n        yForce = forceY<PreSimulationDatum<RawDatum>>(d => valueScale(d.value)).strength(\n            forceStrength\n        )\n    } else {\n        throw new Error(`Invalid axis provided: ${axis}`)\n    }\n\n    return { x: xForce, y: yForce, collision: collisionForce }\n}\n\nexport const computeNodes = <RawDatum>({\n    data,\n    getId,\n    layout,\n    getValue,\n    valueScale,\n    getGroup,\n    ordinalScale,\n    getSize,\n    forces,\n    simulationIterations,\n    valueScaleConfig,\n}: {\n    data: RawDatum[]\n    getId: (datum: RawDatum) => string\n    layout: 'vertical' | 'horizontal'\n    getValue: (datum: RawDatum) => number | Date\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    getGroup: (datum: RawDatum) => string\n    ordinalScale: ScaleOrdinal<string, number>\n    getSize: (datum: RawDatum) => number\n    forces: SimulationForces<RawDatum>\n    simulationIterations: number\n    valueScaleConfig: ScaleLinearSpec | ScaleTimeSpec\n}) => {\n    const config = {\n        horizontal: ['x', 'y'],\n        vertical: ['y', 'x'],\n    }\n\n    const parseValue = getParsedValue(valueScaleConfig)\n\n    const simulatedNodes: PreSimulationDatum<RawDatum>[] = data.map(d => ({\n        id: getId(d),\n        group: getGroup(d),\n        value: parseValue(getValue(d)),\n        size: getSize(d),\n        data: { ...d },\n    }))\n\n    const simulation = forceSimulation<PreSimulationDatum<RawDatum>>(simulatedNodes)\n        .force('x', forces.x)\n        .force('y', forces.y)\n        .force('collide', forces.collision)\n        .stop()\n\n    simulation.tick(simulationIterations)\n\n    return {\n        [`${config[layout][0]}Scale`]: valueScale,\n        [`${config[layout][1]}Scale`]: ordinalScale,\n        nodes: simulation.nodes() as ComputedDatum<RawDatum>[],\n    }\n}\n","import { useCallback, useMemo, MouseEvent } from 'react'\nimport { ScaleOrdinal } from 'd3-scale'\nimport { usePropertyAccessor, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { AnnotationMatcher, useAnnotations } from '@nivo/annotations'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ScaleLinear, ScaleLinearSpec, ScaleTime, ScaleTimeSpec } from '@nivo/scales'\nimport {\n    computeValueScale,\n    computeOrdinalScale,\n    getSizeGenerator,\n    computeForces,\n    computeNodes,\n} from './compute'\nimport {\n    SwarmPlotCommonProps,\n    ComputedDatum,\n    SizeSpec,\n    SwarmPlotCustomLayerProps,\n    MouseHandlers,\n} from './types'\n\nexport const useValueScale = <RawDatum>({\n    width,\n    height,\n    axis,\n    getValue,\n    scale,\n    data,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    getValue: (datum: RawDatum) => number | Date\n    scale: ScaleLinearSpec | ScaleTimeSpec\n    data: RawDatum[]\n}) =>\n    useMemo(\n        () =>\n            computeValueScale<RawDatum>({\n                width,\n                height,\n                axis,\n                getValue,\n                scale,\n                data,\n            }),\n        [width, height, axis, getValue, scale, data]\n    )\n\nexport const useOrdinalScale = ({\n    width,\n    height,\n    axis,\n    groups,\n    gap,\n}: {\n    width: number\n    height: number\n    axis: 'x' | 'y'\n    groups: string[]\n    gap: number\n}) =>\n    useMemo(\n        () => computeOrdinalScale({ width, height, axis, groups, gap }),\n        [width, height, axis, groups, gap]\n    )\n\nconst useSize = <RawDatum>(size: SizeSpec<RawDatum>) =>\n    useMemo(() => getSizeGenerator<RawDatum>(size), [size])\n\nexport const useForces = <RawDatum>({\n    axis,\n    valueScale,\n    ordinalScale,\n    spacing,\n    forceStrength,\n}: {\n    axis: 'x' | 'y'\n    valueScale: ScaleLinear<number> | ScaleTime<string | Date>\n    ordinalScale: ScaleOrdinal<string, number>\n    spacing: number\n    forceStrength: number\n}) =>\n    useMemo(\n        () =>\n            computeForces<RawDatum>({\n                axis,\n                valueScale,\n                ordinalScale,\n                spacing,\n                forceStrength,\n            }),\n        [axis, valueScale, ordinalScale, spacing, forceStrength]\n    )\n\nexport const useSwarmPlot = <RawDatum>({\n    data,\n    width,\n    height,\n    id,\n    value,\n    valueFormat,\n    valueScale: valueScaleConfig,\n    groups,\n    groupBy,\n    size,\n    spacing,\n    layout,\n    gap,\n    forceStrength,\n    simulationIterations,\n    colors,\n    colorBy,\n}: {\n    data: RawDatum[]\n    width: number\n    height: number\n    id: SwarmPlotCommonProps<RawDatum>['id']\n    value: SwarmPlotCommonProps<RawDatum>['value']\n    valueScale: SwarmPlotCommonProps<RawDatum>['valueScale']\n    valueFormat?: SwarmPlotCommonProps<RawDatum>['valueFormat']\n    groups: SwarmPlotCommonProps<RawDatum>['groups']\n    groupBy: SwarmPlotCommonProps<RawDatum>['groupBy']\n    size: SwarmPlotCommonProps<RawDatum>['size']\n    spacing: SwarmPlotCommonProps<RawDatum>['spacing']\n    layout: SwarmPlotCommonProps<RawDatum>['layout']\n    gap: SwarmPlotCommonProps<RawDatum>['gap']\n    forceStrength: SwarmPlotCommonProps<RawDatum>['forceStrength']\n    simulationIterations: SwarmPlotCommonProps<RawDatum>['simulationIterations']\n    colors: SwarmPlotCommonProps<RawDatum>['colors']\n    colorBy: SwarmPlotCommonProps<RawDatum>['colorBy']\n}) => {\n    const axis = layout === 'horizontal' ? 'x' : 'y'\n\n    const getId = usePropertyAccessor<RawDatum, string>(id)\n    const getValue = usePropertyAccessor(value)\n    const formatValue = useValueFormatter(valueFormat)\n    const getGroup = usePropertyAccessor<RawDatum, string>(groupBy)\n    const getSize = useSize<RawDatum>(size)\n    const getColorId = usePropertyAccessor<Omit<ComputedDatum<RawDatum>, 'color'>, string>(colorBy)\n    const getColor = useOrdinalColorScale<Omit<ComputedDatum<RawDatum>, 'color'>>(\n        colors,\n        getColorId\n    )\n\n    const valueScale = useValueScale({\n        width,\n        height,\n        axis,\n        getValue,\n        scale: valueScaleConfig,\n        data,\n    })\n\n    const ordinalScale = useOrdinalScale({\n        width,\n        height,\n        axis,\n        groups,\n        gap,\n    })\n\n    const forces = useForces<RawDatum>({\n        axis,\n        valueScale,\n        ordinalScale,\n        spacing,\n        forceStrength,\n    })\n\n    const { nodes, xScale, yScale } = useMemo(\n        () =>\n            computeNodes<RawDatum>({\n                data,\n                getId,\n                layout,\n                getValue,\n                valueScale,\n                getGroup,\n                ordinalScale,\n                getSize,\n                forces,\n                simulationIterations,\n                valueScaleConfig,\n            }),\n        [\n            data,\n            getId,\n            layout,\n            getValue,\n            valueScale,\n            getGroup,\n            ordinalScale,\n            getSize,\n            forces,\n            simulationIterations,\n            valueScaleConfig,\n        ]\n    )\n\n    const augmentedNodes: ComputedDatum<RawDatum>[] = useMemo(\n        () =>\n            nodes.map(node => ({\n                ...node,\n                formattedValue: formatValue(node.value),\n                color: getColor(node),\n            })),\n        [nodes, formatValue, getColor]\n    )\n\n    return {\n        nodes: augmentedNodes,\n        xScale,\n        yScale,\n        getColor,\n    }\n}\n\nexport const useBorderWidth = <RawDatum>(\n    borderWidth: SwarmPlotCommonProps<RawDatum>['borderWidth']\n) =>\n    useMemo(() => {\n        if (typeof borderWidth === 'function') return borderWidth\n        return () => borderWidth\n    }, [borderWidth])\n\nexport const useNodeMouseHandlers = <RawDatum>({\n    isInteractive,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    onMouseMove,\n    tooltip,\n}: Pick<SwarmPlotCommonProps<RawDatum>, 'isInteractive' | 'tooltip'> & MouseHandlers<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const mouseEnterHandler = useCallback(\n        (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            if (!isInteractive) return\n\n            showTooltipFromEvent(tooltip(node), event)\n            onMouseEnter?.(node, event)\n        },\n        [isInteractive, onMouseEnter, showTooltipFromEvent, tooltip]\n    )\n\n    const mouseMoveHandler = useCallback(\n        (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            if (!isInteractive) return\n\n            showTooltipFromEvent(tooltip(node), event)\n            onMouseMove?.(node, event)\n        },\n        [isInteractive, onMouseMove, showTooltipFromEvent, tooltip]\n    )\n\n    const mouseLeaveHandler = useCallback(\n        (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            if (!isInteractive) return\n\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [isInteractive, hideTooltip, onMouseLeave]\n    )\n\n    const clickHandler = useCallback(\n        (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            if (!isInteractive) return\n\n            onClick?.(node, event)\n        },\n        [isInteractive, onClick]\n    )\n\n    return {\n        onMouseEnter: mouseEnterHandler,\n        onMouseMove: mouseMoveHandler,\n        onMouseLeave: mouseLeaveHandler,\n        onClick: clickHandler,\n    }\n}\n\nconst getNodeAnnotationPosition = (node: ComputedDatum<unknown>) => ({\n    x: node.x,\n    y: node.y,\n})\n\nconst getNodeAnnotationDimensions = (node: ComputedDatum<unknown>) => ({\n    size: node.size,\n    width: node.size,\n    height: node.size,\n})\n\nexport const useSwarmPlotAnnotations = <RawDatum>(\n    nodes: ComputedDatum<RawDatum>[],\n    annotations: AnnotationMatcher<ComputedDatum<RawDatum>>[]\n) =>\n    useAnnotations<ComputedDatum<RawDatum>>({\n        data: nodes,\n        annotations,\n        getPosition: getNodeAnnotationPosition,\n        getDimensions: getNodeAnnotationDimensions,\n    })\n\nexport const useSwarmPlotLayerContext = <\n    RawDatum,\n    Scale extends\n        | ScaleLinear<number>\n        | ScaleTime<string | Date>\n        | ScaleOrdinal<string, number, never>\n>({\n    nodes,\n    xScale,\n    yScale,\n    innerWidth,\n    innerHeight,\n    outerWidth,\n    outerHeight,\n    margin,\n}: SwarmPlotCustomLayerProps<RawDatum, Scale>): SwarmPlotCustomLayerProps<RawDatum, Scale> =>\n    useMemo(\n        () => ({\n            nodes,\n            xScale,\n            yScale,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n            margin,\n        }),\n        [nodes, xScale, yScale, innerWidth, innerHeight, outerWidth, outerHeight, margin]\n    )\n","import { createElement, useMemo, MouseEvent } from 'react'\nimport * as React from 'react'\nimport { useTransition, to, SpringValue } from '@react-spring/web'\nimport { useMotionConfig, useTheme } from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { useTooltip } from '@nivo/tooltip'\nimport { ComputedDatum, CircleComponent, MouseHandlers, SwarmPlotCommonProps } from './types'\nimport { useBorderWidth } from './hooks'\n\n/**\n * A negative radius value is invalid for an SVG circle,\n * this custom interpolation makes sure it's either\n * positive or zero.\n */\nexport const interpolateRadius = (radiusValue: SpringValue<number>) =>\n    to([radiusValue], radius => Math.max(0, radius))\n\ntype CirclesProps<RawDatum> = {\n    nodes: ComputedDatum<RawDatum>[]\n    borderWidth: SwarmPlotCommonProps<RawDatum>['borderWidth']\n    borderColor: SwarmPlotCommonProps<RawDatum>['borderColor']\n    component: CircleComponent<RawDatum>\n    isInteractive: SwarmPlotCommonProps<RawDatum>['isInteractive']\n    tooltip: SwarmPlotCommonProps<RawDatum>['tooltip']\n} & MouseHandlers<RawDatum>\n\nconst getTransitionPhases = <RawDatum,>(\n    getBorderColor: (node: ComputedDatum<RawDatum>) => string\n) => ({\n    enter: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n    update: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: node.size / 2,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 1,\n    }),\n    leave: (node: ComputedDatum<RawDatum>) => ({\n        x: node.x,\n        y: node.y,\n        radius: 0,\n        color: node.color,\n        borderColor: getBorderColor(node),\n        opacity: 0,\n    }),\n})\n\nexport const Circles = <RawDatum,>({\n    nodes,\n    borderWidth,\n    borderColor,\n    component,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n}: CirclesProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseEnter?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseEnter])\n\n    const handleMouseMove = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n            onMouseMove?.(node, event)\n        }\n    }, [isInteractive, showTooltipFromEvent, tooltip, onMouseMove])\n\n    const handleMouseLeave = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        }\n    }, [isInteractive, hideTooltip, onMouseLeave])\n\n    const handleClick = useMemo(() => {\n        if (!isInteractive) return undefined\n\n        return (node: ComputedDatum<RawDatum>, event: MouseEvent) => {\n            onClick?.(node, event)\n        }\n    }, [isInteractive, onClick])\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const theme = useTheme()\n    const getBorderWidth = useBorderWidth<RawDatum>(borderWidth)\n    const getBorderColor = useInheritedColor<ComputedDatum<RawDatum>>(borderColor, theme)\n\n    const transitionPhases = useMemo(\n        () => getTransitionPhases<RawDatum>(getBorderColor),\n        [getBorderColor]\n    )\n\n    const transition = useTransition<\n        ComputedDatum<RawDatum>,\n        {\n            x: number\n            y: number\n            radius: number\n            color: string\n            borderColor: string\n            opacity: number\n        }\n    >(nodes, {\n        keys: node => node.id,\n        initial: transitionPhases.update,\n        from: transitionPhases.enter,\n        enter: transitionPhases.update,\n        update: transitionPhases.update,\n        leave: transitionPhases.leave,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <>\n            {transition((transitionProps, node) => {\n                return React.createElement(component, {\n                    key: node.id,\n                    node,\n                    style: {\n                        ...transitionProps,\n                        radius: interpolateRadius(transitionProps.radius),\n                        borderWidth: getBorderWidth(node),\n                    },\n                    onMouseEnter: handleMouseEnter,\n                    onMouseMove: handleMouseMove,\n                    onMouseLeave: handleMouseLeave,\n                    onClick: handleClick,\n                })\n            })}\n        </>\n    )\n}\n","import { animated } from '@react-spring/web'\nimport { CircleProps } from './types'\n\nexport const CircleSvg = <RawDatum,>({\n    node,\n    style,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: CircleProps<RawDatum>) => {\n    return (\n        <animated.circle\n            key={node.id}\n            cx={style.x}\n            cy={style.y}\n            r={style.radius}\n            fill={style.color}\n            stroke={style.borderColor}\n            strokeWidth={style.borderWidth}\n            opacity={style.opacity}\n            onMouseEnter={event => onMouseEnter?.(node, event)}\n            onMouseMove={event => onMouseMove?.(node, event)}\n            onMouseLeave={event => onMouseLeave?.(node, event)}\n            onClick={event => onClick?.(node, event)}\n        />\n    )\n}\n","import { Annotation } from '@nivo/annotations'\nimport { ComputedDatum, SwarmPlotSvgProps } from './types'\nimport { useSwarmPlotAnnotations } from './hooks'\n\nexport const SwarmPlotAnnotations = <RawDatum,>({\n    nodes,\n    annotations,\n}: {\n    nodes: ComputedDatum<RawDatum>[]\n    annotations: SwarmPlotSvgProps<RawDatum>['annotations']\n}) => {\n    const boundAnnotations = useSwarmPlotAnnotations<RawDatum>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { ReactNode, Fragment, createElement } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig } from '@nivo/colors'\nimport { AnyScale } from '@nivo/scales'\nimport { Axes, Grid } from '@nivo/axes'\nimport { Mesh } from '@nivo/voronoi'\nimport { ComputedDatum, SwarmPlotLayerId, SwarmPlotSvgProps } from './types'\nimport { defaultProps } from './props'\nimport { useSwarmPlot, useSwarmPlotLayerContext, useNodeMouseHandlers } from './hooks'\nimport { Circles } from './Circles'\nimport { CircleSvg } from './CircleSvg'\nimport { SwarmPlotAnnotations } from './SwarmPlotAnnotations'\n\ntype InnerSwarmPlotProps<RawDatum> = Partial<\n    Omit<\n        SwarmPlotSvgProps<RawDatum>,\n        'data' | 'groups' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height' | 'isInteractive'>\n\nconst InnerSwarmPlot = <RawDatum,>({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueScale = defaultProps.valueScale,\n    valueFormat,\n    groups,\n    groupBy = defaultProps.groupBy,\n    size = defaultProps.size,\n    forceStrength = defaultProps.forceStrength,\n    simulationIterations = defaultProps.simulationIterations,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<Omit<ComputedDatum<RawDatum>, 'color'>>,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    borderWidth = defaultProps.borderWidth,\n    layout = defaultProps.layout,\n    spacing = defaultProps.spacing,\n    gap = defaultProps.gap,\n    layers = defaultProps.layers,\n    circleComponent = CircleSvg,\n    useMesh = defaultProps.useMesh,\n    debugMesh = defaultProps.debugMesh,\n    enableGridX = defaultProps.enableGridX,\n    gridXValues,\n    enableGridY = defaultProps.enableGridY,\n    gridYValues,\n    axisTop = defaultProps.axisTop,\n    axisRight = defaultProps.axisRight,\n    axisBottom = defaultProps.axisBottom,\n    axisLeft = defaultProps.axisLeft,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    annotations = defaultProps.annotations,\n    role = defaultProps.role,\n}: InnerSwarmPlotProps<RawDatum>) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, ...props } = useSwarmPlot<RawDatum>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        id,\n        value,\n        valueFormat,\n        valueScale,\n        groups,\n        groupBy,\n        size,\n        spacing,\n        layout,\n        gap,\n        colors,\n        colorBy,\n        forceStrength,\n        simulationIterations,\n    })\n\n    const xScale = props.xScale as Exclude<typeof props.xScale, ComputedDatum<RawDatum>[]>\n    const yScale = props.yScale as Exclude<typeof props.yScale, ComputedDatum<RawDatum>[]>\n\n    const handlers = useNodeMouseHandlers({\n        isInteractive,\n        onClick,\n        onMouseEnter,\n        onMouseLeave,\n        onMouseMove,\n        tooltip,\n    })\n\n    const layerById: Record<SwarmPlotLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        circles: null,\n        annotations: null,\n        mesh: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? (xScale as AnyScale) : null}\n                xValues={gridXValues}\n                yScale={enableGridY ? (yScale as AnyScale) : null}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale as AnyScale}\n                yScale={yScale as AnyScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop ?? undefined}\n                right={axisRight ?? undefined}\n                bottom={axisBottom ?? undefined}\n                left={axisLeft ?? undefined}\n            />\n        )\n    }\n\n    if (layers.includes('circles')) {\n        layerById.circles = (\n            <Circles<RawDatum>\n                key=\"circles\"\n                nodes={nodes}\n                borderWidth={borderWidth}\n                borderColor={borderColor}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                component={circleComponent}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <SwarmPlotAnnotations<RawDatum>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    if (isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={handlers.onMouseEnter}\n                onMouseMove={handlers.onMouseMove}\n                onMouseLeave={handlers.onMouseLeave}\n                onClick={handlers.onClick}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    const layerContext = useSwarmPlotLayerContext({\n        nodes,\n        xScale,\n        yScale,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin,\n    })\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (layerById[layer as SwarmPlotLayerId] !== undefined) {\n                    return layerById[layer as SwarmPlotLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const SwarmPlot = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerSwarmPlot<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { SwarmPlotSvgProps } from './types'\nimport { SwarmPlot } from './SwarmPlot'\n\ntype ResponsiveSwarmPlotProps<RawDatum> = Partial<\n    Omit<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>\n> &\n    Pick<SwarmPlotSvgProps<RawDatum>, 'data' | 'groups'>\n\nexport const ResponsiveSwarmPlot = <RawDatum,>(props: ResponsiveSwarmPlotProps<RawDatum>) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <SwarmPlot<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n","import { createElement, useCallback, useEffect, useRef, useState } from 'react'\nimport * as React from 'react'\nimport isNumber from 'lodash/isNumber'\nimport { Container, getRelativeCursor, isCursorInRect, useDimensions, useTheme } from '@nivo/core'\nimport { InheritedColorConfig, OrdinalColorScaleConfig, useInheritedColor } from '@nivo/colors'\nimport { AnyScale } from '@nivo/scales'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { ComputedDatum, SwarmPlotCanvasProps } from './types'\nimport { defaultProps } from './props'\nimport { useSwarmPlot } from './hooks'\n\nexport const renderCircleDefault = <RawDatum,>(\n    ctx: CanvasRenderingContext2D,\n    {\n        node,\n        getBorderWidth,\n        getBorderColor,\n    }: {\n        node: ComputedDatum<RawDatum>\n        getBorderWidth: (node: ComputedDatum<RawDatum>) => number\n        getBorderColor: (node: ComputedDatum<RawDatum>) => string\n    }\n) => {\n    const nodeBorderWidth = getBorderWidth(node)\n    if (nodeBorderWidth > 0) {\n        ctx.strokeStyle = getBorderColor(node)\n        ctx.lineWidth = nodeBorderWidth\n    }\n\n    ctx.beginPath()\n    ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n    ctx.fillStyle = node.color\n    ctx.fill()\n\n    if (nodeBorderWidth > 0) {\n        ctx.stroke()\n    }\n}\n\ntype InnerSwarmCanvasPlotProps<RawDatum> = Partial<\n    Omit<\n        SwarmPlotCanvasProps<RawDatum>,\n        'data' | 'groups' | 'width' | 'height' | 'isInteractive' | 'animate' | 'motionConfig'\n    >\n> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height' | 'isInteractive'>\n\nexport const InnerSwarmPlotCanvas = <RawDatum,>({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    id = defaultProps.id,\n    value = defaultProps.value,\n    valueFormat,\n    valueScale = defaultProps.valueScale,\n    groups,\n    groupBy = defaultProps.groupBy,\n    size = defaultProps.size,\n    forceStrength = defaultProps.forceStrength,\n    simulationIterations = defaultProps.simulationIterations,\n    colors = defaultProps.colors as OrdinalColorScaleConfig<Omit<ComputedDatum<RawDatum>, 'color'>>,\n    colorBy = defaultProps.colorBy,\n    borderColor = defaultProps.borderColor as InheritedColorConfig<ComputedDatum<RawDatum>>,\n    layout = defaultProps.layout,\n    spacing = defaultProps.spacing,\n    gap = defaultProps.gap,\n    layers = defaultProps.layers,\n    renderCircle = renderCircleDefault,\n    debugMesh = defaultProps.debugMesh,\n    enableGridX,\n    gridXValues,\n    enableGridY,\n    gridYValues,\n    axisTop = defaultProps.axisTop,\n    axisRight = defaultProps.axisRight,\n    axisBottom = defaultProps.axisBottom,\n    axisLeft = defaultProps.axisLeft,\n    isInteractive,\n    onMouseMove,\n    onClick,\n    tooltip = defaultProps.tooltip,\n    role = defaultProps.role,\n    pixelRatio = defaultProps.pixelRatio,\n}: InnerSwarmCanvasPlotProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState<ComputedDatum<RawDatum> | null>(null)\n\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { nodes, ...scales } = useSwarmPlot<RawDatum>({\n        width: innerWidth,\n        height: innerHeight,\n        data,\n        id,\n        value,\n        valueFormat,\n        valueScale,\n        groups,\n        groupBy,\n        size,\n        spacing,\n        layout,\n        gap,\n        colors,\n        colorBy,\n        forceStrength,\n        simulationIterations,\n    })\n\n    const { xScale, yScale } = scales as Record<'xScale' | 'yScale', AnyScale>\n\n    const { delaunay, voronoi } = useVoronoiMesh<ComputedDatum<RawDatum>>({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const getBorderColor = useInheritedColor(borderColor, theme)\n    const getBorderWidth = () => 1\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        if (!ctx) return\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n\n        ctx.save()\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (\n                layer === 'grid' &&\n                isNumber(theme.grid.line.strokeWidth) &&\n                theme.grid.line.strokeWidth > 0\n            ) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'circles') {\n                nodes.forEach(node => {\n                    renderCircle(ctx, {\n                        node,\n                        getBorderWidth,\n                        getBorderColor,\n                    })\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh && voronoi) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentNode) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentNode.index)\n                }\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        innerWidth,\n        innerHeight,\n        pixelRatio,\n        margin,\n        theme,\n        layers,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        voronoi,\n        debugMesh,\n        currentNode,\n        nodes,\n        renderCircle,\n        getBorderWidth,\n        getBorderColor,\n    ])\n\n    const getNodeFromMouseEvent = useCallback(\n        (event: React.MouseEvent) => {\n            if (!canvasEl.current) {\n                return null\n            }\n\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) {\n                return null\n            }\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay, nodes]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const showNodeTooltip = useCallback(\n        (node: ComputedDatum<RawDatum>, event: React.MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, node), event)\n        },\n        [showTooltipFromEvent, tooltip]\n    )\n\n    const handleMouseHover = useCallback(\n        (event: React.MouseEvent) => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                onMouseMove?.(node, event)\n                showNodeTooltip(node, event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getNodeFromMouseEvent, setCurrentNode, onMouseMove, showNodeTooltip, hideTooltip]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setCurrentNode(null)\n    }, [hideTooltip, setCurrentNode])\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent) => {\n            const node = getNodeFromMouseEvent(event)\n            if (node) {\n                onClick?.(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            role={role}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const SwarmPlotCanvas = <RawDatum,>({\n    theme,\n    isInteractive = defaultProps.isInteractive,\n    animate = defaultProps.animate,\n    motionConfig = defaultProps.motionConfig,\n    renderWrapper,\n    ...otherProps\n}: Partial<Omit<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>) => (\n    <Container {...{ isInteractive, animate, motionConfig, theme, renderWrapper }}>\n        <InnerSwarmPlotCanvas<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { SwarmPlotCanvasProps } from './types'\nimport { SwarmPlotCanvas } from './SwarmPlotCanvas'\n\ntype ResponsiveSwarmPlotCanvasProps<RawDatum> = Partial<\n    Omit<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups' | 'width' | 'height'>\n> &\n    Pick<SwarmPlotCanvasProps<RawDatum>, 'data' | 'groups'>\n\nexport const ResponsiveSwarmPlotCanvas = <RawDatum,>(\n    props: ResponsiveSwarmPlotCanvasProps<RawDatum>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <SwarmPlotCanvas<RawDatum> width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n"],"names":["SwarmPlotTooltip","_ref","id","formattedValue","color","_jsx","BasicTooltip","value","enableChip","defaultProps","valueScale","type","min","max","groupBy","size","spacing","layout","gap","forceStrength","simulationIterations","colors","scheme","colorBy","borderWidth","borderColor","layers","enableGridX","enableGridY","axisTop","axisRight","axisBottom","axisLeft","isInteractive","useMesh","debugMesh","tooltip","animate","motionConfig","annotations","role","pixelRatio","window","_window$devicePixelRa","devicePixelRatio","computeOrdinalScale","width","height","axis","groups","Array","isArray","length","Error","groupSize","groupCount","range","map","_","i","scaleOrdinal","domain","computeValueScale","_ref2","getValue","scale","values","data","series","_data","x","y","axes","generateSeriesAxis","computeScale","Math","apply","all","getSizeGenerator","isNumber","isPlainObject","isString","key","sizes","sizeScale","scaleLinear","d","get","computeForces","_ref3","xForce","yForce","ordinalScale","collisionForce","forceCollide","forceX","strength","forceY","group","collision","computeNodes","_ref4","_ref5","scaleSpec","getId","getGroup","getSize","forces","valueScaleConfig","config","horizontal","vertical","parseValue","format","createDateNormalizer","simulatedNodes","_extends","simulation","forceSimulation","force","stop","tick","nodes","useValueScale","useMemo","useOrdinalScale","useForces","useSwarmPlot","valueFormat","usePropertyAccessor","formatValue","useValueFormatter","useSize","getColorId","getColor","useOrdinalColorScale","_useMemo","xScale","yScale","node","useBorderWidth","useNodeMouseHandlers","onClick","onMouseEnter","onMouseLeave","onMouseMove","_useTooltip","useTooltip","showTooltipFromEvent","hideTooltip","useCallback","event","getNodeAnnotationPosition","getNodeAnnotationDimensions","useSwarmPlotAnnotations","useAnnotations","getPosition","getDimensions","useSwarmPlotLayerContext","_ref6","innerWidth","innerHeight","outerWidth","outerHeight","margin","Circles","component","handleMouseEnter","createElement","handleMouseMove","handleMouseLeave","handleClick","_useMotionConfig","useMotionConfig","springConfig","theme","useTheme","getBorderWidth","getBorderColor","useInheritedColor","transitionPhases","enter","radius","opacity","update","leave","getTransitionPhases","transition","useTransition","keys","initial","from","immediate","_Fragment","children","transitionProps","React","style","radiusValue","to","CircleSvg","animated","circle","cx","cy","r","fill","stroke","strokeWidth","SwarmPlotAnnotations","boundAnnotations","annotation","Annotation","InnerSwarmPlot","partialMargin","_ref$id","_ref$value","_ref$valueScale","_ref$groupBy","_ref$size","_ref$forceStrength","_ref$simulationIterat","_ref$colors","_ref$colorBy","_ref$borderColor","_ref$borderWidth","_ref$layout","_ref$spacing","_ref$gap","_ref$layers","_ref$circleComponent","circleComponent","_ref$useMesh","_ref$debugMesh","_ref$enableGridX","gridXValues","_ref$enableGridY","gridYValues","_ref$axisTop","_ref$axisRight","_ref$axisBottom","_ref$axisLeft","_ref$tooltip","_ref$annotations","_ref$role","_useDimensions","useDimensions","_useSwarmPlot","props","_objectWithoutPropertiesLoose","_excluded","handlers","layerById","grid","circles","mesh","includes","Grid","xValues","yValues","Axes","top","undefined","right","bottom","left","Mesh","debug","layerContext","SvgWrapper","layer","Fragment","SwarmPlot","_ref2$isInteractive","_ref2$animate","_ref2$motionConfig","renderWrapper","otherProps","_excluded2","Container","ResponsiveSwarmPlot","ResponsiveWrapper","renderCircleDefault","ctx","nodeBorderWidth","strokeStyle","lineWidth","beginPath","arc","PI","fillStyle","InnerSwarmPlotCanvas","_ref2$id","_ref2$value","_ref2$valueScale","_ref2$groupBy","_ref2$size","_ref2$forceStrength","_ref2$simulationItera","_ref2$colors","_ref2$colorBy","_ref2$borderColor","_ref2$layout","_ref2$spacing","_ref2$gap","_ref2$layers","_ref2$renderCircle","renderCircle","_ref2$debugMesh","_ref2$axisTop","_ref2$axisRight","_ref2$axisBottom","_ref2$axisLeft","_ref2$tooltip","_ref2$role","_ref2$pixelRatio","canvasEl","useRef","_useState","useState","currentNode","setCurrentNode","_useVoronoiMesh","useVoronoiMesh","points","delaunay","voronoi","useEffect","current","getContext","background","fillRect","save","translate","forEach","line","renderGridLinesToCanvas","renderAxesToCanvas","renderVoronoiToCanvas","renderVoronoiCellToCanvas","index","getNodeFromMouseEvent","_getRelativeCursor","getRelativeCursor","isCursorInRect","nodeIndex","find","showNodeTooltip","handleMouseHover","ref","cursor","SwarmPlotCanvas","_ref4$isInteractive","_ref4$animate","_ref4$motionConfig","ResponsiveSwarmPlotCanvas"],"mappings":"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"}